; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___acrt_iob_func:PROC
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
prime8bytes DQ	cf1bbcdcb7a56463H
prime5bytes DQ	000000cf1bbcdcbbH
prime7bytes DQ	00cf1bbcdcbfa563H
prime6bytes DQ	0000cf1bbcdcbf9bH
prime4bytes DD	09e3779b1H
PUBLIC	printf
PUBLIC	_vfprintf_l
PUBLIC	__local_stdio_printf_options
PUBLIC	ZSTD_compressBlock_doubleFast_extDict
PUBLIC	ZSTD_fillDoubleHashTable
PUBLIC	ZSTD_compressBlock_doubleFast_dictMatchState
PUBLIC	ZSTD_compressBlock_doubleFast
	ALIGN	8

?time1@?1??ZSTD_compressBlock_doubleFast_generic@@9@9 DQ 01H DUP (?) ; `ZSTD_compressBlock_doubleFast_generic'::`2'::time1
?time2@?1??ZSTD_compressBlock_doubleFast_generic@@9@9 DQ 01H DUP (?) ; `ZSTD_compressBlock_doubleFast_generic'::`2'::time2
_BSS	ENDS
pdata	SEGMENT
$pdata$ZSTD_compressBlock_doubleFast_extDict_generic DD imagerel ZSTD_compressBlock_doubleFast_extDict_generic
	DD	imagerel ZSTD_compressBlock_doubleFast_extDict_generic+6453
	DD	imagerel $unwind$ZSTD_compressBlock_doubleFast_extDict_generic
$pdata$ZSTD_compressBlock_doubleFast_generic DD imagerel ZSTD_compressBlock_doubleFast_generic
	DD	imagerel ZSTD_compressBlock_doubleFast_generic+5598
	DD	imagerel $unwind$ZSTD_compressBlock_doubleFast_generic
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6
	DD	imagerel $LN6+85
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4
	DD	imagerel $LN4+68
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
pdata	SEGMENT
$pdata$ZSTD_count_2segments DD imagerel ZSTD_count_2segments
	DD	imagerel ZSTD_count_2segments+106
	DD	imagerel $unwind$ZSTD_count_2segments
$pdata$ZSTD_storeSeq DD imagerel ZSTD_storeSeq
	DD	imagerel ZSTD_storeSeq+271
	DD	imagerel $unwind$ZSTD_storeSeq
$pdata$ZSTD_compressBlock_doubleFast_extDict DD imagerel $LN12
	DD	imagerel $LN12+136
	DD	imagerel $unwind$ZSTD_compressBlock_doubleFast_extDict
$pdata$ZSTD_fillDoubleHashTable DD imagerel $LN87
	DD	imagerel $LN87+84
	DD	imagerel $unwind$ZSTD_fillDoubleHashTable
$pdata$1$ZSTD_fillDoubleHashTable DD imagerel $LN87+84
	DD	imagerel $LN87+384
	DD	imagerel $chain$1$ZSTD_fillDoubleHashTable
$pdata$2$ZSTD_fillDoubleHashTable DD imagerel $LN87+384
	DD	imagerel $LN87+397
	DD	imagerel $chain$2$ZSTD_fillDoubleHashTable
$pdata$ZSTD_compressBlock_doubleFast_dictMatchState DD imagerel $LN2691
	DD	imagerel $LN2691+10868
	DD	imagerel $unwind$ZSTD_compressBlock_doubleFast_dictMatchState
$pdata$ZSTD_compressBlock_doubleFast DD imagerel $LN2640
	DD	imagerel $LN2640+7446
	DD	imagerel $unwind$ZSTD_compressBlock_doubleFast
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 041b01H
	DD	07017521bH
	DD	030156016H
xdata	ENDS
xdata	SEGMENT
$unwind$ZSTD_compressBlock_doubleFast_extDict_generic DD 0b1c01H
	DD	01d341cH
	DD	014011cH
	DD	0e013f015H
	DD	0c00fd011H
	DD	0600c700dH
	DD	0500bH
$unwind$ZSTD_compressBlock_doubleFast_generic DD 0a1d01H
	DD	019011dH
	DD	0e014f016H
	DD	0c010d012H
	DD	0600d700eH
	DD	0300b500cH
$unwind$ZSTD_count_2segments DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
$unwind$ZSTD_storeSeq DD 020501H
	DD	013405H
$unwind$ZSTD_compressBlock_doubleFast_extDict DD 010401H
	DD	06204H
$unwind$ZSTD_fillDoubleHashTable DD 070d01H
	DD	0f009220dH
	DD	07005e007H
	DD	050036004H
	DD	03002H
$chain$1$ZSTD_fillDoubleHashTable DD 041021H
	DD	02d410H
	DD	0cc405H
	DD	imagerel $LN87
	DD	imagerel $LN87+84
	DD	imagerel $unwind$ZSTD_fillDoubleHashTable
$chain$2$ZSTD_fillDoubleHashTable DD 021H
	DD	imagerel $LN87
	DD	imagerel $LN87+84
	DD	imagerel $unwind$ZSTD_fillDoubleHashTable
$unwind$ZSTD_compressBlock_doubleFast_dictMatchState DD 0b1c01H
	DD	023341cH
	DD	01a011cH
	DD	0e013f015H
	DD	0c00fd011H
	DD	0600c700dH
	DD	0500bH
$unwind$ZSTD_compressBlock_doubleFast DD 0a2101H
	DD	0193421H
	DD	0f01af221H
	DD	0d016e018H
	DD	07012c014H
	DD	050106011H
	ORG $+3
$SG4294965530 DB '%I64u', 0aH, 00H
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
_TEXT	SEGMENT
offset_2$1$ = 32
offset_2$1$ = 32
offset_2$1$ = 32
hBitsL$1$ = 32
hBitsL$1$ = 36
hBitsL$1$ = 36
hBitsL$1$ = 36
offset_2$1$ = 36
hBitsS$1$ = 40
hBitsS$1$ = 40
hBitsS$1$ = 40
hBitsS$1$ = 40
offset$1$ = 44
offset$1$ = 44
offset$1$ = 44
offset$1$ = 44
iend$1$ = 48
current$1$ = 56
current$1$ = 56
current$1$ = 56
current$1$ = 56
base$1$ = 64
base$1$ = 64
base$1$ = 64
base$1$ = 64
hashLong$1$ = 72
litLimit_w$1$ = 80
litLength$1$ = 80
litLimit_w$1$ = 80
litLength$1$ = 80
litLimit_w$1$ = 80
litLength$1$ = 80
litLimit_w$1$ = 80
litLength$1$ = 80
tv11940 = 88
tv11810 = 88
tv11680 = 88
tv11549 = 88
ilimit$1$ = 96
ilimit$1$ = 96
ilimit$1$ = 96
prefixLowest$1$ = 96
hashSmall$1$ = 104
hashSmall$1$ = 104
hashSmall$1$ = 104
hashSmall$1$ = 104
prefixLowest$1$ = 112
prefixLowest$1$ = 112
prefixLowest$1$ = 112
ilimit$1$ = 112
offset_1$1$ = 192
offset_1$1$ = 192
offset_1$1$ = 192
offset_1$1$ = 192
ms$ = 192
seqStore$ = 200
rep$ = 208
src$ = 216
srcSize$ = 224
ZSTD_compressBlock_doubleFast PROC

; 347  : {

$LN2640:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 128				; 00000080H

; 348  :     const U32 mls = ms->cParams.minMatch;
; 349  :     switch(mls)

	mov	rax, QWORD PTR [rcx+48]
	mov	r11, r8
	mov	r10, QWORD PTR srcSize$[rsp]
	mov	r15, r9
	mov	QWORD PTR hashLong$1$[rsp], rax
	mov	rbx, rdx
	mov	eax, DWORD PTR [rcx+200]
	mov	r8, rcx
	mov	esi, DWORD PTR [r11]
	mov	edx, 1
	mov	edi, DWORD PTR [r11+4]
	lea	r14, QWORD PTR [r9+r10]
	mov	r9, QWORD PTR [rcx+8]
	mov	QWORD PTR base$1$[rsp], r9
	mov	QWORD PTR iend$1$[rsp], r14
	sub	eax, 5
	je	$LN5@ZSTD_compr
	sub	eax, edx
	je	$LN6@ZSTD_compr
	sub	r10d, r9d
	add	r10d, r15d
	cmp	eax, edx
	mov	eax, DWORD PTR [rcx+192]
	je	$LN7@ZSTD_compr

; 65   :     const U32 hBitsL = cParams->hashLog;

	mov	DWORD PTR hBitsL$1$[rsp], eax

; 66   :     U32* const hashSmall = ms->chainTable;

	mov	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR hashSmall$1$[rsp], rax

; 67   :     const U32 hBitsS = cParams->chainLog;

	mov	eax, DWORD PTR [rcx+188]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [rcx+184]
	shl	edx, cl
	mov	ecx, DWORD PTR [r8+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 67   :     const U32 hBitsS = cParams->chainLog;

	mov	DWORD PTR hBitsS$1$[rsp], eax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r10d

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r10d, edx
	sub	eax, ecx
	cmp	eax, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 77   :     const BYTE* const ilimit = iend - HASH_READ_SIZE;

	lea	rax, QWORD PTR [r14-8]
	mov	QWORD PTR ilimit$1$[rsp], rax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r10d, ecx
	cmp	DWORD PTR [r8+32], 0

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r10d, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 110  :     QueryPerformanceCounter(&time1);

	lea	rcx, OFFSET FLAT:?time1@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	mov	ebp, r10d
	add	rbp, r9
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	QWORD PTR srcSize$[rsp], r10
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 75   :     const BYTE* const prefixLowest = base + prefixLowestIndex;

	mov	QWORD PTR prefixLowest$1$[rsp], rbp

; 110  :     QueryPerformanceCounter(&time1);

	call	QWORD PTR __imp_QueryPerformanceCounter
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	r10, QWORD PTR ms$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 124  :     ip += (dictAndPrefixLength == 0);

	xor	r12d, r12d

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);

	mov	rdx, QWORD PTR base$1$[rsp]
	cmp	r15d, ebp
	mov	eax, r12d

; 129  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;

	mov	ebp, r12d
	sete	al
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 992  :     U32    const lowestValid = ms->window.dictLimit;

	mov	r8d, DWORD PTR [r10+24]
	mov	ecx, DWORD PTR [r10+184]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 124  :     ip += (dictAndPrefixLength == 0);

	lea	r13, QWORD PTR [rax+r15]

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);

	mov	r9d, r13d
	sub	r9d, edx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	edx, 1
	shl	edx, cl

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r9d
	sub	eax, r8d

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	ecx, r9d
	sub	ecx, edx
	cmp	eax, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	lea	rax, QWORD PTR [r14-8]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	ecx, r8d
	cmp	DWORD PTR [r10+32], r12d
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, r12d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	ecx, r8d
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 128  :         U32 const maxRep = current - windowLow;

	sub	r9d, ecx

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	ecx, esi
	cmp	edi, r9d
	cmovbe	ebp, edi
	cmovbe	edi, r12d
	cmp	esi, r9d
	cmovbe	ecx, edi
	cmovbe	r10d, esi
	mov	DWORD PTR tv11549[rsp], ecx
	cmp	r13, rax
	jae	$LN485@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	DWORD PTR offset_2$1$[rsp], ebp
	mov	DWORD PTR offset_1$1$[rsp], r10d
	npad	12
$LL10@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 143  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	call	ZSTD_hashPtr

; 144  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 4
	mov	rcx, r13
	mov	rsi, rax
	call	ZSTD_hashPtr

; 145  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 146  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 4
	mov	rcx, r13
	call	ZSTD_hashPtr

; 147  :         U32 const current = (U32)(ip-base);

	mov	rcx, QWORD PTR base$1$[rsp]
	mov	edx, r13d

; 148  :         U32 const matchIndexL = hashLong[h2];
; 149  :         U32 matchIndexS = hashSmall[h];

	mov	r10, QWORD PTR hashSmall$1$[rsp]
	sub	edx, ecx
	mov	r11, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR current$1$[rsp], edx
	mov	r9d, DWORD PTR [r10+rdi*4]
	mov	r8d, DWORD PTR [r11+rsi*4]

; 150  :         const BYTE* matchLong = base + matchIndexL;
; 151  :         const BYTE* match = base + matchIndexS;
; 152  :         const U32 repIndex = current + 1 - offset_1;
; 153  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState
; 154  :                             && repIndex < prefixLowestIndex) ?
; 155  :                                dictBase + (repIndex - dictIndexDelta) :
; 156  :                                base + repIndex;
; 157  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	DWORD PTR [r10+rdi*4], edx

; 158  : 
; 159  :         /* check dictMatchState repcode */
; 160  :         if (dictMode == ZSTD_dictMatchState
; 161  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 162  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {
; 163  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;
; 164  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;
; 165  :             ip++;
; 166  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 167  :             goto _match_stored;
; 168  :         }
; 169  : 
; 170  :         /* check noDict repcode */
; 171  :         if ( dictMode == ZSTD_noDict
; 172  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {

	mov	r10d, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR [r11+rsi*4], edx
	lea	rbp, QWORD PTR [rcx+r9]
	mov	eax, DWORD PTR [r13+1]
	lea	rsi, QWORD PTR [r13+1]
	lea	r14, QWORD PTR [rcx+r8]
	mov	QWORD PTR litLength$1$[rsp], rsi
	mov	ecx, r12d
	mov	rdx, r13
	sub	rdx, r10
	cmp	DWORD PTR [rdx+1], eax
	mov	eax, r12d
	sete	cl
	test	r10d, r10d
	setne	al
	test	ecx, eax
	je	$LN34@ZSTD_compr

; 173  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+5]
	mov	r8, rbp
	add	rdx, 5
	call	ZSTD_count
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
	add	rbp, -32				; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 174  :             ip++;

	mov	r13, rsi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 175  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	rsi, r15
	lea	rdi, QWORD PTR [rax+4]
	lea	r14, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rsi+r15]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN360@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN361@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	4
$LL374@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL374@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN361@ZSTD_compr
$LN360@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN361@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2566@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2566@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 176  :             goto _match_stored;

	jmp	$LN2628@ZSTD_compr
$LN34@ZSTD_compr:

; 177  :         }
; 178  : 
; 179  :         if (matchIndexL > prefixLowestIndex) {

	mov	rcx, QWORD PTR srcSize$[rsp]
	cmp	r8d, ecx
	jbe	SHORT $LN37@ZSTD_compr

; 180  :             /* check prefix long match */
; 181  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [r14], rax
	jne	SHORT $LN37@ZSTD_compr

; 182  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [r14+8]
	lea	rcx, QWORD PTR [r13+8]
	call	ZSTD_count

; 183  :                 offset = (U32)(ip-matchLong);
; 184  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, r14d
	cmp	r14, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	$_match_found$2641
	npad	1
$LL12@ZSTD_compr:
	movzx	eax, BYTE PTR [r14-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	r14
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2641
	inc	rdi
	mov	ecx, r12d
	cmp	r14, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL12@ZSTD_compr

; 185  :                 goto _match_found;

	jmp	$_match_found$2641
$LN37@ZSTD_compr:

; 186  :             }
; 187  :         } else if (dictMode == ZSTD_dictMatchState) {
; 188  :             /* check dictMatchState long match */
; 189  :             U32 const dictMatchIndexL = dictHashLong[dictHL];
; 190  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;
; 191  :             assert(dictMatchL < dictEnd);
; 192  : 
; 193  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {
; 194  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;
; 195  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);
; 196  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */
; 197  :                 goto _match_found;
; 198  :         }   }
; 199  : 
; 200  :         if (matchIndexS > prefixLowestIndex) {

	cmp	r9d, ecx
	jbe	$LN42@ZSTD_compr

; 201  :             /* check prefix short match */
; 202  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r13]
	cmp	DWORD PTR [rbp], eax
	jne	$LN42@ZSTD_compr
$_search_next_long$2642:

; 216  : #if defined(__aarch64__)
; 217  :         PREFETCH_L1(ip+256);
; 218  : #endif
; 219  :         continue;
; 220  : 
; 221  : _search_next_long:
; 222  : 
; 223  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	call	ZSTD_hashPtr

; 224  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	mov	rdi, rax
	call	ZSTD_hashPtr

; 225  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r8, QWORD PTR hashLong$1$[rsp]

; 226  :             const BYTE* matchL3 = base + matchIndexL3;
; 227  :             hashLong[hl3] = current + 1;

	mov	eax, DWORD PTR current$1$[rsp]
	mov	ecx, DWORD PTR [r8+rdi*4]
	mov	esi, ecx
	add	rsi, QWORD PTR base$1$[rsp]
	inc	eax
	mov	DWORD PTR [r8+rdi*4], eax

; 228  : 
; 229  :             /* check prefix long +1 match */
; 230  :             if (matchIndexL3 > prefixLowestIndex) {

	cmp	ecx, DWORD PTR srcSize$[rsp]
	jbe	$LN47@ZSTD_compr

; 231  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	r14, QWORD PTR litLength$1$[rsp]
	mov	rax, QWORD PTR [r14]
	cmp	QWORD PTR [rsi], rax
	jne	SHORT $LN47@ZSTD_compr

; 232  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r13+9]
	call	ZSTD_count

; 233  :                     ip++;
; 234  :                     offset = (U32)(ip-matchL3);
; 235  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r14d
	mov	r13, r14
	sub	r9d, esi
	cmp	r14, r15
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	rsi, r8
	seta	al
	test	ecx, eax
	je	$_match_found$2641
	npad	7
$LL16@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2641
	inc	rdi
	mov	ecx, r12d
	cmp	rsi, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL16@ZSTD_compr

; 236  :                     goto _match_found;

	jmp	SHORT $_match_found$2641
$LN47@ZSTD_compr:

; 237  :                 }
; 238  :             } else if (dictMode == ZSTD_dictMatchState) {
; 239  :                 /* check dict long +1 match */
; 240  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];
; 241  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;
; 242  :                 assert(dictMatchL3 < dictEnd);
; 243  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {
; 244  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;
; 245  :                     ip++;
; 246  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);
; 247  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */
; 248  :                     goto _match_found;
; 249  :         }   }   }
; 250  : 
; 251  :         /* if no long +1 match, explore the short match we found */
; 252  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {
; 253  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;
; 254  :             offset = (U32)(current - matchIndexS);
; 255  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */
; 256  :         } else {
; 257  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+4]
	lea	rcx, QWORD PTR [r13+4]
	call	ZSTD_count

; 258  :             offset = (U32)(ip - match);
; 259  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, ebp
	cmp	rbp, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2641
	npad	3
$LL22@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2641
	inc	rdi
	mov	ecx, r12d
	cmp	rbp, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL22@ZSTD_compr
$_match_found$2641:

; 260  :         }
; 261  : 
; 262  :         /* fall-through */
; 263  : 
; 264  : _match_found:
; 265  :         offset_2 = offset_1;

	mov	ebp, DWORD PTR offset_1$1$[rsp]

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	r14, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r13
	sub	rsi, r15
	mov	DWORD PTR offset_2$1$[rsp], ebp
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
	add	rbp, -32				; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 266  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r9d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rsi+r15]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN407@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN408@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	13
$LL421@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL421@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN408@ZSTD_compr
$LN407@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
	mov	r9d, DWORD PTR offset$1$[rsp]
$LN408@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2568@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2568@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r9+3]
	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], ecx
$LN2628@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 272  :         ip += mLength;

	mov	rcx, QWORD PTR [rbx+8]
	cmp	r14, 65535				; 0000ffffH
	jbe	SHORT $LN2569@ZSTD_compr
	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2569@ZSTD_compr:
	mov	WORD PTR [rcx+6], r14w
	add	QWORD PTR [rbx+8], 8
$_match_stored$2643:
	lea	r15, QWORD PTR [rdi+r13]
	mov	r13, r15

; 273  :         anchor = ip;

	cmp	r15, QWORD PTR ilimit$1$[rsp]

; 274  : 
; 275  :         if (ip <= ilimit) {

	ja	$LN2618@ZSTD_compr

; 276  :             /* Complementary insertion */
; 277  :             /* done after iLimit test, as candidates could be > iend-8 */
; 278  :             {   U32 const indexToInsert = current+2;

	mov	r14d, DWORD PTR current$1$[rsp]

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	rdi, QWORD PTR base$1$[rsp]
	add	r14d, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	ebp, r14d
	add	rbp, rdi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	esi, r15d

; 280  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	esi, edi
	mov	r8d, 8
	mov	DWORD PTR [rcx+rax*4], r14d
	lea	rcx, QWORD PTR [r15-2]
	lea	edi, DWORD PTR [rsi-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 281  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 4
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rbp, QWORD PTR hashSmall$1$[rsp]

; 282  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [r15-1]
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	lea	edi, DWORD PTR [rsi-1]
	mov	r8d, 4
	mov	DWORD PTR [rbp+rax*4], r14d
	call	ZSTD_hashPtr
	mov	r14, QWORD PTR litLimit_w$1$[rsp]
	mov	DWORD PTR [rbp+rax*4], edi
	mov	ebp, DWORD PTR offset_2$1$[rsp]
	npad	9
$LL26@ZSTD_compr:

; 283  :             }
; 284  : 
; 285  :             /* check immediate repcode */
; 286  :             if (dictMode == ZSTD_dictMatchState) {
; 287  :                 while (ip <= ilimit) {
; 288  :                     U32 const current2 = (U32)(ip-base);
; 289  :                     U32 const repIndex2 = current2 - offset_2;
; 290  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState
; 291  :                         && repIndex2 < prefixLowestIndex ?
; 292  :                             dictBase + repIndex2 - dictIndexDelta :
; 293  :                             base + repIndex2;
; 294  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 295  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {
; 296  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;
; 297  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;
; 298  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */
; 299  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);
; 300  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;
; 301  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;
; 302  :                         ip += repLength2;
; 303  :                         anchor = ip;
; 304  :                         continue;
; 305  :                     }
; 306  :                     break;
; 307  :             }   }
; 308  : 
; 309  :             if (dictMode == ZSTD_noDict) {
; 310  :                 while ( (ip <= ilimit)
; 311  :                      && ( (offset_2>0)

	mov	eax, ebp
	mov	ecx, r12d
	mov	rdx, r13
	sub	rdx, rax
	mov	eax, DWORD PTR [rdx]
	cmp	DWORD PTR [r13], eax
	mov	eax, r12d
	sete	cl
	test	ebp, ebp
	setne	al
	test	ecx, eax
	je	$LN2622@ZSTD_compr

; 312  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 313  :                     /* store sequence */
; 314  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+4]
	add	rdx, 4
	call	ZSTD_count

; 315  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 316  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	ecx, ebp
	mov	ebp, DWORD PTR offset_1$1$[rsp]
	mov	edi, r13d
	sub	edi, DWORD PTR base$1$[rsp]
	mov	r8d, 4
	mov	DWORD PTR offset_1$1$[rsp], ecx
	lea	rsi, QWORD PTR [rax+4]
	mov	rcx, r13
	mov	DWORD PTR offset_2$1$[rsp], ebp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 317  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r13
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi

; 318  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);

	lea	rdi, QWORD PTR [rsi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r15, r14
	ja	SHORT $LN461@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN462@ZSTD_compr
$LN461@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, r14
	mov	r8, r15
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN462@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [rbx+8]
	mov	WORD PTR [rax+4], r12w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbx+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdi, 65535				; 0000ffffH
	jbe	SHORT $LN2570@ZSTD_compr

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2570@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 319  :                     ip += rLength;

	add	r13, rsi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], di

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [rbx+8], 8
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 319  :                     ip += rLength;

	mov	r15, r13
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jbe	$LL26@ZSTD_compr

; 320  :                     anchor = ip;
; 321  :                     continue;   /* faster when present ... (?) */
; 322  :         }   }   }
; 323  :     }   /* while (ip < ilimit) */

	jmp	SHORT $LN2622@ZSTD_compr
$LN42@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]

; 203  :                 goto _search_next_long;
; 204  :             }
; 205  :         } else if (dictMode == ZSTD_dictMatchState) {
; 206  :             /* check dictMatchState short match */
; 207  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];
; 208  :             match = dictBase + dictMatchIndexS;
; 209  :             matchIndexS = dictMatchIndexS + dictIndexDelta;
; 210  : 
; 211  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {
; 212  :                 goto _search_next_long;
; 213  :         }   }
; 214  : 
; 215  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, r13
	sub	rax, r15
	inc	r13
	sar	rax, 8
	add	r13, rax

; 274  : 
; 275  :         if (ip <= ilimit) {

	jmp	SHORT $LN2522@ZSTD_compr
$LN2618@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]
$LN2622@ZSTD_compr:

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, DWORD PTR offset_1$1$[rsp]
$LN2522@ZSTD_compr:
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jb	$LL10@ZSTD_compr

; 350  :     {
; 351  :     default: /* includes case 3 */
; 352  :     case 4 :
; 353  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 4, ZSTD_noDict);

	mov	ecx, DWORD PTR tv11549[rsp]
	jmp	$LN2629@ZSTD_compr
$LN7@ZSTD_compr:

; 65   :     const U32 hBitsL = cParams->hashLog;

	mov	DWORD PTR hBitsL$1$[rsp], eax

; 66   :     U32* const hashSmall = ms->chainTable;

	mov	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR hashSmall$1$[rsp], rax

; 67   :     const U32 hBitsS = cParams->chainLog;

	mov	eax, DWORD PTR [rcx+188]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [rcx+184]
	shl	edx, cl
	mov	ecx, DWORD PTR [r8+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 67   :     const U32 hBitsS = cParams->chainLog;

	mov	DWORD PTR hBitsS$1$[rsp], eax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r10d

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r10d, edx
	sub	eax, ecx
	cmp	eax, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 77   :     const BYTE* const ilimit = iend - HASH_READ_SIZE;

	lea	rax, QWORD PTR [r14-8]
	mov	QWORD PTR ilimit$1$[rsp], rax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r10d, ecx
	cmp	DWORD PTR [r8+32], 0

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r10d, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 110  :     QueryPerformanceCounter(&time1);

	lea	rcx, OFFSET FLAT:?time1@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	mov	ebp, r10d
	add	rbp, r9
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	QWORD PTR srcSize$[rsp], r10
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 75   :     const BYTE* const prefixLowest = base + prefixLowestIndex;

	mov	QWORD PTR prefixLowest$1$[rsp], rbp

; 110  :     QueryPerformanceCounter(&time1);

	call	QWORD PTR __imp_QueryPerformanceCounter
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	r10, QWORD PTR ms$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 124  :     ip += (dictAndPrefixLength == 0);

	xor	r12d, r12d

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);

	mov	rdx, QWORD PTR base$1$[rsp]
	cmp	r15d, ebp
	mov	eax, r12d

; 129  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;

	mov	ebp, r12d
	sete	al
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 992  :     U32    const lowestValid = ms->window.dictLimit;

	mov	r8d, DWORD PTR [r10+24]
	mov	ecx, DWORD PTR [r10+184]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 124  :     ip += (dictAndPrefixLength == 0);

	lea	r13, QWORD PTR [rax+r15]

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);

	mov	r9d, r13d
	sub	r9d, edx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	edx, 1
	shl	edx, cl

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r9d
	sub	eax, r8d

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	ecx, r9d
	sub	ecx, edx
	cmp	eax, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	lea	rax, QWORD PTR [r14-8]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	ecx, r8d
	cmp	DWORD PTR [r10+32], r12d
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, r12d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	ecx, r8d
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 128  :         U32 const maxRep = current - windowLow;

	sub	r9d, ecx

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	ecx, esi
	cmp	edi, r9d
	cmovbe	ebp, edi
	cmovbe	edi, r12d
	cmp	esi, r9d
	cmovbe	ecx, edi
	cmovbe	r10d, esi
	mov	DWORD PTR tv11680[rsp], ecx
	cmp	r13, rax
	jae	$LN485@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	DWORD PTR offset_2$1$[rsp], ebp
	mov	DWORD PTR offset_1$1$[rsp], r10d
$LL1679@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 143  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	call	ZSTD_hashPtr

; 144  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 7
	mov	rcx, r13
	mov	rsi, rax
	call	ZSTD_hashPtr

; 145  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 146  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 7
	mov	rcx, r13
	call	ZSTD_hashPtr

; 147  :         U32 const current = (U32)(ip-base);

	mov	rcx, QWORD PTR base$1$[rsp]
	mov	edx, r13d

; 148  :         U32 const matchIndexL = hashLong[h2];
; 149  :         U32 matchIndexS = hashSmall[h];

	mov	r10, QWORD PTR hashSmall$1$[rsp]
	sub	edx, ecx
	mov	r11, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR current$1$[rsp], edx
	mov	r9d, DWORD PTR [r10+rdi*4]
	mov	r8d, DWORD PTR [r11+rsi*4]

; 150  :         const BYTE* matchLong = base + matchIndexL;
; 151  :         const BYTE* match = base + matchIndexS;
; 152  :         const U32 repIndex = current + 1 - offset_1;
; 153  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState
; 154  :                             && repIndex < prefixLowestIndex) ?
; 155  :                                dictBase + (repIndex - dictIndexDelta) :
; 156  :                                base + repIndex;
; 157  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	DWORD PTR [r10+rdi*4], edx

; 158  : 
; 159  :         /* check dictMatchState repcode */
; 160  :         if (dictMode == ZSTD_dictMatchState
; 161  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 162  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {
; 163  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;
; 164  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;
; 165  :             ip++;
; 166  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 167  :             goto _match_stored;
; 168  :         }
; 169  : 
; 170  :         /* check noDict repcode */
; 171  :         if ( dictMode == ZSTD_noDict
; 172  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {

	mov	r10d, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR [r11+rsi*4], edx
	lea	rbp, QWORD PTR [rcx+r9]
	mov	eax, DWORD PTR [r13+1]
	lea	rsi, QWORD PTR [r13+1]
	lea	r14, QWORD PTR [rcx+r8]
	mov	QWORD PTR litLength$1$[rsp], rsi
	mov	ecx, r12d
	mov	rdx, r13
	sub	rdx, r10
	cmp	DWORD PTR [rdx+1], eax
	mov	eax, r12d
	sete	cl
	test	r10d, r10d
	setne	al
	test	ecx, eax
	je	$LN1703@ZSTD_compr

; 173  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+5]
	mov	r8, rbp
	add	rdx, 5
	call	ZSTD_count
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
	add	rbp, -32				; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 174  :             ip++;

	mov	r13, rsi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 175  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	rsi, r15
	lea	rdi, QWORD PTR [rax+4]
	lea	r14, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rsi+r15]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN2142@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN2143@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	4
$LL2156@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL2156@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN2143@ZSTD_compr
$LN2142@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN2143@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2571@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2571@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 176  :             goto _match_stored;

	jmp	$LN2632@ZSTD_compr
$LN1703@ZSTD_compr:

; 177  :         }
; 178  : 
; 179  :         if (matchIndexL > prefixLowestIndex) {

	mov	rcx, QWORD PTR srcSize$[rsp]
	cmp	r8d, ecx
	jbe	SHORT $LN1706@ZSTD_compr

; 180  :             /* check prefix long match */
; 181  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [r14], rax
	jne	SHORT $LN1706@ZSTD_compr

; 182  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [r14+8]
	lea	rcx, QWORD PTR [r13+8]
	call	ZSTD_count

; 183  :                 offset = (U32)(ip-matchLong);
; 184  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, r14d
	cmp	r14, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	$_match_found$2644
	npad	1
$LL1681@ZSTD_compr:
	movzx	eax, BYTE PTR [r14-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	r14
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2644
	inc	rdi
	mov	ecx, r12d
	cmp	r14, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL1681@ZSTD_compr

; 185  :                 goto _match_found;

	jmp	$_match_found$2644
$LN1706@ZSTD_compr:

; 186  :             }
; 187  :         } else if (dictMode == ZSTD_dictMatchState) {
; 188  :             /* check dictMatchState long match */
; 189  :             U32 const dictMatchIndexL = dictHashLong[dictHL];
; 190  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;
; 191  :             assert(dictMatchL < dictEnd);
; 192  : 
; 193  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {
; 194  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;
; 195  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);
; 196  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */
; 197  :                 goto _match_found;
; 198  :         }   }
; 199  : 
; 200  :         if (matchIndexS > prefixLowestIndex) {

	cmp	r9d, ecx
	jbe	$LN1711@ZSTD_compr

; 201  :             /* check prefix short match */
; 202  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r13]
	cmp	DWORD PTR [rbp], eax
	jne	$LN1711@ZSTD_compr
$_search_next_long$2645:

; 216  : #if defined(__aarch64__)
; 217  :         PREFETCH_L1(ip+256);
; 218  : #endif
; 219  :         continue;
; 220  : 
; 221  : _search_next_long:
; 222  : 
; 223  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	call	ZSTD_hashPtr

; 224  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	mov	rdi, rax
	call	ZSTD_hashPtr

; 225  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r8, QWORD PTR hashLong$1$[rsp]

; 226  :             const BYTE* matchL3 = base + matchIndexL3;
; 227  :             hashLong[hl3] = current + 1;

	mov	eax, DWORD PTR current$1$[rsp]
	mov	ecx, DWORD PTR [r8+rdi*4]
	mov	esi, ecx
	add	rsi, QWORD PTR base$1$[rsp]
	inc	eax
	mov	DWORD PTR [r8+rdi*4], eax

; 228  : 
; 229  :             /* check prefix long +1 match */
; 230  :             if (matchIndexL3 > prefixLowestIndex) {

	cmp	ecx, DWORD PTR srcSize$[rsp]
	jbe	$LN1716@ZSTD_compr

; 231  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	r14, QWORD PTR litLength$1$[rsp]
	mov	rax, QWORD PTR [r14]
	cmp	QWORD PTR [rsi], rax
	jne	SHORT $LN1716@ZSTD_compr

; 232  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r13+9]
	call	ZSTD_count

; 233  :                     ip++;
; 234  :                     offset = (U32)(ip-matchL3);
; 235  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r14d
	mov	r13, r14
	sub	r9d, esi
	cmp	r14, r15
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	rsi, r8
	seta	al
	test	ecx, eax
	je	$_match_found$2644
	npad	7
$LL1685@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2644
	inc	rdi
	mov	ecx, r12d
	cmp	rdx, r15
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rsi, r8
	seta	al
	test	ecx, eax
	jne	SHORT $LL1685@ZSTD_compr

; 236  :                     goto _match_found;

	jmp	SHORT $_match_found$2644
$LN1716@ZSTD_compr:

; 237  :                 }
; 238  :             } else if (dictMode == ZSTD_dictMatchState) {
; 239  :                 /* check dict long +1 match */
; 240  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];
; 241  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;
; 242  :                 assert(dictMatchL3 < dictEnd);
; 243  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {
; 244  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;
; 245  :                     ip++;
; 246  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);
; 247  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */
; 248  :                     goto _match_found;
; 249  :         }   }   }
; 250  : 
; 251  :         /* if no long +1 match, explore the short match we found */
; 252  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {
; 253  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;
; 254  :             offset = (U32)(current - matchIndexS);
; 255  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */
; 256  :         } else {
; 257  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+4]
	lea	rcx, QWORD PTR [r13+4]
	call	ZSTD_count

; 258  :             offset = (U32)(ip - match);
; 259  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, ebp
	cmp	rbp, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2644
	npad	3
$LL1691@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2644
	inc	rdi
	mov	ecx, r12d
	cmp	rdx, r15
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rbp, r8
	seta	al
	test	ecx, eax
	jne	SHORT $LL1691@ZSTD_compr
$_match_found$2644:

; 260  :         }
; 261  : 
; 262  :         /* fall-through */
; 263  : 
; 264  : _match_found:
; 265  :         offset_2 = offset_1;

	mov	ebp, DWORD PTR offset_1$1$[rsp]

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	r14, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r13
	sub	rsi, r15
	mov	DWORD PTR offset_2$1$[rsp], ebp
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
	add	rbp, -32				; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 266  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r9d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [r15+rsi]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN2410@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN2411@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	13
$LL2424@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL2424@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN2411@ZSTD_compr
$LN2410@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
	mov	r9d, DWORD PTR offset$1$[rsp]
$LN2411@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2573@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2573@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r9+3]
	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], ecx
$LN2632@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 272  :         ip += mLength;

	mov	rcx, QWORD PTR [rbx+8]
	cmp	r14, 65535				; 0000ffffH
	jbe	SHORT $LN2574@ZSTD_compr
	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2574@ZSTD_compr:
	mov	WORD PTR [rcx+6], r14w
	add	QWORD PTR [rbx+8], 8
$_match_stored$2646:
	lea	r15, QWORD PTR [rdi+r13]
	mov	r13, r15

; 273  :         anchor = ip;

	cmp	r15, QWORD PTR ilimit$1$[rsp]

; 274  : 
; 275  :         if (ip <= ilimit) {

	ja	$LN2619@ZSTD_compr

; 276  :             /* Complementary insertion */
; 277  :             /* done after iLimit test, as candidates could be > iend-8 */
; 278  :             {   U32 const indexToInsert = current+2;

	mov	r14d, DWORD PTR current$1$[rsp]

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	rdi, QWORD PTR base$1$[rsp]
	add	r14d, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	ebp, r14d
	add	rbp, rdi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	esi, r15d

; 280  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	esi, edi
	mov	r8d, 8
	mov	DWORD PTR [rcx+rax*4], r14d
	lea	rcx, QWORD PTR [r15-2]
	lea	edi, DWORD PTR [rsi-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 281  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 7
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rbp, QWORD PTR hashSmall$1$[rsp]

; 282  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [r15-1]
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	lea	edi, DWORD PTR [rsi-1]
	mov	r8d, 7
	mov	DWORD PTR [rbp+rax*4], r14d
	call	ZSTD_hashPtr
	mov	r14, QWORD PTR litLimit_w$1$[rsp]
	mov	DWORD PTR [rbp+rax*4], edi
	mov	ebp, DWORD PTR offset_2$1$[rsp]
	npad	9
$LL1695@ZSTD_compr:

; 283  :             }
; 284  : 
; 285  :             /* check immediate repcode */
; 286  :             if (dictMode == ZSTD_dictMatchState) {
; 287  :                 while (ip <= ilimit) {
; 288  :                     U32 const current2 = (U32)(ip-base);
; 289  :                     U32 const repIndex2 = current2 - offset_2;
; 290  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState
; 291  :                         && repIndex2 < prefixLowestIndex ?
; 292  :                             dictBase + repIndex2 - dictIndexDelta :
; 293  :                             base + repIndex2;
; 294  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 295  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {
; 296  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;
; 297  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;
; 298  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */
; 299  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);
; 300  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;
; 301  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;
; 302  :                         ip += repLength2;
; 303  :                         anchor = ip;
; 304  :                         continue;
; 305  :                     }
; 306  :                     break;
; 307  :             }   }
; 308  : 
; 309  :             if (dictMode == ZSTD_noDict) {
; 310  :                 while ( (ip <= ilimit)
; 311  :                      && ( (offset_2>0)

	mov	eax, ebp
	mov	ecx, r12d
	mov	rdx, r13
	sub	rdx, rax
	mov	eax, DWORD PTR [rdx]
	cmp	DWORD PTR [r13], eax
	mov	eax, r12d
	sete	cl
	test	ebp, ebp
	setne	al
	test	ecx, eax
	je	$LN2623@ZSTD_compr

; 312  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 313  :                     /* store sequence */
; 314  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+4]
	add	rdx, 4
	call	ZSTD_count

; 315  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 316  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	ecx, ebp
	mov	ebp, DWORD PTR offset_1$1$[rsp]
	mov	edi, r13d
	sub	edi, DWORD PTR base$1$[rsp]
	mov	r8d, 7
	mov	DWORD PTR offset_1$1$[rsp], ecx
	lea	rsi, QWORD PTR [rax+4]
	mov	rcx, r13
	mov	DWORD PTR offset_2$1$[rsp], ebp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 317  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r13
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi

; 318  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);

	lea	rdi, QWORD PTR [rsi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r15, r14
	ja	SHORT $LN2464@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN2465@ZSTD_compr
$LN2464@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, r14
	mov	r8, r15
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN2465@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [rbx+8]
	mov	WORD PTR [rax+4], r12w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbx+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdi, 65535				; 0000ffffH
	jbe	SHORT $LN2575@ZSTD_compr

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2575@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 319  :                     ip += rLength;

	add	r13, rsi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], di

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [rbx+8], 8
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 319  :                     ip += rLength;

	mov	r15, r13
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jbe	$LL1695@ZSTD_compr

; 320  :                     anchor = ip;
; 321  :                     continue;   /* faster when present ... (?) */
; 322  :         }   }   }
; 323  :     }   /* while (ip < ilimit) */

	jmp	SHORT $LN2623@ZSTD_compr
$LN1711@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]

; 203  :                 goto _search_next_long;
; 204  :             }
; 205  :         } else if (dictMode == ZSTD_dictMatchState) {
; 206  :             /* check dictMatchState short match */
; 207  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];
; 208  :             match = dictBase + dictMatchIndexS;
; 209  :             matchIndexS = dictMatchIndexS + dictIndexDelta;
; 210  : 
; 211  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {
; 212  :                 goto _search_next_long;
; 213  :         }   }
; 214  : 
; 215  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, r13
	sub	rax, r15
	inc	r13
	sar	rax, 8
	add	r13, rax

; 274  : 
; 275  :         if (ip <= ilimit) {

	jmp	SHORT $LN2527@ZSTD_compr
$LN2619@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]
$LN2623@ZSTD_compr:

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, DWORD PTR offset_1$1$[rsp]
$LN2527@ZSTD_compr:
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jb	$LL1679@ZSTD_compr

; 358  :     case 7 :
; 359  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 7, ZSTD_noDict);

	mov	ecx, DWORD PTR tv11680[rsp]
	jmp	$LN2629@ZSTD_compr
$LN6@ZSTD_compr:

; 65   :     const U32 hBitsL = cParams->hashLog;

	mov	eax, DWORD PTR [rcx+192]

; 68   :     const BYTE* const base = ms->window.base;
; 69   :     const BYTE* const istart = (const BYTE*)src;
; 70   :     const BYTE* ip = istart;
; 71   :     const BYTE* anchor = istart;
; 72   :     const U32 endIndex = (U32)((size_t)(istart - base) + srcSize);

	sub	r10d, r9d
	add	r10d, r15d
	mov	DWORD PTR hBitsL$1$[rsp], eax
	mov	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR hashSmall$1$[rsp], rax
	mov	eax, DWORD PTR [rcx+188]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [rcx+184]
	shl	edx, cl
	mov	ecx, DWORD PTR [r8+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 67   :     const U32 hBitsS = cParams->chainLog;

	mov	DWORD PTR hBitsS$1$[rsp], eax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r10d

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r10d, edx
	sub	eax, ecx
	cmp	eax, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 77   :     const BYTE* const ilimit = iend - HASH_READ_SIZE;

	lea	rax, QWORD PTR [r14-8]
	mov	QWORD PTR ilimit$1$[rsp], rax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r10d, ecx
	cmp	DWORD PTR [r8+32], 0

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r10d, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 110  :     QueryPerformanceCounter(&time1);

	lea	rcx, OFFSET FLAT:?time1@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	mov	ebp, r10d
	add	rbp, r9
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	QWORD PTR srcSize$[rsp], r10
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 75   :     const BYTE* const prefixLowest = base + prefixLowestIndex;

	mov	QWORD PTR prefixLowest$1$[rsp], rbp

; 110  :     QueryPerformanceCounter(&time1);

	call	QWORD PTR __imp_QueryPerformanceCounter
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	r10, QWORD PTR ms$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 124  :     ip += (dictAndPrefixLength == 0);

	xor	r12d, r12d

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);

	mov	rdx, QWORD PTR base$1$[rsp]
	cmp	r15d, ebp
	mov	eax, r12d

; 129  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;

	mov	ebp, r12d
	sete	al
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 992  :     U32    const lowestValid = ms->window.dictLimit;

	mov	r8d, DWORD PTR [r10+24]
	mov	ecx, DWORD PTR [r10+184]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 124  :     ip += (dictAndPrefixLength == 0);

	lea	r13, QWORD PTR [rax+r15]

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);

	mov	r9d, r13d
	sub	r9d, edx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	edx, 1
	shl	edx, cl

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r9d
	sub	eax, r8d

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	ecx, r9d
	sub	ecx, edx
	cmp	eax, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	lea	rax, QWORD PTR [r14-8]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	ecx, r8d
	cmp	DWORD PTR [r10+32], r12d
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, r12d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	ecx, r8d
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 128  :         U32 const maxRep = current - windowLow;

	sub	r9d, ecx

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	ecx, esi
	cmp	edi, r9d
	cmovbe	ebp, edi
	cmovbe	edi, r12d
	cmp	esi, r9d
	cmovbe	ecx, edi
	cmovbe	r10d, esi
	mov	DWORD PTR tv11810[rsp], ecx
	cmp	r13, rax
	jae	$LN485@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	DWORD PTR offset_2$1$[rsp], ebp
	mov	DWORD PTR offset_1$1$[rsp], r10d
	npad	4
$LL1037@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 143  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	call	ZSTD_hashPtr

; 144  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 6
	mov	rcx, r13
	mov	rsi, rax
	call	ZSTD_hashPtr

; 145  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 146  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 6
	mov	rcx, r13
	call	ZSTD_hashPtr

; 147  :         U32 const current = (U32)(ip-base);

	mov	rcx, QWORD PTR base$1$[rsp]
	mov	edx, r13d

; 148  :         U32 const matchIndexL = hashLong[h2];
; 149  :         U32 matchIndexS = hashSmall[h];

	mov	r10, QWORD PTR hashSmall$1$[rsp]
	sub	edx, ecx
	mov	r11, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR current$1$[rsp], edx
	mov	r9d, DWORD PTR [r10+rdi*4]
	mov	r8d, DWORD PTR [r11+rsi*4]

; 150  :         const BYTE* matchLong = base + matchIndexL;
; 151  :         const BYTE* match = base + matchIndexS;
; 152  :         const U32 repIndex = current + 1 - offset_1;
; 153  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState
; 154  :                             && repIndex < prefixLowestIndex) ?
; 155  :                                dictBase + (repIndex - dictIndexDelta) :
; 156  :                                base + repIndex;
; 157  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	DWORD PTR [r10+rdi*4], edx

; 158  : 
; 159  :         /* check dictMatchState repcode */
; 160  :         if (dictMode == ZSTD_dictMatchState
; 161  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 162  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {
; 163  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;
; 164  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;
; 165  :             ip++;
; 166  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 167  :             goto _match_stored;
; 168  :         }
; 169  : 
; 170  :         /* check noDict repcode */
; 171  :         if ( dictMode == ZSTD_noDict
; 172  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {

	mov	r10d, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR [r11+rsi*4], edx
	lea	rbp, QWORD PTR [rcx+r9]
	mov	eax, DWORD PTR [r13+1]
	lea	rsi, QWORD PTR [r13+1]
	lea	r14, QWORD PTR [rcx+r8]
	mov	QWORD PTR litLength$1$[rsp], rsi
	mov	ecx, r12d
	mov	rdx, r13
	sub	rdx, r10
	cmp	DWORD PTR [rdx+1], eax
	mov	eax, r12d
	sete	cl
	test	r10d, r10d
	setne	al
	test	ecx, eax
	je	$LN1061@ZSTD_compr

; 173  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+5]
	mov	r8, rbp
	add	rdx, 5
	call	ZSTD_count
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
	add	rbp, -32				; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 174  :             ip++;

	mov	r13, rsi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 175  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	rsi, r15
	lea	rdi, QWORD PTR [rax+4]
	lea	r14, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rsi+r15]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN1471@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN1472@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	4
$LL1485@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL1485@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN1472@ZSTD_compr
$LN1471@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN1472@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2576@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2576@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 176  :             goto _match_stored;

	jmp	$LN2635@ZSTD_compr
$LN1061@ZSTD_compr:

; 177  :         }
; 178  : 
; 179  :         if (matchIndexL > prefixLowestIndex) {

	mov	rcx, QWORD PTR srcSize$[rsp]
	cmp	r8d, ecx
	jbe	SHORT $LN1064@ZSTD_compr

; 180  :             /* check prefix long match */
; 181  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [r14], rax
	jne	SHORT $LN1064@ZSTD_compr

; 182  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [r14+8]
	lea	rcx, QWORD PTR [r13+8]
	call	ZSTD_count

; 183  :                 offset = (U32)(ip-matchLong);
; 184  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, r14d
	cmp	r14, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	$_match_found$2647
	npad	1
$LL1039@ZSTD_compr:
	movzx	eax, BYTE PTR [r14-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	r14
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2647
	inc	rdi
	mov	ecx, r12d
	cmp	r14, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL1039@ZSTD_compr

; 185  :                 goto _match_found;

	jmp	$_match_found$2647
$LN1064@ZSTD_compr:

; 186  :             }
; 187  :         } else if (dictMode == ZSTD_dictMatchState) {
; 188  :             /* check dictMatchState long match */
; 189  :             U32 const dictMatchIndexL = dictHashLong[dictHL];
; 190  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;
; 191  :             assert(dictMatchL < dictEnd);
; 192  : 
; 193  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {
; 194  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;
; 195  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);
; 196  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */
; 197  :                 goto _match_found;
; 198  :         }   }
; 199  : 
; 200  :         if (matchIndexS > prefixLowestIndex) {

	cmp	r9d, ecx
	jbe	$LN1069@ZSTD_compr

; 201  :             /* check prefix short match */
; 202  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r13]
	cmp	DWORD PTR [rbp], eax
	jne	$LN1069@ZSTD_compr
$_search_next_long$2648:

; 216  : #if defined(__aarch64__)
; 217  :         PREFETCH_L1(ip+256);
; 218  : #endif
; 219  :         continue;
; 220  : 
; 221  : _search_next_long:
; 222  : 
; 223  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	call	ZSTD_hashPtr

; 224  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	mov	rdi, rax
	call	ZSTD_hashPtr

; 225  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r8, QWORD PTR hashLong$1$[rsp]

; 226  :             const BYTE* matchL3 = base + matchIndexL3;
; 227  :             hashLong[hl3] = current + 1;

	mov	eax, DWORD PTR current$1$[rsp]
	mov	ecx, DWORD PTR [r8+rdi*4]
	mov	esi, ecx
	add	rsi, QWORD PTR base$1$[rsp]
	inc	eax
	mov	DWORD PTR [r8+rdi*4], eax

; 228  : 
; 229  :             /* check prefix long +1 match */
; 230  :             if (matchIndexL3 > prefixLowestIndex) {

	cmp	ecx, DWORD PTR srcSize$[rsp]
	jbe	$LN1074@ZSTD_compr

; 231  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	r14, QWORD PTR litLength$1$[rsp]
	mov	rax, QWORD PTR [r14]
	cmp	QWORD PTR [rsi], rax
	jne	SHORT $LN1074@ZSTD_compr

; 232  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r13+9]
	call	ZSTD_count

; 233  :                     ip++;
; 234  :                     offset = (U32)(ip-matchL3);
; 235  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r14d
	mov	r13, r14
	sub	r9d, esi
	cmp	rsi, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	r14, r15
	seta	al
	test	ecx, eax
	je	$_match_found$2647
	npad	7
$LL1043@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2647
	inc	rdi
	mov	ecx, r12d
	cmp	rsi, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL1043@ZSTD_compr

; 236  :                     goto _match_found;

	jmp	SHORT $_match_found$2647
$LN1074@ZSTD_compr:

; 237  :                 }
; 238  :             } else if (dictMode == ZSTD_dictMatchState) {
; 239  :                 /* check dict long +1 match */
; 240  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];
; 241  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;
; 242  :                 assert(dictMatchL3 < dictEnd);
; 243  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {
; 244  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;
; 245  :                     ip++;
; 246  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);
; 247  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */
; 248  :                     goto _match_found;
; 249  :         }   }   }
; 250  : 
; 251  :         /* if no long +1 match, explore the short match we found */
; 252  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {
; 253  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;
; 254  :             offset = (U32)(current - matchIndexS);
; 255  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */
; 256  :         } else {
; 257  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+4]
	lea	rcx, QWORD PTR [r13+4]
	call	ZSTD_count

; 258  :             offset = (U32)(ip - match);
; 259  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, ebp
	cmp	rbp, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2647
	npad	3
$LL1049@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2647
	inc	rdi
	mov	ecx, r12d
	cmp	rbp, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL1049@ZSTD_compr
$_match_found$2647:

; 260  :         }
; 261  : 
; 262  :         /* fall-through */
; 263  : 
; 264  : _match_found:
; 265  :         offset_2 = offset_1;

	mov	ebp, DWORD PTR offset_1$1$[rsp]

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	r14, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r13
	sub	rsi, r15
	mov	DWORD PTR offset_2$1$[rsp], ebp
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
	add	rbp, -32				; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 266  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r9d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [r15+rsi]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN1602@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN1603@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	13
$LL1616@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL1616@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN1603@ZSTD_compr
$LN1602@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
	mov	r9d, DWORD PTR offset$1$[rsp]
$LN1603@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2578@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2578@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r9+3]
	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], ecx
$LN2635@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 272  :         ip += mLength;

	mov	rcx, QWORD PTR [rbx+8]
	cmp	r14, 65535				; 0000ffffH
	jbe	SHORT $LN2579@ZSTD_compr
	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2579@ZSTD_compr:
	mov	WORD PTR [rcx+6], r14w
	add	QWORD PTR [rbx+8], 8
$_match_stored$2649:
	lea	r15, QWORD PTR [rdi+r13]
	mov	r13, r15

; 273  :         anchor = ip;

	cmp	r15, QWORD PTR ilimit$1$[rsp]

; 274  : 
; 275  :         if (ip <= ilimit) {

	ja	$LN2620@ZSTD_compr

; 276  :             /* Complementary insertion */
; 277  :             /* done after iLimit test, as candidates could be > iend-8 */
; 278  :             {   U32 const indexToInsert = current+2;

	mov	r14d, DWORD PTR current$1$[rsp]

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	rdi, QWORD PTR base$1$[rsp]
	add	r14d, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	ebp, r14d
	add	rbp, rdi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	esi, r15d

; 280  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	esi, edi
	mov	r8d, 8
	mov	DWORD PTR [rcx+rax*4], r14d
	lea	rcx, QWORD PTR [r15-2]
	lea	edi, DWORD PTR [rsi-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 281  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 6
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rbp, QWORD PTR hashSmall$1$[rsp]

; 282  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [r15-1]
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	lea	edi, DWORD PTR [rsi-1]
	mov	r8d, 6
	mov	DWORD PTR [rbp+rax*4], r14d
	call	ZSTD_hashPtr
	mov	r14, QWORD PTR litLimit_w$1$[rsp]
	mov	DWORD PTR [rbp+rax*4], edi
	mov	ebp, DWORD PTR offset_2$1$[rsp]
	npad	9
$LL1053@ZSTD_compr:

; 283  :             }
; 284  : 
; 285  :             /* check immediate repcode */
; 286  :             if (dictMode == ZSTD_dictMatchState) {
; 287  :                 while (ip <= ilimit) {
; 288  :                     U32 const current2 = (U32)(ip-base);
; 289  :                     U32 const repIndex2 = current2 - offset_2;
; 290  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState
; 291  :                         && repIndex2 < prefixLowestIndex ?
; 292  :                             dictBase + repIndex2 - dictIndexDelta :
; 293  :                             base + repIndex2;
; 294  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 295  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {
; 296  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;
; 297  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;
; 298  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */
; 299  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);
; 300  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;
; 301  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;
; 302  :                         ip += repLength2;
; 303  :                         anchor = ip;
; 304  :                         continue;
; 305  :                     }
; 306  :                     break;
; 307  :             }   }
; 308  : 
; 309  :             if (dictMode == ZSTD_noDict) {
; 310  :                 while ( (ip <= ilimit)
; 311  :                      && ( (offset_2>0)

	mov	eax, ebp
	mov	ecx, r12d
	mov	rdx, r13
	sub	rdx, rax
	mov	eax, DWORD PTR [rdx]
	cmp	DWORD PTR [r13], eax
	mov	eax, r12d
	sete	cl
	test	ebp, ebp
	setne	al
	test	ecx, eax
	je	$LN2624@ZSTD_compr

; 312  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 313  :                     /* store sequence */
; 314  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+4]
	add	rdx, 4
	call	ZSTD_count

; 315  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 316  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	ecx, ebp
	mov	ebp, DWORD PTR offset_1$1$[rsp]
	mov	edi, r13d
	sub	edi, DWORD PTR base$1$[rsp]
	mov	r8d, 6
	mov	DWORD PTR offset_1$1$[rsp], ecx
	lea	rsi, QWORD PTR [rax+4]
	mov	rcx, r13
	mov	DWORD PTR offset_2$1$[rsp], ebp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 317  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r13
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi

; 318  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);

	lea	rdi, QWORD PTR [rsi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r15, r14
	ja	SHORT $LN1656@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN1657@ZSTD_compr
$LN1656@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, r14
	mov	r8, r15
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN1657@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [rbx+8]
	mov	WORD PTR [rax+4], r12w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbx+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdi, 65535				; 0000ffffH
	jbe	SHORT $LN2580@ZSTD_compr

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2580@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 319  :                     ip += rLength;

	add	r13, rsi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], di

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [rbx+8], 8
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 319  :                     ip += rLength;

	mov	r15, r13
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jbe	$LL1053@ZSTD_compr

; 320  :                     anchor = ip;
; 321  :                     continue;   /* faster when present ... (?) */
; 322  :         }   }   }
; 323  :     }   /* while (ip < ilimit) */

	jmp	SHORT $LN2624@ZSTD_compr
$LN1069@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]

; 203  :                 goto _search_next_long;
; 204  :             }
; 205  :         } else if (dictMode == ZSTD_dictMatchState) {
; 206  :             /* check dictMatchState short match */
; 207  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];
; 208  :             match = dictBase + dictMatchIndexS;
; 209  :             matchIndexS = dictMatchIndexS + dictIndexDelta;
; 210  : 
; 211  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {
; 212  :                 goto _search_next_long;
; 213  :         }   }
; 214  : 
; 215  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, r13
	sub	rax, r15
	inc	r13
	sar	rax, 8
	add	r13, rax

; 274  : 
; 275  :         if (ip <= ilimit) {

	jmp	SHORT $LN2532@ZSTD_compr
$LN2620@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]
$LN2624@ZSTD_compr:

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, DWORD PTR offset_1$1$[rsp]
$LN2532@ZSTD_compr:
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jb	$LL1037@ZSTD_compr

; 354  :     case 5 :
; 355  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 5, ZSTD_noDict);
; 356  :     case 6 :
; 357  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 6, ZSTD_noDict);

	mov	ecx, DWORD PTR tv11810[rsp]
	jmp	$LN2629@ZSTD_compr
$LN5@ZSTD_compr:

; 65   :     const U32 hBitsL = cParams->hashLog;

	mov	eax, DWORD PTR [rcx+192]

; 68   :     const BYTE* const base = ms->window.base;
; 69   :     const BYTE* const istart = (const BYTE*)src;
; 70   :     const BYTE* ip = istart;
; 71   :     const BYTE* anchor = istart;
; 72   :     const U32 endIndex = (U32)((size_t)(istart - base) + srcSize);

	sub	r10d, r9d
	add	r10d, r15d
	mov	DWORD PTR hBitsL$1$[rsp], eax
	mov	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR hashSmall$1$[rsp], rax
	mov	eax, DWORD PTR [rcx+188]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [rcx+184]
	shl	edx, cl
	mov	ecx, DWORD PTR [r8+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 67   :     const U32 hBitsS = cParams->chainLog;

	mov	DWORD PTR hBitsS$1$[rsp], eax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r10d

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r10d, edx
	sub	eax, ecx
	cmp	eax, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 77   :     const BYTE* const ilimit = iend - HASH_READ_SIZE;

	lea	rax, QWORD PTR [r14-8]
	mov	QWORD PTR ilimit$1$[rsp], rax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r10d, ecx
	cmp	DWORD PTR [r8+32], 0

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r10d, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 110  :     QueryPerformanceCounter(&time1);

	lea	rcx, OFFSET FLAT:?time1@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	mov	ebp, r10d
	add	rbp, r9
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	QWORD PTR srcSize$[rsp], r10
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 75   :     const BYTE* const prefixLowest = base + prefixLowestIndex;

	mov	QWORD PTR prefixLowest$1$[rsp], rbp

; 110  :     QueryPerformanceCounter(&time1);

	call	QWORD PTR __imp_QueryPerformanceCounter
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	r10, QWORD PTR ms$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 124  :     ip += (dictAndPrefixLength == 0);

	xor	r12d, r12d

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);

	mov	rdx, QWORD PTR base$1$[rsp]
	cmp	r15d, ebp
	mov	eax, r12d

; 129  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;

	mov	ebp, r12d
	sete	al
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 992  :     U32    const lowestValid = ms->window.dictLimit;

	mov	r8d, DWORD PTR [r10+24]
	mov	ecx, DWORD PTR [r10+184]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 124  :     ip += (dictAndPrefixLength == 0);

	lea	r13, QWORD PTR [rax+r15]

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);

	mov	r9d, r13d
	sub	r9d, edx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	edx, 1
	shl	edx, cl

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r9d
	sub	eax, r8d

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	ecx, r9d
	sub	ecx, edx
	cmp	eax, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	lea	rax, QWORD PTR [r14-8]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	ecx, r8d
	cmp	DWORD PTR [r10+32], r12d
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, r12d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	ecx, r8d
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 128  :         U32 const maxRep = current - windowLow;

	sub	r9d, ecx

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	ecx, esi
	cmp	edi, r9d
	cmovbe	ebp, edi
	cmovbe	edi, r12d
	cmp	esi, r9d
	cmovbe	ecx, edi
	cmovbe	r10d, esi
	mov	DWORD PTR tv11940[rsp], ecx
	cmp	r13, rax
	jae	$LN485@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	DWORD PTR offset_2$1$[rsp], ebp
	mov	DWORD PTR offset_1$1$[rsp], r10d
	npad	4
$LL484@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 143  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	call	ZSTD_hashPtr

; 144  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 5
	mov	rcx, r13
	mov	rsi, rax
	call	ZSTD_hashPtr

; 145  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 146  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 5
	mov	rcx, r13
	call	ZSTD_hashPtr

; 147  :         U32 const current = (U32)(ip-base);

	mov	rcx, QWORD PTR base$1$[rsp]
	mov	edx, r13d

; 148  :         U32 const matchIndexL = hashLong[h2];
; 149  :         U32 matchIndexS = hashSmall[h];

	mov	r10, QWORD PTR hashSmall$1$[rsp]
	sub	edx, ecx
	mov	r11, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR current$1$[rsp], edx
	mov	r9d, DWORD PTR [r10+rdi*4]
	mov	r8d, DWORD PTR [r11+rsi*4]

; 150  :         const BYTE* matchLong = base + matchIndexL;
; 151  :         const BYTE* match = base + matchIndexS;
; 152  :         const U32 repIndex = current + 1 - offset_1;
; 153  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState
; 154  :                             && repIndex < prefixLowestIndex) ?
; 155  :                                dictBase + (repIndex - dictIndexDelta) :
; 156  :                                base + repIndex;
; 157  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	DWORD PTR [r10+rdi*4], edx

; 158  : 
; 159  :         /* check dictMatchState repcode */
; 160  :         if (dictMode == ZSTD_dictMatchState
; 161  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 162  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {
; 163  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;
; 164  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;
; 165  :             ip++;
; 166  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 167  :             goto _match_stored;
; 168  :         }
; 169  : 
; 170  :         /* check noDict repcode */
; 171  :         if ( dictMode == ZSTD_noDict
; 172  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {

	mov	r10d, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR [r11+rsi*4], edx
	lea	rbp, QWORD PTR [rcx+r9]
	mov	eax, DWORD PTR [r13+1]
	lea	rsi, QWORD PTR [r13+1]
	lea	r14, QWORD PTR [rcx+r8]
	mov	QWORD PTR litLength$1$[rsp], rsi
	mov	ecx, r12d
	mov	rdx, r13
	sub	rdx, r10
	cmp	DWORD PTR [rdx+1], eax
	mov	eax, r12d
	sete	cl
	test	r10d, r10d
	setne	al
	test	ecx, eax
	je	$LN508@ZSTD_compr

; 173  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+5]
	mov	r8, rbp
	add	rdx, 5
	call	ZSTD_count
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
	add	rbp, -32				; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 174  :             ip++;

	mov	r13, rsi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 175  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	rsi, r15
	lea	rdi, QWORD PTR [rax+4]
	lea	r14, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rsi+r15]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN913@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN914@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	4
$LL927@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL927@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN914@ZSTD_compr
$LN913@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN914@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2581@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2581@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 176  :             goto _match_stored;

	jmp	$LN2638@ZSTD_compr
$LN508@ZSTD_compr:

; 177  :         }
; 178  : 
; 179  :         if (matchIndexL > prefixLowestIndex) {

	mov	rcx, QWORD PTR srcSize$[rsp]
	cmp	r8d, ecx
	jbe	SHORT $LN511@ZSTD_compr

; 180  :             /* check prefix long match */
; 181  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [r14], rax
	jne	SHORT $LN511@ZSTD_compr

; 182  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [r14+8]
	lea	rcx, QWORD PTR [r13+8]
	call	ZSTD_count

; 183  :                 offset = (U32)(ip-matchLong);
; 184  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, r14d
	cmp	r14, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	$_match_found$2650
	npad	1
$LL486@ZSTD_compr:
	movzx	eax, BYTE PTR [r14-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	r14
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2650
	inc	rdi
	mov	ecx, r12d
	cmp	r14, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL486@ZSTD_compr

; 185  :                 goto _match_found;

	jmp	$_match_found$2650
$LN511@ZSTD_compr:

; 186  :             }
; 187  :         } else if (dictMode == ZSTD_dictMatchState) {
; 188  :             /* check dictMatchState long match */
; 189  :             U32 const dictMatchIndexL = dictHashLong[dictHL];
; 190  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;
; 191  :             assert(dictMatchL < dictEnd);
; 192  : 
; 193  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {
; 194  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;
; 195  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);
; 196  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */
; 197  :                 goto _match_found;
; 198  :         }   }
; 199  : 
; 200  :         if (matchIndexS > prefixLowestIndex) {

	cmp	r9d, ecx
	jbe	$LN516@ZSTD_compr

; 201  :             /* check prefix short match */
; 202  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r13]
	cmp	DWORD PTR [rbp], eax
	jne	$LN516@ZSTD_compr
$_search_next_long$2651:

; 216  : #if defined(__aarch64__)
; 217  :         PREFETCH_L1(ip+256);
; 218  : #endif
; 219  :         continue;
; 220  : 
; 221  : _search_next_long:
; 222  : 
; 223  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	call	ZSTD_hashPtr

; 224  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	mov	rdi, rax
	call	ZSTD_hashPtr

; 225  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r8, QWORD PTR hashLong$1$[rsp]

; 226  :             const BYTE* matchL3 = base + matchIndexL3;
; 227  :             hashLong[hl3] = current + 1;

	mov	eax, DWORD PTR current$1$[rsp]
	mov	ecx, DWORD PTR [r8+rdi*4]
	mov	esi, ecx
	add	rsi, QWORD PTR base$1$[rsp]
	inc	eax
	mov	DWORD PTR [r8+rdi*4], eax

; 228  : 
; 229  :             /* check prefix long +1 match */
; 230  :             if (matchIndexL3 > prefixLowestIndex) {

	cmp	ecx, DWORD PTR srcSize$[rsp]
	jbe	$LN521@ZSTD_compr

; 231  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	r14, QWORD PTR litLength$1$[rsp]
	mov	rax, QWORD PTR [r14]
	cmp	QWORD PTR [rsi], rax
	jne	SHORT $LN521@ZSTD_compr

; 232  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r13+9]
	call	ZSTD_count

; 233  :                     ip++;
; 234  :                     offset = (U32)(ip-matchL3);
; 235  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r14d
	mov	r13, r14
	sub	r9d, esi
	cmp	rsi, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	r14, r15
	seta	al
	test	ecx, eax
	je	$_match_found$2650
	npad	7
$LL490@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2650
	inc	rdi
	mov	ecx, r12d
	cmp	rsi, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL490@ZSTD_compr

; 236  :                     goto _match_found;

	jmp	SHORT $_match_found$2650
$LN521@ZSTD_compr:

; 237  :                 }
; 238  :             } else if (dictMode == ZSTD_dictMatchState) {
; 239  :                 /* check dict long +1 match */
; 240  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];
; 241  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;
; 242  :                 assert(dictMatchL3 < dictEnd);
; 243  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {
; 244  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;
; 245  :                     ip++;
; 246  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);
; 247  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */
; 248  :                     goto _match_found;
; 249  :         }   }   }
; 250  : 
; 251  :         /* if no long +1 match, explore the short match we found */
; 252  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {
; 253  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;
; 254  :             offset = (U32)(current - matchIndexS);
; 255  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */
; 256  :         } else {
; 257  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+4]
	lea	rcx, QWORD PTR [r13+4]
	call	ZSTD_count

; 258  :             offset = (U32)(ip - match);
; 259  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, ebp
	cmp	rbp, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2650
	npad	3
$LL496@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2650
	inc	rdi
	mov	ecx, r12d
	cmp	rbp, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL496@ZSTD_compr
$_match_found$2650:

; 260  :         }
; 261  : 
; 262  :         /* fall-through */
; 263  : 
; 264  : _match_found:
; 265  :         offset_2 = offset_1;

	mov	ebp, DWORD PTR offset_1$1$[rsp]

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	r14, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r13
	sub	rsi, r15
	mov	DWORD PTR offset_2$1$[rsp], ebp
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
	add	rbp, -32				; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 266  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r9d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [r15+rsi]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN960@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN961@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	13
$LL974@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL974@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN961@ZSTD_compr
$LN960@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
	mov	r9d, DWORD PTR offset$1$[rsp]
$LN961@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2583@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2583@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r9+3]
	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], ecx
$LN2638@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 272  :         ip += mLength;

	mov	rcx, QWORD PTR [rbx+8]
	cmp	r14, 65535				; 0000ffffH
	jbe	SHORT $LN2584@ZSTD_compr
	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2584@ZSTD_compr:
	mov	WORD PTR [rcx+6], r14w
	add	QWORD PTR [rbx+8], 8
$_match_stored$2652:
	lea	r15, QWORD PTR [rdi+r13]
	mov	r13, r15

; 273  :         anchor = ip;

	cmp	r15, QWORD PTR ilimit$1$[rsp]

; 274  : 
; 275  :         if (ip <= ilimit) {

	ja	$LN2621@ZSTD_compr

; 276  :             /* Complementary insertion */
; 277  :             /* done after iLimit test, as candidates could be > iend-8 */
; 278  :             {   U32 const indexToInsert = current+2;

	mov	r14d, DWORD PTR current$1$[rsp]

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	rdi, QWORD PTR base$1$[rsp]
	add	r14d, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	ebp, r14d
	add	rbp, rdi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	esi, r15d

; 280  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	esi, edi
	mov	r8d, 8
	mov	DWORD PTR [rcx+rax*4], r14d
	lea	rcx, QWORD PTR [r15-2]
	lea	edi, DWORD PTR [rsi-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 281  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 5
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rbp, QWORD PTR hashSmall$1$[rsp]

; 282  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [r15-1]
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	lea	edi, DWORD PTR [rsi-1]
	mov	r8d, 5
	mov	DWORD PTR [rbp+rax*4], r14d
	call	ZSTD_hashPtr
	mov	r14, QWORD PTR litLimit_w$1$[rsp]
	mov	DWORD PTR [rbp+rax*4], edi
	mov	ebp, DWORD PTR offset_2$1$[rsp]
	npad	9
$LL500@ZSTD_compr:

; 283  :             }
; 284  : 
; 285  :             /* check immediate repcode */
; 286  :             if (dictMode == ZSTD_dictMatchState) {
; 287  :                 while (ip <= ilimit) {
; 288  :                     U32 const current2 = (U32)(ip-base);
; 289  :                     U32 const repIndex2 = current2 - offset_2;
; 290  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState
; 291  :                         && repIndex2 < prefixLowestIndex ?
; 292  :                             dictBase + repIndex2 - dictIndexDelta :
; 293  :                             base + repIndex2;
; 294  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 295  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {
; 296  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;
; 297  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;
; 298  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */
; 299  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);
; 300  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;
; 301  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;
; 302  :                         ip += repLength2;
; 303  :                         anchor = ip;
; 304  :                         continue;
; 305  :                     }
; 306  :                     break;
; 307  :             }   }
; 308  : 
; 309  :             if (dictMode == ZSTD_noDict) {
; 310  :                 while ( (ip <= ilimit)
; 311  :                      && ( (offset_2>0)

	mov	eax, ebp
	mov	ecx, r12d
	mov	rdx, r13
	sub	rdx, rax
	mov	eax, DWORD PTR [rdx]
	cmp	DWORD PTR [r13], eax
	mov	eax, r12d
	sete	cl
	test	ebp, ebp
	setne	al
	test	ecx, eax
	je	$LN2625@ZSTD_compr

; 312  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 313  :                     /* store sequence */
; 314  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+4]
	add	rdx, 4
	call	ZSTD_count

; 315  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 316  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	ecx, ebp
	mov	ebp, DWORD PTR offset_1$1$[rsp]
	mov	edi, r13d
	sub	edi, DWORD PTR base$1$[rsp]
	mov	r8d, 5
	mov	DWORD PTR offset_1$1$[rsp], ecx
	lea	rsi, QWORD PTR [rax+4]
	mov	rcx, r13
	mov	DWORD PTR offset_2$1$[rsp], ebp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 317  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r13
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi

; 318  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);

	lea	rdi, QWORD PTR [rsi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r15, r14
	ja	SHORT $LN1014@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN1015@ZSTD_compr
$LN1014@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, r14
	mov	r8, r15
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN1015@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [rbx+8]
	mov	WORD PTR [rax+4], r12w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbx+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdi, 65535				; 0000ffffH
	jbe	SHORT $LN2585@ZSTD_compr

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2585@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 319  :                     ip += rLength;

	add	r13, rsi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], di

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [rbx+8], 8
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 319  :                     ip += rLength;

	mov	r15, r13
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jbe	$LL500@ZSTD_compr

; 320  :                     anchor = ip;
; 321  :                     continue;   /* faster when present ... (?) */
; 322  :         }   }   }
; 323  :     }   /* while (ip < ilimit) */

	jmp	SHORT $LN2625@ZSTD_compr
$LN516@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]

; 203  :                 goto _search_next_long;
; 204  :             }
; 205  :         } else if (dictMode == ZSTD_dictMatchState) {
; 206  :             /* check dictMatchState short match */
; 207  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];
; 208  :             match = dictBase + dictMatchIndexS;
; 209  :             matchIndexS = dictMatchIndexS + dictIndexDelta;
; 210  : 
; 211  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {
; 212  :                 goto _search_next_long;
; 213  :         }   }
; 214  : 
; 215  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, r13
	sub	rax, r15
	inc	r13
	sar	rax, 8
	add	r13, rax

; 274  : 
; 275  :         if (ip <= ilimit) {

	jmp	SHORT $LN2537@ZSTD_compr
$LN2621@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]
$LN2625@ZSTD_compr:

; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, DWORD PTR offset_1$1$[rsp]
$LN2537@ZSTD_compr:
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jb	$LL484@ZSTD_compr
	mov	ecx, DWORD PTR tv11940[rsp]
$LN2629@ZSTD_compr:

; 360  :     }
; 361  : }

	mov	r14, QWORD PTR iend$1$[rsp]
$LN485@ZSTD_compr:
	mov	rdx, QWORD PTR rep$[rsp]
	mov	eax, ecx
	test	r10d, r10d
	cmovne	eax, r10d
	test	ebp, ebp
	mov	DWORD PTR [rdx], eax
	cmovne	ecx, ebp
	mov	DWORD PTR [rdx+4], ecx
	lea	rcx, OFFSET FLAT:?time2@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	call	QWORD PTR __imp_QueryPerformanceCounter
	mov	rdx, QWORD PTR ?time2@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	lea	rcx, OFFSET FLAT:$SG4294965530
	sub	rdx, QWORD PTR ?time1@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	call	printf
	mov	rbx, QWORD PTR [rsp+200]
	sub	r14, r15
	mov	rax, r14
	add	rsp, 128				; 00000080H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ZSTD_compressBlock_doubleFast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
_TEXT	SEGMENT
iend$1$ = 48
hBitsL$1$ = 56
hBitsL$1$ = 56
hBitsL$1$ = 56
hBitsL$1$ = 56
hBitsS$1$ = 60
hBitsS$1$ = 60
hBitsS$1$ = 60
matchIndexS$1$ = 60
base$1$ = 64
base$1$ = 64
base$1$ = 64
base$1$ = 64
prefixLowest$1$ = 72
prefixLowest$1$ = 72
prefixLowest$1$ = 72
prefixLowest$1$ = 72
matchIndexS$1$ = 80
matchIndexS$1$ = 80
matchIndexS$1$ = 80
hBitsS$1$ = 80
offset_2$1$ = 88
offset_1$1$ = 88
offset_2$1$ = 88
offset_1$1$ = 88
tv11979 = 88
offset_1$1$ = 96
offset_2$1$ = 96
offset_1$1$ = 96
dictIndexDelta$1$ = 96
tv11981 = 96
dictIndexDelta$1$ = 104
dictIndexDelta$1$ = 104
dictIndexDelta$1$ = 104
offset_2$1$ = 104
tv11975 = 104
dictStart$1$ = 112
dictEnd$1$ = 112
dictEnd$1$ = 112
dictStart$1$ = 112
dictEnd$1$ = 120
dictStart$1$ = 120
dictStart$1$ = 120
dictBase$1$ = 120
dictHBitsL$1$ = 128
dictHBitsL$1$ = 128
dictHBitsL$1$ = 128
dictHBitsL$1$ = 128
dictBase$1$ = 136
dictBase$1$ = 136
dictBase$1$ = 136
dictEnd$1$ = 136
hashLong$1$ = 144
litLimit_w$1$ = 152
dictMatchIndexL3$1$ = 152
dictMatchIndexL$1$ = 152
litLimit_w$1$ = 152
dictMatchIndexL3$1$ = 152
dictMatchIndexL$1$ = 152
dictMatchIndexL3$1$ = 152
dictMatchIndexL$1$ = 152
dictHBitsS$1$ = 152
hashSmall$1$ = 160
hashSmall$1$ = 160
hashSmall$1$ = 160
hashSmall$1$ = 160
dictHashLong$1$ = 168
dictHashLong$1$ = 168
dictHL$1$ = 168
dictHashLong$1$ = 168
tv11994 = 168
dictHBitsS$1$ = 176
dictHBitsS$1$ = 176
dictHBitsS$1$ = 176
dictMatchIndexL3$1$ = 176
dictMatchIndexL$1$ = 176
dictHL$1$ = 176
dictHL$1$ = 184
dictHashSmall$1$ = 184
dictHashLong$1$ = 184
dictHashSmall$1$ = 184
dictHashSmall$1$ = 192
dictHL$1$ = 192
dictHashSmall$1$ = 192
current$1$ = 272
current$1$ = 272
current$1$ = 272
current$1$ = 272
ms$ = 272
seqStore$ = 280
rep$ = 288
src$ = 296
srcSize$ = 304
ZSTD_compressBlock_doubleFast_dictMatchState PROC

; 367  : {

$LN2691:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], r8
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 208				; 000000d0H

; 368  :     const U32 mls = ms->cParams.minMatch;
; 369  :     switch(mls)

	mov	rax, QWORD PTR [rcx+48]
	mov	rbx, r9
	mov	r10, QWORD PTR srcSize$[rsp]
	mov	r14, rdx
	mov	QWORD PTR hashLong$1$[rsp], rax
	mov	rsi, r8
	mov	eax, DWORD PTR [rcx+200]
	mov	r9, rcx
	mov	edx, 1
	lea	r11, QWORD PTR [rbx+r10]
	mov	QWORD PTR iend$1$[rsp], r11
	sub	eax, 5
	je	$LN5@ZSTD_compr
	sub	eax, edx
	je	$LN6@ZSTD_compr
	cmp	eax, edx
	mov	eax, DWORD PTR [rcx+192]
	mov	DWORD PTR hBitsL$1$[rsp], eax
	mov	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR hashSmall$1$[rsp], rax
	mov	eax, DWORD PTR [rcx+188]
	je	$LN7@ZSTD_compr

; 68   :     const BYTE* const base = ms->window.base;

	mov	rbp, QWORD PTR [rcx+8]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [rcx+184]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 72   :     const U32 endIndex = (U32)((size_t)(istart - base) + srcSize);

	sub	r10d, ebp

; 78   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	r13d, DWORD PTR [r8+4]
	add	r10d, ebx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	shl	edx, cl
	mov	ecx, DWORD PTR [r9+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 67   :     const U32 hBitsS = cParams->chainLog;

	mov	DWORD PTR hBitsS$1$[rsp], eax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r10d
	sub	eax, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 68   :     const BYTE* const base = ms->window.base;

	mov	QWORD PTR base$1$[rsp], rbp
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r10d, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 78   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	DWORD PTR offset_2$1$[rsp], r13d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmp	eax, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 78   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	eax, DWORD PTR [r8]
	mov	DWORD PTR offset_1$1$[rsp], eax

; 79   :     U32 offsetSaved = 0;
; 80   : 
; 81   :     const ZSTD_matchState_t* const dms = ms->dictMatchState;

	mov	rax, QWORD PTR [r9+176]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r10d, ecx
	cmp	DWORD PTR [r9+32], 0

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r10d, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 85   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?

	mov	rcx, QWORD PTR [rax+48]

; 94   :                                      dictBase + dictStartIndex : NULL;
; 95   :     const BYTE* const dictEnd      = dictMode == ZSTD_dictMatchState ?

	mov	r15, QWORD PTR [rax]
	mov	esi, DWORD PTR [rax+24]
	mov	QWORD PTR dictHashLong$1$[rsp], rcx
	mov	rcx, QWORD PTR [rax+64]
	mov	QWORD PTR dictHashSmall$1$[rsp], rcx
	mov	rcx, QWORD PTR [rax+8]
	add	rsi, rcx
	mov	QWORD PTR dictBase$1$[rsp], rcx

; 97   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	sub	ecx, r15d
	mov	edi, r10d
	add	ecx, r10d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	QWORD PTR srcSize$[rsp], r10
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 97   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	mov	DWORD PTR dictIndexDelta$1$[rsp], ecx
	add	rdi, rbp

; 98   :                                      prefixLowestIndex - (U32)(dictEnd - dictBase) :
; 99   :                                      0;
; 100  :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?

	mov	ecx, DWORD PTR [rax+192]

; 101  :                                      dictCParams->hashLog : hBitsL;
; 102  :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?

	mov	eax, DWORD PTR [rax+188]
	mov	DWORD PTR dictHBitsL$1$[rsp], ecx

; 103  :                                      dictCParams->chainLog : hBitsS;
; 104  :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 105  : 
; 106  :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 107  : 
; 108  : #ifdef _MSC_VER
; 109  :     static LARGE_INTEGER time1;
; 110  :     QueryPerformanceCounter(&time1);

	lea	rcx, OFFSET FLAT:?time1@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	mov	QWORD PTR prefixLowest$1$[rsp], rdi
	mov	QWORD PTR dictStart$1$[rsp], rsi
	mov	QWORD PTR dictEnd$1$[rsp], r15
	mov	DWORD PTR dictHBitsS$1$[rsp], eax
	call	QWORD PTR __imp_QueryPerformanceCounter

; 111  : #else
; 112  :     static struct timespec time1;
; 113  : 	clock_gettime(CLOCK_MONOTONIC, &time1);
; 114  : #endif
; 115  : 
; 116  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 117  : 
; 118  :     /* if a dictionary is attached, it must be within window range */
; 119  :     if (dictMode == ZSTD_dictMatchState) {
; 120  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 121  :     }
; 122  : 
; 123  :     /* init */
; 124  :     ip += (dictAndPrefixLength == 0);

	mov	eax, r15d
	mov	r15d, 0
	sub	eax, edi
	sub	eax, esi
	add	eax, ebx
	mov	eax, r15d
	sete	al
	lea	r12, QWORD PTR [rax+rbx]
	mov	rax, QWORD PTR iend$1$[rsp]
	add	rax, -8
	cmp	r12, rax

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);
; 127  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 128  :         U32 const maxRep = current - windowLow;
; 129  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 131  :     }
; 132  :     if (dictMode == ZSTD_dictMatchState) {
; 133  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 134  :          * disabling. */
; 135  :         assert(offset_1 <= dictAndPrefixLength);
; 136  :         assert(offset_2 <= dictAndPrefixLength);
; 137  :     }
; 138  : 
; 139  :     /* Main Search Loop */
; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	jae	$LN11@ZSTD_compr
	npad	8
$LL10@ZSTD_compr:

; 141  :         size_t mLength;
; 142  :         U32 offset;
; 143  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r12
	call	ZSTD_hashPtr

; 144  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 4
	mov	rcx, r12
	mov	rsi, rax
	call	ZSTD_hashPtr

; 145  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r12
	mov	rdi, rax
	call	ZSTD_hashPtr

; 146  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR dictHBitsS$1$[rsp]
	mov	r8d, 4
	mov	rcx, r12
	mov	QWORD PTR dictHL$1$[rsp], rax
	call	ZSTD_hashPtr

; 147  :         U32 const current = (U32)(ip-base);
; 148  :         U32 const matchIndexL = hashLong[h2];

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	r11, rax
	mov	r10d, DWORD PTR [rcx+rsi*4]
	lea	r9, QWORD PTR [rcx+rsi*4]

; 149  :         U32 matchIndexS = hashSmall[h];

	mov	rcx, QWORD PTR hashSmall$1$[rsp]
	mov	eax, r12d
	sub	eax, ebp

; 150  :         const BYTE* matchLong = base + matchIndexL;

	add	rbp, r10
	mov	DWORD PTR current$1$[rsp], eax
	mov	r8d, DWORD PTR [rcx+rdi*4]

; 151  :         const BYTE* match = base + matchIndexS;
; 152  :         const U32 repIndex = current + 1 - offset_1;

	mov	ecx, eax
	sub	ecx, DWORD PTR offset_1$1$[rsp]
	mov	esi, r8d
	add	rsi, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR matchIndexS$1$[rsp], r8d

; 153  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState

	cmp	ecx, DWORD PTR srcSize$[rsp]
	jae	SHORT $LN77@ZSTD_compr
	mov	edx, ecx
	sub	edx, DWORD PTR dictIndexDelta$1$[rsp]
	add	rdx, QWORD PTR dictBase$1$[rsp]
	jmp	SHORT $LN78@ZSTD_compr
$LN77@ZSTD_compr:
	mov	edx, ecx
	add	rdx, QWORD PTR base$1$[rsp]
$LN78@ZSTD_compr:

; 154  :                             && repIndex < prefixLowestIndex) ?
; 155  :                                dictBase + (repIndex - dictIndexDelta) :
; 156  :                                base + repIndex;
; 157  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	r13, QWORD PTR hashSmall$1$[rsp]
	mov	DWORD PTR [r13+rdi*4], eax

; 158  : 
; 159  :         /* check dictMatchState repcode */
; 160  :         if (dictMode == ZSTD_dictMatchState
; 161  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 162  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	rdi, QWORD PTR srcSize$[rsp]
	mov	r13, QWORD PTR dictHL$1$[rsp]
	mov	DWORD PTR [r9], eax
	mov	eax, edi
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN33@ZSTD_compr
	mov	eax, DWORD PTR [r12+1]
	lea	r13, QWORD PTR [r12+1]
	cmp	DWORD PTR [rdx], eax
	jne	$LN2670@ZSTD_compr

; 163  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	mov	rbp, QWORD PTR iend$1$[rsp]
	cmp	ecx, edi

; 164  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [r12+5]
	mov	r9, rbp
	mov	QWORD PTR [rsp+32], rax
	cmovb	r9, QWORD PTR dictEnd$1$[rsp]
	mov	r8, rbp
	add	rdx, 4
	call	ZSTD_count_2segments
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
	lea	r9, QWORD PTR [rbp-32]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 165  :             ip++;

	mov	r12, r13

; 166  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	r13, rbx
	lea	rdi, QWORD PTR [rax+4]
	lea	rsi, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rbx+r13]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, r9
	ja	SHORT $LN333@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r13, 16
	jbe	SHORT $LN334@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r13
	npad	7
$LL347@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL347@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN334@ZSTD_compr
$LN333@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN334@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], r13
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r13, 65535				; 0000ffffH
	jbe	SHORT $LN2602@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2602@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r13w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2603@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2603@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], si
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 167  :             goto _match_stored;

	jmp	$LN2682@ZSTD_compr
$LN2670@ZSTD_compr:

; 158  : 
; 159  :         /* check dictMatchState repcode */
; 160  :         if (dictMode == ZSTD_dictMatchState
; 161  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 162  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	r13, QWORD PTR dictHL$1$[rsp]
$LN33@ZSTD_compr:

; 168  :         }
; 169  : 
; 170  :         /* check noDict repcode */
; 171  :         if ( dictMode == ZSTD_noDict
; 172  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {
; 173  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;
; 174  :             ip++;
; 175  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 176  :             goto _match_stored;
; 177  :         }
; 178  : 
; 179  :         if (matchIndexL > prefixLowestIndex) {

	cmp	r10d, edi
	jbe	$LN35@ZSTD_compr

; 180  :             /* check prefix long match */
; 181  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN2678@ZSTD_compr

; 182  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+8]
	call	ZSTD_count

; 183  :                 offset = (U32)(ip-matchLong);
; 184  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, ebp
	cmp	rbp, r10
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2692
	npad	6
$LL12@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2692
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r10
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL12@ZSTD_compr

; 185  :                 goto _match_found;

	jmp	$_match_found$2692
$LN35@ZSTD_compr:

; 186  :             }
; 187  :         } else if (dictMode == ZSTD_dictMatchState) {
; 188  :             /* check dictMatchState long match */
; 189  :             U32 const dictMatchIndexL = dictHashLong[dictHL];

	mov	rax, QWORD PTR dictHashLong$1$[rsp]

; 190  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;

	mov	r9, QWORD PTR dictBase$1$[rsp]

; 191  :             assert(dictMatchL < dictEnd);
; 192  : 
; 193  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {

	mov	rdx, QWORD PTR dictStart$1$[rsp]
	mov	eax, DWORD PTR [rax+r13*4]
	mov	DWORD PTR dictMatchIndexL$1$[rsp], eax
	lea	rbp, QWORD PTR [r9+rax]
	cmp	rbp, rdx
	jbe	$LN39@ZSTD_compr
	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN39@ZSTD_compr

; 194  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	lea	rcx, QWORD PTR [r12+8]
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 195  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	sub	r13d, DWORD PTR dictMatchIndexL$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]
	lea	rdi, QWORD PTR [rax+8]

; 196  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */

	cmp	r12, rbx
	jbe	$_match_found$2692
	mov	r8, QWORD PTR dictStart$1$[rsp]
	npad	7
$LL14@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2692
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r8
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL14@ZSTD_compr

; 197  :                 goto _match_found;

	jmp	$_match_found$2692
$LN2678@ZSTD_compr:

; 180  :             /* check prefix long match */
; 181  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rdx, QWORD PTR dictStart$1$[rsp]
	mov	r9, QWORD PTR dictBase$1$[rsp]
$LN39@ZSTD_compr:

; 198  :         }   }
; 199  : 
; 200  :         if (matchIndexS > prefixLowestIndex) {

	cmp	r8d, edi
	jbe	SHORT $LN40@ZSTD_compr

; 201  :             /* check prefix short match */
; 202  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	je	SHORT $_search_next_long$2693
$LN44@ZSTD_compr:

; 212  :                 goto _search_next_long;
; 213  :         }   }
; 214  : 
; 215  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, r12
	inc	r12
	sub	rax, rbx
	sar	rax, 8
	add	r12, rax
$LN2674@ZSTD_compr:

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);
; 127  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 128  :         U32 const maxRep = current - windowLow;
; 129  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 131  :     }
; 132  :     if (dictMode == ZSTD_dictMatchState) {
; 133  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 134  :          * disabling. */
; 135  :         assert(offset_1 <= dictAndPrefixLength);
; 136  :         assert(offset_2 <= dictAndPrefixLength);
; 137  :     }
; 138  : 
; 139  :     /* Main Search Loop */
; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r13d, DWORD PTR offset_2$1$[rsp]
$LN2683@ZSTD_compr:
	mov	rbp, QWORD PTR base$1$[rsp]
$LN2537@ZSTD_compr:
	mov	rax, QWORD PTR iend$1$[rsp]
	add	rax, -8
	cmp	r12, rax
	jb	$LL10@ZSTD_compr
$LN11@ZSTD_compr:

; 324  : 
; 325  :     /* save reps for next block */
; 326  :     rep[0] = offset_1 ? offset_1 : offsetSaved;

	mov	eax, DWORD PTR offset_1$1$[rsp]

; 370  :     {
; 371  :     default: /* includes case 3 */
; 372  :     case 4 :
; 373  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 4, ZSTD_dictMatchState);

	jmp	$LN2684@ZSTD_compr
$LN40@ZSTD_compr:

; 207  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];

	mov	rax, QWORD PTR dictHashSmall$1$[rsp]
	mov	ecx, DWORD PTR [rax+r11*4]

; 208  :             match = dictBase + dictMatchIndexS;
; 209  :             matchIndexS = dictMatchIndexS + dictIndexDelta;

	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	add	eax, ecx
	mov	DWORD PTR matchIndexS$1$[rsp], eax
	lea	rsi, QWORD PTR [r9+rcx]

; 210  : 
; 211  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {

	cmp	rsi, rdx
	jbe	SHORT $LN44@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	jne	SHORT $LN44@ZSTD_compr
$_search_next_long$2693:

; 216  : #if defined(__aarch64__)
; 217  :         PREFETCH_L1(ip+256);
; 218  : #endif
; 219  :         continue;
; 220  : 
; 221  : _search_next_long:
; 222  : 
; 223  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	lea	r13, QWORD PTR [r12+1]
	mov	rcx, r13
	mov	QWORD PTR tv11975[rsp], r13
	mov	r8d, 8
	call	ZSTD_hashPtr

; 224  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 225  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r9, QWORD PTR hashLong$1$[rsp]

; 226  :             const BYTE* matchL3 = base + matchIndexL3;
; 227  :             hashLong[hl3] = current + 1;

	mov	ecx, DWORD PTR current$1$[rsp]
	mov	edx, DWORD PTR [r9+rdi*4]
	mov	ebp, edx
	add	rbp, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR [r9+rdi*4], ecx

; 228  : 
; 229  :             /* check prefix long +1 match */
; 230  :             if (matchIndexL3 > prefixLowestIndex) {

	mov	r9, QWORD PTR srcSize$[rsp]
	cmp	edx, r9d
	jbe	$LN45@ZSTD_compr

; 231  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN49@ZSTD_compr

; 232  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+9]
	call	ZSTD_count

; 233  :                     ip++;
; 234  :                     offset = (U32)(ip-matchL3);
; 235  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	r12, r13
	sub	r13d, ebp
	mov	ecx, r15d
	cmp	rbp, r10
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2692
	npad	9
$LL16@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2692
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r10
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL16@ZSTD_compr

; 236  :                     goto _match_found;

	jmp	$_match_found$2692
$LN45@ZSTD_compr:

; 237  :                 }
; 238  :             } else if (dictMode == ZSTD_dictMatchState) {
; 239  :                 /* check dict long +1 match */
; 240  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];

	mov	rcx, QWORD PTR dictHashLong$1$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]

; 241  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;

	mov	ebp, eax
	mov	DWORD PTR dictMatchIndexL3$1$[rsp], eax
	add	rbp, QWORD PTR dictBase$1$[rsp]

; 242  :                 assert(dictMatchL3 < dictEnd);
; 243  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {

	cmp	rbp, QWORD PTR dictStart$1$[rsp]
	jbe	$LN49@ZSTD_compr
	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN49@ZSTD_compr

; 244  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	lea	rcx, QWORD PTR [r12+9]
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 245  :                     ip++;

	mov	r12, r13

; 246  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	sub	r13d, DWORD PTR dictMatchIndexL3$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]
	inc	r13d
	lea	rdi, QWORD PTR [rax+8]

; 247  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */

	cmp	QWORD PTR tv11975[rsp], rbx
	jbe	$_match_found$2692
	npad	10
$LL18@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2692
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, QWORD PTR dictStart$1$[rsp]
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL18@ZSTD_compr

; 248  :                     goto _match_found;

	jmp	$_match_found$2692
$LN49@ZSTD_compr:

; 249  :         }   }   }
; 250  : 
; 251  :         /* if no long +1 match, explore the short match we found */
; 252  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {

	lea	rdx, QWORD PTR [rsi+4]
	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	cmp	DWORD PTR matchIndexS$1$[rsp], r9d
	jae	$LN50@ZSTD_compr

; 253  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 254  :             offset = (U32)(current - matchIndexS);

	mov	r13d, DWORD PTR current$1$[rsp]

; 255  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	ecx, r15d
	sub	r13d, DWORD PTR matchIndexS$1$[rsp]
	mov	r8, QWORD PTR dictStart$1$[rsp]
	cmp	rsi, r8
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2692
	npad	9
$LL20@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2692
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r8
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL20@ZSTD_compr

; 256  :         } else {

	jmp	SHORT $_match_found$2692
$LN50@ZSTD_compr:

; 257  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	call	ZSTD_count

; 258  :             offset = (U32)(ip - match);
; 259  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, esi
	cmp	rsi, r10
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2692
	npad	8
$LL22@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2692
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r10
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL22@ZSTD_compr
$_match_found$2692:

; 265  :         offset_2 = offset_1;

	mov	eax, DWORD PTR offset_1$1$[rsp]

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	rbp, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	r9, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r12
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	sub	rsi, rbx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	r9, -32					; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 265  :         offset_2 = offset_1;

	mov	DWORD PTR offset_2$1$[rsp], eax

; 266  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r13d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rsi+rbx]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, r9
	ja	SHORT $LN407@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN408@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	8
$LL421@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL421@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN408@ZSTD_compr
$LN407@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN408@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], rsi
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2604@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2604@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r13+3]
	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rbp, 65535				; 0000ffffH
	jbe	SHORT $LN2605@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2605@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], bp
$LN2682@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 272  :         ip += mLength;

	add	QWORD PTR [r14+8], 8
$_match_stored$2694:

; 273  :         anchor = ip;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rbx, QWORD PTR [rdi+r12]
	add	rbp, -8
	mov	r12, rbx
	cmp	rbx, rbp

; 274  : 
; 275  :         if (ip <= ilimit) {

	ja	$LN2674@ZSTD_compr

; 276  :             /* Complementary insertion */
; 277  :             /* done after iLimit test, as candidates could be > iend-8 */
; 278  :             {   U32 const indexToInsert = current+2;

	mov	ebp, DWORD PTR current$1$[rsp]

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	r13, QWORD PTR base$1$[rsp]
	add	ebp, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	esi, ebp
	add	rsi, r13
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 280  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edi, ebx
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	edi, r13d
	mov	r8d, 8
	sub	edi, 2
	mov	DWORD PTR [rcx+rax*4], ebp
	lea	rcx, QWORD PTR [rbx-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 281  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 4
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	rsi, QWORD PTR hashSmall$1$[rsp]

; 282  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [rbx-1]
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	edi, ebx
	mov	r8d, 4
	mov	DWORD PTR [rsi+rax*4], ebp
	mov	rbp, r13
	sub	edi, ebp
	dec	edi
	call	ZSTD_hashPtr
	mov	r13d, DWORD PTR offset_2$1$[rsp]
	mov	DWORD PTR [rsi+rax*4], edi
	npad	1
$LL24@ZSTD_compr:

; 290  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState

	mov	r8, QWORD PTR srcSize$[rsp]
	mov	edi, r12d
	sub	edi, ebp
	mov	ecx, edi
	sub	ecx, r13d
	mov	edx, ecx
	cmp	ecx, r8d
	jae	SHORT $LN79@ZSTD_compr
	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	sub	rdx, rax
	add	rdx, QWORD PTR dictBase$1$[rsp]
	jmp	SHORT $LN80@ZSTD_compr
$LN79@ZSTD_compr:
	add	rdx, rbp
$LN80@ZSTD_compr:

; 291  :                         && repIndex2 < prefixLowestIndex ?
; 292  :                             dictBase + repIndex2 - dictIndexDelta :
; 293  :                             base + repIndex2;
; 294  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 295  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {

	mov	eax, r8d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN2537@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rdx], eax
	jne	$LN2537@ZSTD_compr

; 297  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	cmp	ecx, r8d
	mov	r9, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	cmovb	r9, QWORD PTR dictEnd$1$[rsp]
	add	rdx, 4
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 298  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	ecx, r13d
	mov	r13d, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR offset_1$1$[rsp], ecx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 297  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	lea	rsi, QWORD PTR [rax+4]

; 298  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	DWORD PTR offset_2$1$[rsp], r13d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	mov	rax, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 299  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);

	lea	rbp, QWORD PTR [rsi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	add	rax, -32				; ffffffffffffffe0H
	cmp	rbx, rax
	ja	SHORT $LN434@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN435@ZSTD_compr
$LN434@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rax
	mov	r8, rbx
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN435@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [r14+8]
	mov	WORD PTR [rax+4], r15w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rbp, 65535				; 0000ffffH
	jbe	SHORT $LN2662@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, QWORD PTR [r14+8]
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
	mov	DWORD PTR [r14+72], 2
$LN2662@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	rax, QWORD PTR [r14+8]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 300  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	r8d, 4
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	rcx, r12
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rax+6], bp

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [r14+8], 8
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 300  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 301  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r12
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 302  :                         ip += repLength2;

	add	r12, rsi
	mov	rbp, QWORD PTR iend$1$[rsp]
	mov	rbx, r12
	add	rbp, -8
	cmp	r12, rbp
	mov	rbp, QWORD PTR base$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	jbe	$LL24@ZSTD_compr

; 303  :                         anchor = ip;
; 304  :                         continue;
; 305  :                     }
; 306  :                     break;
; 307  :             }   }
; 308  : 
; 309  :             if (dictMode == ZSTD_noDict) {
; 310  :                 while ( (ip <= ilimit)
; 311  :                      && ( (offset_2>0)
; 312  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 313  :                     /* store sequence */
; 314  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;
; 315  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 316  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);
; 317  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);
; 318  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);
; 319  :                     ip += rLength;
; 320  :                     anchor = ip;
; 321  :                     continue;   /* faster when present ... (?) */
; 322  :         }   }   }
; 323  :     }   /* while (ip < ilimit) */

	jmp	$LN2683@ZSTD_compr
$LN7@ZSTD_compr:

; 68   :     const BYTE* const base = ms->window.base;

	mov	r8, QWORD PTR [rcx+8]

; 76   :     const BYTE* const iend = istart + srcSize;
; 77   :     const BYTE* const ilimit = iend - HASH_READ_SIZE;

	lea	r13, QWORD PTR [r11-8]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [rcx+184]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 72   :     const U32 endIndex = (U32)((size_t)(istart - base) + srcSize);

	sub	r10d, r8d

; 78   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	ebp, DWORD PTR [rsi+4]
	add	r10d, ebx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	shl	edx, cl
	mov	ecx, DWORD PTR [r9+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 67   :     const U32 hBitsS = cParams->chainLog;

	mov	DWORD PTR hBitsS$1$[rsp], eax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r10d
	sub	eax, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 68   :     const BYTE* const base = ms->window.base;

	mov	QWORD PTR base$1$[rsp], r8
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r10d, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 78   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	DWORD PTR offset_2$1$[rsp], ebp
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmp	eax, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 78   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	eax, DWORD PTR [rsi]
	mov	DWORD PTR offset_1$1$[rsp], eax

; 79   :     U32 offsetSaved = 0;
; 80   : 
; 81   :     const ZSTD_matchState_t* const dms = ms->dictMatchState;

	mov	rax, QWORD PTR [r9+176]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r10d, ecx
	cmp	DWORD PTR [r9+32], 0

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r10d, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 85   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?

	mov	rcx, QWORD PTR [rax+48]

; 94   :                                      dictBase + dictStartIndex : NULL;
; 95   :     const BYTE* const dictEnd      = dictMode == ZSTD_dictMatchState ?

	mov	r15, QWORD PTR [rax]
	mov	esi, DWORD PTR [rax+24]
	mov	QWORD PTR dictHashLong$1$[rsp], rcx
	mov	rcx, QWORD PTR [rax+64]
	mov	QWORD PTR dictHashSmall$1$[rsp], rcx
	mov	rcx, QWORD PTR [rax+8]
	add	rsi, rcx
	mov	QWORD PTR dictBase$1$[rsp], rcx

; 97   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	sub	ecx, r15d
	mov	edi, r10d
	add	ecx, r10d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	QWORD PTR srcSize$[rsp], r10
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 97   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	mov	DWORD PTR dictIndexDelta$1$[rsp], ecx
	add	rdi, r8

; 98   :                                      prefixLowestIndex - (U32)(dictEnd - dictBase) :
; 99   :                                      0;
; 100  :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?

	mov	ecx, DWORD PTR [rax+192]

; 101  :                                      dictCParams->hashLog : hBitsL;
; 102  :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?

	mov	eax, DWORD PTR [rax+188]
	mov	DWORD PTR dictHBitsL$1$[rsp], ecx

; 103  :                                      dictCParams->chainLog : hBitsS;
; 104  :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 105  : 
; 106  :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 107  : 
; 108  : #ifdef _MSC_VER
; 109  :     static LARGE_INTEGER time1;
; 110  :     QueryPerformanceCounter(&time1);

	lea	rcx, OFFSET FLAT:?time1@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	mov	QWORD PTR prefixLowest$1$[rsp], rdi
	mov	QWORD PTR dictStart$1$[rsp], rsi
	mov	QWORD PTR dictEnd$1$[rsp], r15
	mov	DWORD PTR dictHBitsS$1$[rsp], eax
	call	QWORD PTR __imp_QueryPerformanceCounter

; 111  : #else
; 112  :     static struct timespec time1;
; 113  : 	clock_gettime(CLOCK_MONOTONIC, &time1);
; 114  : #endif
; 115  : 
; 116  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 117  : 
; 118  :     /* if a dictionary is attached, it must be within window range */
; 119  :     if (dictMode == ZSTD_dictMatchState) {
; 120  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 121  :     }
; 122  : 
; 123  :     /* init */
; 124  :     ip += (dictAndPrefixLength == 0);

	mov	eax, ebx
	sub	eax, edi
	sub	eax, esi
	add	eax, r15d
	mov	r15d, 0
	mov	eax, r15d
	sete	al
	lea	r12, QWORD PTR [rax+rbx]
	cmp	r12, r13

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);
; 127  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 128  :         U32 const maxRep = current - windowLow;
; 129  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 131  :     }
; 132  :     if (dictMode == ZSTD_dictMatchState) {
; 133  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 134  :          * disabling. */
; 135  :         assert(offset_1 <= dictAndPrefixLength);
; 136  :         assert(offset_2 <= dictAndPrefixLength);
; 137  :     }
; 138  : 
; 139  :     /* Main Search Loop */
; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	jae	$LN1680@ZSTD_compr
	npad	4
$LL1679@ZSTD_compr:

; 141  :         size_t mLength;
; 142  :         U32 offset;
; 143  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r12
	call	ZSTD_hashPtr

; 144  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 7
	mov	rcx, r12
	mov	rsi, rax
	call	ZSTD_hashPtr

; 145  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r12
	mov	rdi, rax
	call	ZSTD_hashPtr

; 146  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR dictHBitsS$1$[rsp]
	mov	r8d, 7
	mov	rcx, r12
	mov	QWORD PTR dictHL$1$[rsp], rax
	mov	r13, rax
	call	ZSTD_hashPtr

; 147  :         U32 const current = (U32)(ip-base);
; 148  :         U32 const matchIndexL = hashLong[h2];

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	r11, rax
	mov	r10d, DWORD PTR [rcx+rsi*4]
	lea	r8, QWORD PTR [rcx+rsi*4]

; 149  :         U32 matchIndexS = hashSmall[h];

	mov	rcx, QWORD PTR hashSmall$1$[rsp]
	mov	eax, r12d
	sub	eax, DWORD PTR base$1$[rsp]
	lea	r9, QWORD PTR [rcx+rdi*4]
	mov	edx, DWORD PTR [r9]

; 151  :         const BYTE* match = base + matchIndexS;
; 152  :         const U32 repIndex = current + 1 - offset_1;

	mov	ecx, eax
	sub	ecx, DWORD PTR offset_1$1$[rsp]
	mov	esi, edx
	add	rsi, QWORD PTR base$1$[rsp]
	mov	ebp, r10d
	add	rbp, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR current$1$[rsp], eax
	mov	DWORD PTR matchIndexS$1$[rsp], edx

; 153  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState

	cmp	ecx, DWORD PTR srcSize$[rsp]
	jae	SHORT $LN1746@ZSTD_compr
	mov	edi, ecx
	sub	edi, DWORD PTR dictIndexDelta$1$[rsp]
	add	rdi, QWORD PTR dictBase$1$[rsp]
	jmp	SHORT $LN1747@ZSTD_compr
$LN1746@ZSTD_compr:
	mov	edi, ecx
	add	rdi, QWORD PTR base$1$[rsp]
$LN1747@ZSTD_compr:

; 154  :                             && repIndex < prefixLowestIndex) ?
; 155  :                                dictBase + (repIndex - dictIndexDelta) :
; 156  :                                base + repIndex;
; 157  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	DWORD PTR [r9], eax
	mov	DWORD PTR [r8], eax

; 158  : 
; 159  :         /* check dictMatchState repcode */
; 160  :         if (dictMode == ZSTD_dictMatchState
; 161  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 162  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	r8, QWORD PTR srcSize$[rsp]
	mov	eax, r8d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN1702@ZSTD_compr
	mov	eax, DWORD PTR [r12+1]
	lea	r13, QWORD PTR [r12+1]
	cmp	DWORD PTR [rdi], eax
	jne	$LN2671@ZSTD_compr

; 163  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	mov	rdx, QWORD PTR iend$1$[rsp]
	cmp	ecx, r8d
	mov	rsi, rdx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, rdx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 163  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	cmovb	rsi, QWORD PTR dictEnd$1$[rsp]

; 164  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	add	r12, 5
	add	rdi, 4
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, r12
	sub	rcx, rdi
	add	rcx, rsi
	cmp	rcx, rdx

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, rdi
	cmovb	r8, rcx
	mov	rcx, r12
	call	ZSTD_count
	mov	rbp, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rdi+rax]
	cmp	rcx, rsi
	jne	SHORT $LN2080@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+rax]
	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	call	ZSTD_count
	add	rbp, rax
$LN2080@ZSTD_compr:

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 164  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	lea	rdi, QWORD PTR [rbp+4]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 166  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	lea	rsi, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	rbp, -32				; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 165  :             ip++;

	mov	r12, r13

; 166  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	r13, rbx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rbx+r13]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN2086@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r13, 16
	jbe	SHORT $LN2087@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r13
	npad	2
$LL2100@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL2100@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN2087@ZSTD_compr
$LN2086@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN2087@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], r13
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r13, 65535				; 0000ffffH
	jbe	SHORT $LN2607@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2607@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r13w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2608@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2608@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], si
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 167  :             goto _match_stored;

	jmp	$LN2685@ZSTD_compr
$LN2671@ZSTD_compr:

; 158  : 
; 159  :         /* check dictMatchState repcode */
; 160  :         if (dictMode == ZSTD_dictMatchState
; 161  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 162  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	r13, QWORD PTR dictHL$1$[rsp]
$LN1702@ZSTD_compr:

; 168  :         }
; 169  : 
; 170  :         /* check noDict repcode */
; 171  :         if ( dictMode == ZSTD_noDict
; 172  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {
; 173  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;
; 174  :             ip++;
; 175  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 176  :             goto _match_stored;
; 177  :         }
; 178  : 
; 179  :         if (matchIndexL > prefixLowestIndex) {

	cmp	r10d, r8d
	jbe	$LN1704@ZSTD_compr

; 180  :             /* check prefix long match */
; 181  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN2680@ZSTD_compr

; 182  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+8]
	call	ZSTD_count

; 183  :                 offset = (U32)(ip-matchLong);
; 184  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r9, QWORD PTR prefixLowest$1$[rsp]
	mov	edx, r15d
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, ebp
	cmp	rbp, r9
	lea	rdi, QWORD PTR [rax+8]
	seta	dl
	cmp	r12, rbx
	seta	cl
	test	edx, ecx
	je	$_match_found$2695
	npad	3
$LL1681@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2695
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r9
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1681@ZSTD_compr

; 185  :                 goto _match_found;

	jmp	$_match_found$2695
$LN1704@ZSTD_compr:

; 186  :             }
; 187  :         } else if (dictMode == ZSTD_dictMatchState) {
; 188  :             /* check dictMatchState long match */
; 189  :             U32 const dictMatchIndexL = dictHashLong[dictHL];

	mov	rax, QWORD PTR dictHashLong$1$[rsp]

; 190  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;

	mov	r9, QWORD PTR dictBase$1$[rsp]

; 191  :             assert(dictMatchL < dictEnd);
; 192  : 
; 193  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {

	mov	r8, QWORD PTR dictStart$1$[rsp]
	mov	eax, DWORD PTR [rax+r13*4]
	mov	DWORD PTR dictMatchIndexL$1$[rsp], eax
	lea	rbp, QWORD PTR [r9+rax]
	cmp	rbp, r8
	jbe	$LN1708@ZSTD_compr
	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN1708@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 194  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	lea	rdi, QWORD PTR [rbp+8]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, QWORD PTR dictEnd$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 194  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	lea	r13, QWORD PTR [r12+8]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, rdi

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, rdi
	add	rcx, r13
	cmp	rcx, r8
	cmovb	r8, rcx
	mov	rcx, r13
	call	ZSTD_count
	mov	rsi, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rdi+rax]
	cmp	rcx, QWORD PTR dictEnd$1$[rsp]
	jne	SHORT $LN2201@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [rax+r13]
	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	call	ZSTD_count
	add	rsi, rax
$LN2201@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 195  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	lea	rdi, QWORD PTR [rsi+8]
	sub	r13d, DWORD PTR dictMatchIndexL$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]

; 196  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */

	cmp	r12, rbx
	jbe	$_match_found$2695
	mov	r8, QWORD PTR dictStart$1$[rsp]
	npad	10
$LL1683@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2695
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r8
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1683@ZSTD_compr

; 197  :                 goto _match_found;

	jmp	$_match_found$2695
$LN2680@ZSTD_compr:

; 180  :             /* check prefix long match */
; 181  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	r8, QWORD PTR dictStart$1$[rsp]
	mov	r9, QWORD PTR dictBase$1$[rsp]
$LN1708@ZSTD_compr:

; 198  :         }   }
; 199  : 
; 200  :         if (matchIndexS > prefixLowestIndex) {

	cmp	edx, DWORD PTR srcSize$[rsp]
	jbe	SHORT $LN1709@ZSTD_compr

; 201  :             /* check prefix short match */
; 202  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	je	SHORT $_search_next_long$2696
$LN1713@ZSTD_compr:

; 212  :                 goto _search_next_long;
; 213  :         }   }
; 214  : 
; 215  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, r12
	inc	r12
	sub	rax, rbx
	sar	rax, 8
	add	r12, rax
$LN2676@ZSTD_compr:

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);
; 127  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 128  :         U32 const maxRep = current - windowLow;
; 129  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 131  :     }
; 132  :     if (dictMode == ZSTD_dictMatchState) {
; 133  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 134  :          * disabling. */
; 135  :         assert(offset_1 <= dictAndPrefixLength);
; 136  :         assert(offset_2 <= dictAndPrefixLength);
; 137  :     }
; 138  : 
; 139  :     /* Main Search Loop */
; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	ebp, DWORD PTR offset_2$1$[rsp]
$LN2545@ZSTD_compr:
	mov	rax, QWORD PTR iend$1$[rsp]
	add	rax, -8
	cmp	r12, rax
	jb	$LL1679@ZSTD_compr
$LN1680@ZSTD_compr:

; 324  : 
; 325  :     /* save reps for next block */
; 326  :     rep[0] = offset_1 ? offset_1 : offsetSaved;

	mov	rcx, QWORD PTR rep$[rsp]
	mov	eax, DWORD PTR offset_1$1$[rsp]

; 327  :     rep[1] = offset_2 ? offset_2 : offsetSaved;

	mov	DWORD PTR [rcx+4], ebp

; 378  :     case 7 :
; 379  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 7, ZSTD_dictMatchState);

	jmp	$LN2686@ZSTD_compr
$LN1709@ZSTD_compr:

; 207  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];

	mov	rax, QWORD PTR dictHashSmall$1$[rsp]
	mov	ecx, DWORD PTR [rax+r11*4]

; 208  :             match = dictBase + dictMatchIndexS;
; 209  :             matchIndexS = dictMatchIndexS + dictIndexDelta;

	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	add	eax, ecx
	mov	DWORD PTR matchIndexS$1$[rsp], eax
	lea	rsi, QWORD PTR [r9+rcx]

; 210  : 
; 211  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {

	cmp	rsi, r8
	jbe	SHORT $LN1713@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	jne	SHORT $LN1713@ZSTD_compr
$_search_next_long$2696:

; 216  : #if defined(__aarch64__)
; 217  :         PREFETCH_L1(ip+256);
; 218  : #endif
; 219  :         continue;
; 220  : 
; 221  : _search_next_long:
; 222  : 
; 223  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	lea	r13, QWORD PTR [r12+1]
	mov	rcx, r13
	mov	QWORD PTR tv11979[rsp], r13
	mov	r8d, 8
	call	ZSTD_hashPtr

; 224  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 225  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r9, QWORD PTR hashLong$1$[rsp]

; 226  :             const BYTE* matchL3 = base + matchIndexL3;
; 227  :             hashLong[hl3] = current + 1;

	mov	ecx, DWORD PTR current$1$[rsp]
	mov	edx, DWORD PTR [r9+rdi*4]
	mov	ebp, edx
	add	rbp, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR [r9+rdi*4], ecx

; 228  : 
; 229  :             /* check prefix long +1 match */
; 230  :             if (matchIndexL3 > prefixLowestIndex) {

	mov	r9, QWORD PTR srcSize$[rsp]
	cmp	edx, r9d
	jbe	$LN1714@ZSTD_compr

; 231  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN1718@ZSTD_compr

; 232  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+9]
	call	ZSTD_count

; 233  :                     ip++;
; 234  :                     offset = (U32)(ip-matchL3);
; 235  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r9, QWORD PTR prefixLowest$1$[rsp]
	mov	r12, r13
	sub	r13d, ebp
	mov	ecx, r15d
	cmp	r12, rbx
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r15d
	seta	cl
	cmp	rbp, r9
	seta	al
	test	ecx, eax
	je	$_match_found$2695
	npad	13
$LL1685@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2695
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r9
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1685@ZSTD_compr

; 236  :                     goto _match_found;

	jmp	$_match_found$2695
$LN1714@ZSTD_compr:

; 237  :                 }
; 238  :             } else if (dictMode == ZSTD_dictMatchState) {
; 239  :                 /* check dict long +1 match */
; 240  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];

	mov	rcx, QWORD PTR dictHashLong$1$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]

; 241  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;

	mov	ebp, eax
	mov	DWORD PTR dictMatchIndexL3$1$[rsp], eax
	add	rbp, QWORD PTR dictBase$1$[rsp]

; 242  :                 assert(dictMatchL3 < dictEnd);
; 243  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {

	cmp	rbp, QWORD PTR dictStart$1$[rsp]
	jbe	$LN1718@ZSTD_compr
	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN1718@ZSTD_compr

; 244  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	lea	rcx, QWORD PTR [r12+9]
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 245  :                     ip++;

	mov	r12, r13

; 246  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	sub	r13d, DWORD PTR dictMatchIndexL3$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]
	inc	r13d
	lea	rdi, QWORD PTR [rax+8]

; 247  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */

	cmp	QWORD PTR tv11979[rsp], rbx
	jbe	$_match_found$2695
	npad	10
$LL1687@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2695
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, QWORD PTR dictStart$1$[rsp]
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1687@ZSTD_compr

; 248  :                     goto _match_found;

	jmp	$_match_found$2695
$LN1718@ZSTD_compr:

; 249  :         }   }   }
; 250  : 
; 251  :         /* if no long +1 match, explore the short match we found */
; 252  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {

	lea	rdx, QWORD PTR [rsi+4]
	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	cmp	DWORD PTR matchIndexS$1$[rsp], r9d
	jae	SHORT $LN1719@ZSTD_compr

; 253  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 254  :             offset = (U32)(current - matchIndexS);

	mov	r13d, DWORD PTR current$1$[rsp]

; 255  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	ecx, r15d
	sub	r13d, DWORD PTR matchIndexS$1$[rsp]
	mov	r8, QWORD PTR dictStart$1$[rsp]
	cmp	rsi, r8
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2695
$LL1689@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2695
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r8
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1689@ZSTD_compr

; 256  :         } else {

	jmp	SHORT $_match_found$2695
$LN1719@ZSTD_compr:

; 257  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	call	ZSTD_count

; 258  :             offset = (U32)(ip - match);
; 259  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r9, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, esi
	cmp	rsi, r9
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2695
	npad	4
$LL1691@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2695
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r9
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1691@ZSTD_compr
$_match_found$2695:

; 265  :         offset_2 = offset_1;

	mov	eax, DWORD PTR offset_1$1$[rsp]

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	rdx, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r12
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	sub	rsi, rbx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	rbp, -32				; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 265  :         offset_2 = offset_1;

	mov	DWORD PTR offset_2$1$[rsp], eax

; 266  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r13d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rbx+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN2410@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN2411@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
$LL2424@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL2424@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN2411@ZSTD_compr
$LN2410@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
	lea	rdx, QWORD PTR [rdi-3]
$LN2411@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], rsi
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2609@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2609@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r13+3]
	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdx, 65535				; 0000ffffH
	jbe	SHORT $LN2610@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2610@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], dx
$LN2685@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 272  :         ip += mLength;

	add	QWORD PTR [r14+8], 8
$_match_stored$2697:

; 273  :         anchor = ip;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rbx, QWORD PTR [rdi+r12]
	add	rbp, -8
	mov	r12, rbx
	cmp	rbx, rbp

; 274  : 
; 275  :         if (ip <= ilimit) {

	ja	$LN2676@ZSTD_compr

; 276  :             /* Complementary insertion */
; 277  :             /* done after iLimit test, as candidates could be > iend-8 */
; 278  :             {   U32 const indexToInsert = current+2;

	mov	ebp, DWORD PTR current$1$[rsp]

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	r13, QWORD PTR base$1$[rsp]
	add	ebp, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	esi, ebp
	add	rsi, r13
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 280  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edi, ebx
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	edi, r13d
	mov	r8d, 8
	sub	edi, 2
	mov	DWORD PTR [rcx+rax*4], ebp
	lea	rcx, QWORD PTR [rbx-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 281  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 7
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	r13, QWORD PTR hashSmall$1$[rsp]

; 282  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [rbx-1]
	mov	rsi, QWORD PTR base$1$[rsp]
	mov	edi, ebx
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	sub	edi, esi
	dec	edi
	mov	r8d, 7
	mov	DWORD PTR [r13+rax*4], ebp
	call	ZSTD_hashPtr
	mov	DWORD PTR [r13+rax*4], edi
	mov	r13, QWORD PTR litLimit_w$1$[rsp]
	npad	1
$LL1693@ZSTD_compr:

; 283  :             }
; 284  : 
; 285  :             /* check immediate repcode */
; 286  :             if (dictMode == ZSTD_dictMatchState) {
; 287  :                 while (ip <= ilimit) {
; 288  :                     U32 const current2 = (U32)(ip-base);
; 289  :                     U32 const repIndex2 = current2 - offset_2;

	mov	ebp, DWORD PTR offset_2$1$[rsp]
	mov	edi, r12d

; 290  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState

	mov	r8, QWORD PTR srcSize$[rsp]
	sub	edi, esi
	mov	ecx, edi
	sub	ecx, ebp
	mov	edx, ecx
	cmp	ecx, r8d
	jae	SHORT $LN1748@ZSTD_compr
	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	sub	rdx, rax
	add	rdx, QWORD PTR dictBase$1$[rsp]
	jmp	SHORT $LN1749@ZSTD_compr
$LN1748@ZSTD_compr:
	add	rdx, rsi
$LN1749@ZSTD_compr:

; 291  :                         && repIndex2 < prefixLowestIndex ?
; 292  :                             dictBase + repIndex2 - dictIndexDelta :
; 293  :                             base + repIndex2;
; 294  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 295  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {

	mov	eax, r8d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN2545@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rdx], eax
	jne	$LN2545@ZSTD_compr

; 297  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	cmp	ecx, r8d
	mov	r9, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	cmovb	r9, QWORD PTR dictEnd$1$[rsp]
	add	rdx, 4
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 297  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	lea	rsi, QWORD PTR [rax+4]

; 298  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	eax, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR offset_1$1$[rsp], ebp

; 299  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);

	lea	rbp, QWORD PTR [rsi-3]
	mov	DWORD PTR offset_2$1$[rsp], eax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rbx, r13
	ja	SHORT $LN2437@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN2438@ZSTD_compr
$LN2437@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, r13
	mov	r8, rbx
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN2438@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [r14+8]
	mov	WORD PTR [rax+4], r15w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rbp, 65535				; 0000ffffH
	jbe	SHORT $LN2663@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, QWORD PTR [r14+8]
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
	mov	DWORD PTR [r14+72], 2
$LN2663@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	rax, QWORD PTR [r14+8]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 300  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	r8d, 7
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	rcx, r12
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rax+6], bp

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [r14+8], 8
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 300  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 301  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r12
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 302  :                         ip += repLength2;

	add	r12, rsi
	mov	rsi, QWORD PTR iend$1$[rsp]
	mov	rbx, r12
	add	rsi, -8
	cmp	r12, rsi
	mov	rsi, QWORD PTR base$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	jbe	$LL1693@ZSTD_compr

; 303  :                         anchor = ip;
; 304  :                         continue;
; 305  :                     }
; 306  :                     break;
; 307  :             }   }
; 308  : 
; 309  :             if (dictMode == ZSTD_noDict) {
; 310  :                 while ( (ip <= ilimit)
; 311  :                      && ( (offset_2>0)
; 312  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 313  :                     /* store sequence */
; 314  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;
; 315  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 316  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);
; 317  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);
; 318  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);
; 319  :                     ip += rLength;
; 320  :                     anchor = ip;
; 321  :                     continue;   /* faster when present ... (?) */
; 322  :         }   }   }
; 323  :     }   /* while (ip < ilimit) */

	jmp	$LN2676@ZSTD_compr
$LN6@ZSTD_compr:

; 68   :     const BYTE* const base = ms->window.base;

	mov	r8, QWORD PTR [rcx+8]

; 76   :     const BYTE* const iend = istart + srcSize;
; 77   :     const BYTE* const ilimit = iend - HASH_READ_SIZE;

	lea	r13, QWORD PTR [r11-8]
	mov	eax, DWORD PTR [rcx+192]
	sub	r10d, r8d

; 78   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	ebp, DWORD PTR [rsi+4]
	add	r10d, ebx
	mov	DWORD PTR hBitsL$1$[rsp], eax
	mov	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR hashSmall$1$[rsp], rax
	mov	eax, DWORD PTR [rcx+188]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [rcx+184]
	shl	edx, cl
	mov	ecx, DWORD PTR [r9+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 67   :     const U32 hBitsS = cParams->chainLog;

	mov	DWORD PTR hBitsS$1$[rsp], eax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r10d
	sub	eax, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 68   :     const BYTE* const base = ms->window.base;

	mov	QWORD PTR base$1$[rsp], r8
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r10d, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 78   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	DWORD PTR offset_2$1$[rsp], ebp
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmp	eax, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 78   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	eax, DWORD PTR [rsi]
	mov	DWORD PTR offset_1$1$[rsp], eax

; 79   :     U32 offsetSaved = 0;
; 80   : 
; 81   :     const ZSTD_matchState_t* const dms = ms->dictMatchState;

	mov	rax, QWORD PTR [r9+176]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r10d, ecx
	cmp	DWORD PTR [r9+32], 0

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r10d, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 85   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?

	mov	rcx, QWORD PTR [rax+48]

; 94   :                                      dictBase + dictStartIndex : NULL;
; 95   :     const BYTE* const dictEnd      = dictMode == ZSTD_dictMatchState ?

	mov	r15, QWORD PTR [rax]
	mov	esi, DWORD PTR [rax+24]
	mov	QWORD PTR dictHashLong$1$[rsp], rcx
	mov	rcx, QWORD PTR [rax+64]
	mov	QWORD PTR dictHashSmall$1$[rsp], rcx
	mov	rcx, QWORD PTR [rax+8]
	add	rsi, rcx
	mov	QWORD PTR dictBase$1$[rsp], rcx

; 97   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	sub	ecx, r15d
	mov	edi, r10d
	add	ecx, r10d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	QWORD PTR srcSize$[rsp], r10
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 97   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	mov	DWORD PTR dictIndexDelta$1$[rsp], ecx
	add	rdi, r8

; 98   :                                      prefixLowestIndex - (U32)(dictEnd - dictBase) :
; 99   :                                      0;
; 100  :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?

	mov	ecx, DWORD PTR [rax+192]

; 101  :                                      dictCParams->hashLog : hBitsL;
; 102  :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?

	mov	eax, DWORD PTR [rax+188]
	mov	DWORD PTR dictHBitsL$1$[rsp], ecx

; 103  :                                      dictCParams->chainLog : hBitsS;
; 104  :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 105  : 
; 106  :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 107  : 
; 108  : #ifdef _MSC_VER
; 109  :     static LARGE_INTEGER time1;
; 110  :     QueryPerformanceCounter(&time1);

	lea	rcx, OFFSET FLAT:?time1@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	mov	QWORD PTR prefixLowest$1$[rsp], rdi
	mov	QWORD PTR dictStart$1$[rsp], rsi
	mov	QWORD PTR dictEnd$1$[rsp], r15
	mov	DWORD PTR dictHBitsS$1$[rsp], eax
	call	QWORD PTR __imp_QueryPerformanceCounter

; 111  : #else
; 112  :     static struct timespec time1;
; 113  : 	clock_gettime(CLOCK_MONOTONIC, &time1);
; 114  : #endif
; 115  : 
; 116  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 117  : 
; 118  :     /* if a dictionary is attached, it must be within window range */
; 119  :     if (dictMode == ZSTD_dictMatchState) {
; 120  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 121  :     }
; 122  : 
; 123  :     /* init */
; 124  :     ip += (dictAndPrefixLength == 0);

	mov	eax, r15d
	mov	r15d, 0
	sub	eax, edi
	sub	eax, esi
	add	eax, ebx
	mov	eax, r15d
	sete	al
	lea	r12, QWORD PTR [rax+rbx]
	cmp	r12, r13

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);
; 127  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 128  :         U32 const maxRep = current - windowLow;
; 129  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 131  :     }
; 132  :     if (dictMode == ZSTD_dictMatchState) {
; 133  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 134  :          * disabling. */
; 135  :         assert(offset_1 <= dictAndPrefixLength);
; 136  :         assert(offset_2 <= dictAndPrefixLength);
; 137  :     }
; 138  : 
; 139  :     /* Main Search Loop */
; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	jae	$LN1038@ZSTD_compr
	npad	3
$LL1037@ZSTD_compr:

; 141  :         size_t mLength;
; 142  :         U32 offset;
; 143  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r12
	call	ZSTD_hashPtr

; 144  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 6
	mov	rcx, r12
	mov	rsi, rax
	call	ZSTD_hashPtr

; 145  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r12
	mov	rdi, rax
	call	ZSTD_hashPtr

; 146  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR dictHBitsS$1$[rsp]
	mov	r8d, 6
	mov	rcx, r12
	mov	QWORD PTR dictHL$1$[rsp], rax
	mov	r13, rax
	call	ZSTD_hashPtr

; 147  :         U32 const current = (U32)(ip-base);
; 148  :         U32 const matchIndexL = hashLong[h2];

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	r11, rax
	mov	r10d, DWORD PTR [rcx+rsi*4]
	lea	r8, QWORD PTR [rcx+rsi*4]

; 149  :         U32 matchIndexS = hashSmall[h];

	mov	rcx, QWORD PTR hashSmall$1$[rsp]
	mov	eax, r12d
	sub	eax, DWORD PTR base$1$[rsp]
	lea	r9, QWORD PTR [rcx+rdi*4]
	mov	edx, DWORD PTR [r9]

; 151  :         const BYTE* match = base + matchIndexS;
; 152  :         const U32 repIndex = current + 1 - offset_1;

	mov	ecx, eax
	sub	ecx, DWORD PTR offset_1$1$[rsp]
	mov	esi, edx
	add	rsi, QWORD PTR base$1$[rsp]
	mov	ebp, r10d
	add	rbp, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR current$1$[rsp], eax
	mov	DWORD PTR matchIndexS$1$[rsp], edx

; 153  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState

	cmp	ecx, DWORD PTR srcSize$[rsp]
	jae	SHORT $LN1104@ZSTD_compr
	mov	edi, ecx
	sub	edi, DWORD PTR dictIndexDelta$1$[rsp]
	add	rdi, QWORD PTR dictBase$1$[rsp]
	jmp	SHORT $LN1105@ZSTD_compr
$LN1104@ZSTD_compr:
	mov	edi, ecx
	add	rdi, QWORD PTR base$1$[rsp]
$LN1105@ZSTD_compr:

; 154  :                             && repIndex < prefixLowestIndex) ?
; 155  :                                dictBase + (repIndex - dictIndexDelta) :
; 156  :                                base + repIndex;
; 157  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	DWORD PTR [r9], eax
	mov	DWORD PTR [r8], eax

; 158  : 
; 159  :         /* check dictMatchState repcode */
; 160  :         if (dictMode == ZSTD_dictMatchState
; 161  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 162  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	r8, QWORD PTR srcSize$[rsp]
	mov	eax, r8d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN1060@ZSTD_compr
	mov	eax, DWORD PTR [r12+1]
	lea	r13, QWORD PTR [r12+1]
	cmp	DWORD PTR [rdi], eax
	jne	$LN2672@ZSTD_compr

; 163  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	mov	rdx, QWORD PTR iend$1$[rsp]
	cmp	ecx, r8d
	mov	rsi, rdx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, rdx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 163  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	cmovb	rsi, QWORD PTR dictEnd$1$[rsp]

; 164  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	add	r12, 5
	add	rdi, 4
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, r12
	sub	rcx, rdi
	add	rcx, rsi
	cmp	rcx, rdx

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, rdi
	cmovb	r8, rcx
	mov	rcx, r12
	call	ZSTD_count
	mov	rbp, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rdi+rax]
	cmp	rcx, rsi
	jne	SHORT $LN1438@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+rax]
	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	call	ZSTD_count
	add	rbp, rax
$LN1438@ZSTD_compr:

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 164  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	lea	rdi, QWORD PTR [rbp+4]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 166  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	lea	rsi, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	rbp, -32				; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 165  :             ip++;

	mov	r12, r13

; 166  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	r13, rbx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rbx+r13]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN1444@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r13, 16
	jbe	SHORT $LN1445@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r13
	npad	2
$LL1458@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL1458@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN1445@ZSTD_compr
$LN1444@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN1445@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], r13
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r13, 65535				; 0000ffffH
	jbe	SHORT $LN2612@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2612@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r13w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2613@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2613@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], si
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 167  :             goto _match_stored;

	jmp	$LN2687@ZSTD_compr
$LN2672@ZSTD_compr:

; 158  : 
; 159  :         /* check dictMatchState repcode */
; 160  :         if (dictMode == ZSTD_dictMatchState
; 161  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 162  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	r13, QWORD PTR dictHL$1$[rsp]
$LN1060@ZSTD_compr:

; 168  :         }
; 169  : 
; 170  :         /* check noDict repcode */
; 171  :         if ( dictMode == ZSTD_noDict
; 172  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {
; 173  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;
; 174  :             ip++;
; 175  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 176  :             goto _match_stored;
; 177  :         }
; 178  : 
; 179  :         if (matchIndexL > prefixLowestIndex) {

	cmp	r10d, r8d
	jbe	$LN1062@ZSTD_compr

; 180  :             /* check prefix long match */
; 181  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN2681@ZSTD_compr

; 182  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+8]
	call	ZSTD_count

; 183  :                 offset = (U32)(ip-matchLong);
; 184  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r9, QWORD PTR prefixLowest$1$[rsp]
	mov	edx, r15d
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, ebp
	cmp	rbp, r9
	lea	rdi, QWORD PTR [rax+8]
	seta	dl
	cmp	r12, rbx
	seta	cl
	test	edx, ecx
	je	$_match_found$2698
	npad	3
$LL1039@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2698
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r9
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1039@ZSTD_compr

; 185  :                 goto _match_found;

	jmp	$_match_found$2698
$LN1062@ZSTD_compr:

; 186  :             }
; 187  :         } else if (dictMode == ZSTD_dictMatchState) {
; 188  :             /* check dictMatchState long match */
; 189  :             U32 const dictMatchIndexL = dictHashLong[dictHL];

	mov	rax, QWORD PTR dictHashLong$1$[rsp]

; 190  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;

	mov	r9, QWORD PTR dictBase$1$[rsp]

; 191  :             assert(dictMatchL < dictEnd);
; 192  : 
; 193  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {

	mov	r8, QWORD PTR dictStart$1$[rsp]
	mov	eax, DWORD PTR [rax+r13*4]
	mov	DWORD PTR dictMatchIndexL$1$[rsp], eax
	lea	rbp, QWORD PTR [r9+rax]
	cmp	rbp, r8
	jbe	$LN1066@ZSTD_compr
	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN1066@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 194  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	lea	rdi, QWORD PTR [rbp+8]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, QWORD PTR dictEnd$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 194  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	lea	r13, QWORD PTR [r12+8]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, rdi

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, rdi
	add	rcx, r13
	cmp	rcx, r8
	cmovb	r8, rcx
	mov	rcx, r13
	call	ZSTD_count
	mov	rsi, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rax+rdi]
	cmp	rcx, QWORD PTR dictEnd$1$[rsp]
	jne	SHORT $LN1501@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [rax+r13]
	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	call	ZSTD_count
	add	rsi, rax
$LN1501@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 195  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	lea	rdi, QWORD PTR [rsi+8]
	sub	r13d, DWORD PTR dictMatchIndexL$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]

; 196  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */

	cmp	r12, rbx
	jbe	$_match_found$2698
	mov	r8, QWORD PTR dictStart$1$[rsp]
	npad	10
$LL1041@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2698
	inc	rdi
	mov	ecx, r15d
	cmp	rdx, rbx
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rbp, r8
	seta	al
	test	ecx, eax
	jne	SHORT $LL1041@ZSTD_compr

; 197  :                 goto _match_found;

	jmp	$_match_found$2698
$LN2681@ZSTD_compr:

; 180  :             /* check prefix long match */
; 181  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	r8, QWORD PTR dictStart$1$[rsp]
	mov	r9, QWORD PTR dictBase$1$[rsp]
$LN1066@ZSTD_compr:

; 198  :         }   }
; 199  : 
; 200  :         if (matchIndexS > prefixLowestIndex) {

	cmp	edx, DWORD PTR srcSize$[rsp]
	jbe	SHORT $LN1067@ZSTD_compr

; 201  :             /* check prefix short match */
; 202  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	je	SHORT $_search_next_long$2699
$LN1071@ZSTD_compr:

; 212  :                 goto _search_next_long;
; 213  :         }   }
; 214  : 
; 215  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, r12
	inc	r12
	sub	rax, rbx
	sar	rax, 8
	add	r12, rax
$LN2677@ZSTD_compr:

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);
; 127  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 128  :         U32 const maxRep = current - windowLow;
; 129  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 131  :     }
; 132  :     if (dictMode == ZSTD_dictMatchState) {
; 133  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 134  :          * disabling. */
; 135  :         assert(offset_1 <= dictAndPrefixLength);
; 136  :         assert(offset_2 <= dictAndPrefixLength);
; 137  :     }
; 138  : 
; 139  :     /* Main Search Loop */
; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	ebp, DWORD PTR offset_2$1$[rsp]
$LN2553@ZSTD_compr:
	mov	rax, QWORD PTR iend$1$[rsp]
	add	rax, -8
	cmp	r12, rax
	jb	$LL1037@ZSTD_compr
$LN1038@ZSTD_compr:

; 324  : 
; 325  :     /* save reps for next block */
; 326  :     rep[0] = offset_1 ? offset_1 : offsetSaved;

	mov	rcx, QWORD PTR rep$[rsp]
	mov	eax, DWORD PTR offset_1$1$[rsp]

; 327  :     rep[1] = offset_2 ? offset_2 : offsetSaved;

	mov	DWORD PTR [rcx+4], ebp

; 374  :     case 5 :
; 375  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 5, ZSTD_dictMatchState);
; 376  :     case 6 :
; 377  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 6, ZSTD_dictMatchState);

	jmp	$LN2686@ZSTD_compr
$LN1067@ZSTD_compr:

; 207  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];

	mov	rax, QWORD PTR dictHashSmall$1$[rsp]
	mov	ecx, DWORD PTR [rax+r11*4]

; 208  :             match = dictBase + dictMatchIndexS;
; 209  :             matchIndexS = dictMatchIndexS + dictIndexDelta;

	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	add	eax, ecx
	mov	DWORD PTR matchIndexS$1$[rsp], eax
	lea	rsi, QWORD PTR [r9+rcx]

; 210  : 
; 211  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {

	cmp	rsi, r8
	jbe	SHORT $LN1071@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	jne	SHORT $LN1071@ZSTD_compr
$_search_next_long$2699:

; 216  : #if defined(__aarch64__)
; 217  :         PREFETCH_L1(ip+256);
; 218  : #endif
; 219  :         continue;
; 220  : 
; 221  : _search_next_long:
; 222  : 
; 223  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	lea	r13, QWORD PTR [r12+1]
	mov	rcx, r13
	mov	QWORD PTR tv11981[rsp], r13
	mov	r8d, 8
	call	ZSTD_hashPtr

; 224  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 225  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r9, QWORD PTR hashLong$1$[rsp]

; 226  :             const BYTE* matchL3 = base + matchIndexL3;
; 227  :             hashLong[hl3] = current + 1;

	mov	ecx, DWORD PTR current$1$[rsp]

; 228  : 
; 229  :             /* check prefix long +1 match */
; 230  :             if (matchIndexL3 > prefixLowestIndex) {

	mov	r8, QWORD PTR srcSize$[rsp]
	mov	edx, DWORD PTR [r9+rdi*4]
	mov	ebp, edx
	add	rbp, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR [r9+rdi*4], ecx
	cmp	edx, r8d
	jbe	$LN1072@ZSTD_compr

; 231  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN1076@ZSTD_compr

; 232  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+9]
	call	ZSTD_count

; 233  :                     ip++;
; 234  :                     offset = (U32)(ip-matchL3);
; 235  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r9, QWORD PTR prefixLowest$1$[rsp]
	mov	r12, r13
	sub	r13d, ebp
	mov	ecx, r15d
	cmp	rbp, r9
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2698
	npad	13
$LL1043@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2698
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r9
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1043@ZSTD_compr

; 236  :                     goto _match_found;

	jmp	$_match_found$2698
$LN1072@ZSTD_compr:

; 237  :                 }
; 238  :             } else if (dictMode == ZSTD_dictMatchState) {
; 239  :                 /* check dict long +1 match */
; 240  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];

	mov	rcx, QWORD PTR dictHashLong$1$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]

; 241  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;

	mov	ebp, eax
	mov	DWORD PTR dictMatchIndexL3$1$[rsp], eax
	add	rbp, QWORD PTR dictBase$1$[rsp]

; 242  :                 assert(dictMatchL3 < dictEnd);
; 243  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {

	cmp	rbp, QWORD PTR dictStart$1$[rsp]
	jbe	$LN1076@ZSTD_compr
	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN1076@ZSTD_compr

; 244  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	lea	rcx, QWORD PTR [r12+9]
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 245  :                     ip++;

	mov	r12, r13

; 246  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	sub	r13d, DWORD PTR dictMatchIndexL3$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]
	inc	r13d
	lea	rdi, QWORD PTR [rax+8]

; 247  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */

	cmp	QWORD PTR tv11981[rsp], rbx
	jbe	$_match_found$2698
	mov	r8, QWORD PTR dictStart$1$[rsp]
	npad	5
$LL1045@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2698
	inc	rdi
	mov	ecx, r15d
	cmp	rdx, rbx
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rbp, r8
	seta	al
	test	ecx, eax
	jne	SHORT $LL1045@ZSTD_compr

; 248  :                     goto _match_found;

	jmp	$_match_found$2698
$LN1076@ZSTD_compr:

; 249  :         }   }   }
; 250  : 
; 251  :         /* if no long +1 match, explore the short match we found */
; 252  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {

	cmp	DWORD PTR matchIndexS$1$[rsp], r8d
	lea	rdx, QWORD PTR [rsi+4]
	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	jae	SHORT $LN1077@ZSTD_compr

; 253  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 254  :             offset = (U32)(current - matchIndexS);

	mov	r13d, DWORD PTR current$1$[rsp]

; 255  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	ecx, r15d
	sub	r13d, DWORD PTR matchIndexS$1$[rsp]
	mov	r8, QWORD PTR dictStart$1$[rsp]
	cmp	r12, rbx
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	rsi, r8
	seta	al
	test	ecx, eax
	je	$_match_found$2698
	npad	2
$LL1047@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2698
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r8
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1047@ZSTD_compr

; 256  :         } else {

	jmp	SHORT $_match_found$2698
$LN1077@ZSTD_compr:

; 257  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	call	ZSTD_count

; 258  :             offset = (U32)(ip - match);
; 259  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r9, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, esi
	cmp	r12, rbx
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	rsi, r9
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2698
	npad	8
$LL1049@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2698
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r9
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1049@ZSTD_compr
$_match_found$2698:

; 265  :         offset_2 = offset_1;

	mov	eax, DWORD PTR offset_1$1$[rsp]

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	rdx, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r12
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	sub	rsi, rbx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	rbp, -32				; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 265  :         offset_2 = offset_1;

	mov	DWORD PTR offset_2$1$[rsp], eax

; 266  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r13d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rbx+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN1602@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN1603@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
$LL1616@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL1616@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN1603@ZSTD_compr
$LN1602@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
	lea	rdx, QWORD PTR [rdi-3]
$LN1603@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], rsi
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2614@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2614@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r13+3]
	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdx, 65535				; 0000ffffH
	jbe	SHORT $LN2615@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2615@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], dx
$LN2687@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 272  :         ip += mLength;

	add	QWORD PTR [r14+8], 8
$_match_stored$2700:

; 273  :         anchor = ip;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rbx, QWORD PTR [rdi+r12]
	add	rbp, -8
	mov	r12, rbx
	cmp	rbx, rbp

; 274  : 
; 275  :         if (ip <= ilimit) {

	ja	$LN2677@ZSTD_compr

; 276  :             /* Complementary insertion */
; 277  :             /* done after iLimit test, as candidates could be > iend-8 */
; 278  :             {   U32 const indexToInsert = current+2;

	mov	ebp, DWORD PTR current$1$[rsp]

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	r13, QWORD PTR base$1$[rsp]
	add	ebp, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	esi, ebp
	add	rsi, r13
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 280  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edi, ebx
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	edi, r13d
	mov	r8d, 8
	sub	edi, 2
	mov	DWORD PTR [rcx+rax*4], ebp
	lea	rcx, QWORD PTR [rbx-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 281  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 6
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	r13, QWORD PTR hashSmall$1$[rsp]

; 282  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [rbx-1]
	mov	rsi, QWORD PTR base$1$[rsp]
	mov	edi, ebx
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	sub	edi, esi
	dec	edi
	mov	r8d, 6
	mov	DWORD PTR [r13+rax*4], ebp
	call	ZSTD_hashPtr
	mov	DWORD PTR [r13+rax*4], edi
	mov	r13, QWORD PTR litLimit_w$1$[rsp]
	npad	1
$LL1051@ZSTD_compr:

; 283  :             }
; 284  : 
; 285  :             /* check immediate repcode */
; 286  :             if (dictMode == ZSTD_dictMatchState) {
; 287  :                 while (ip <= ilimit) {
; 288  :                     U32 const current2 = (U32)(ip-base);
; 289  :                     U32 const repIndex2 = current2 - offset_2;

	mov	ebp, DWORD PTR offset_2$1$[rsp]
	mov	edi, r12d

; 290  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState

	mov	r10, QWORD PTR srcSize$[rsp]
	sub	edi, esi
	mov	ecx, edi
	sub	ecx, ebp
	mov	r8d, ecx
	cmp	ecx, r10d
	jae	SHORT $LN1106@ZSTD_compr
	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	mov	rdx, QWORD PTR dictBase$1$[rsp]
	sub	rdx, rax
	add	rdx, r8
	jmp	SHORT $LN1107@ZSTD_compr
$LN1106@ZSTD_compr:
	lea	rdx, QWORD PTR [rsi+rcx]
$LN1107@ZSTD_compr:

; 291  :                         && repIndex2 < prefixLowestIndex ?
; 292  :                             dictBase + repIndex2 - dictIndexDelta :
; 293  :                             base + repIndex2;
; 294  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 295  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {

	mov	eax, r10d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN2553@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rdx], eax
	jne	$LN2553@ZSTD_compr

; 296  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;

	mov	r8, QWORD PTR iend$1$[rsp]
	cmp	ecx, r10d

; 297  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	mov	r9, r8
	mov	QWORD PTR [rsp+32], rax
	cmovb	r9, QWORD PTR dictEnd$1$[rsp]
	add	rdx, 4
	call	ZSTD_count_2segments
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 297  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	lea	rsi, QWORD PTR [rax+4]

; 298  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	eax, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR offset_1$1$[rsp], ebp

; 299  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);

	lea	rbp, QWORD PTR [rsi-3]
	mov	DWORD PTR offset_2$1$[rsp], eax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rbx, r13
	ja	SHORT $LN1629@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN1630@ZSTD_compr
$LN1629@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, r13
	mov	r8, rbx
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN1630@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [r14+8]
	mov	WORD PTR [rax+4], r15w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rbp, 65535				; 0000ffffH
	jbe	SHORT $LN2664@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, QWORD PTR [r14+8]
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
	mov	DWORD PTR [r14+72], 2
$LN2664@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	rax, QWORD PTR [r14+8]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 300  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	r8d, 6
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	rcx, r12
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rax+6], bp

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [r14+8], 8
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 300  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 301  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r12
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 302  :                         ip += repLength2;

	add	r12, rsi
	mov	rsi, QWORD PTR iend$1$[rsp]
	mov	rbx, r12
	add	rsi, -8
	cmp	r12, rsi
	mov	rsi, QWORD PTR base$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	jbe	$LL1051@ZSTD_compr

; 303  :                         anchor = ip;
; 304  :                         continue;
; 305  :                     }
; 306  :                     break;
; 307  :             }   }
; 308  : 
; 309  :             if (dictMode == ZSTD_noDict) {
; 310  :                 while ( (ip <= ilimit)
; 311  :                      && ( (offset_2>0)
; 312  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 313  :                     /* store sequence */
; 314  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;
; 315  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 316  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);
; 317  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);
; 318  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);
; 319  :                     ip += rLength;
; 320  :                     anchor = ip;
; 321  :                     continue;   /* faster when present ... (?) */
; 322  :         }   }   }
; 323  :     }   /* while (ip < ilimit) */

	jmp	$LN2677@ZSTD_compr
$LN5@ZSTD_compr:

; 68   :     const BYTE* const base = ms->window.base;

	mov	rbp, QWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rcx+192]

; 72   :     const U32 endIndex = (U32)((size_t)(istart - base) + srcSize);

	sub	r10d, ebp

; 78   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	r13d, DWORD PTR [r8+4]
	add	r10d, ebx
	mov	DWORD PTR hBitsL$1$[rsp], eax
	mov	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR hashSmall$1$[rsp], rax
	mov	eax, DWORD PTR [rcx+188]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [rcx+184]
	shl	edx, cl
	mov	ecx, DWORD PTR [r9+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 67   :     const U32 hBitsS = cParams->chainLog;

	mov	DWORD PTR hBitsS$1$[rsp], eax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r10d
	sub	eax, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 68   :     const BYTE* const base = ms->window.base;

	mov	QWORD PTR base$1$[rsp], rbp
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r10d, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 78   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	DWORD PTR offset_2$1$[rsp], r13d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmp	eax, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 78   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	eax, DWORD PTR [r8]
	mov	DWORD PTR offset_1$1$[rsp], eax

; 79   :     U32 offsetSaved = 0;
; 80   : 
; 81   :     const ZSTD_matchState_t* const dms = ms->dictMatchState;

	mov	rax, QWORD PTR [r9+176]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r10d, ecx
	cmp	DWORD PTR [r9+32], 0

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r10d, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 85   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?

	mov	rcx, QWORD PTR [rax+48]

; 97   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	mov	edx, r10d
	mov	r15, QWORD PTR [rax]
	mov	esi, DWORD PTR [rax+24]
	sub	edx, r15d
	mov	QWORD PTR dictHashLong$1$[rsp], rcx
	mov	rcx, QWORD PTR [rax+64]
	mov	QWORD PTR dictHashSmall$1$[rsp], rcx
	mov	rcx, QWORD PTR [rax+8]
	add	rsi, rcx
	mov	QWORD PTR dictBase$1$[rsp], rcx
	add	edx, ecx
	mov	edi, r10d

; 98   :                                      prefixLowestIndex - (U32)(dictEnd - dictBase) :
; 99   :                                      0;
; 100  :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?

	mov	ecx, DWORD PTR [rax+192]
	add	rdi, rbp

; 101  :                                      dictCParams->hashLog : hBitsL;
; 102  :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?

	mov	eax, DWORD PTR [rax+188]
	mov	DWORD PTR dictHBitsL$1$[rsp], ecx

; 103  :                                      dictCParams->chainLog : hBitsS;
; 104  :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 105  : 
; 106  :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 107  : 
; 108  : #ifdef _MSC_VER
; 109  :     static LARGE_INTEGER time1;
; 110  :     QueryPerformanceCounter(&time1);

	lea	rcx, OFFSET FLAT:?time1@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	QWORD PTR srcSize$[rsp], r10
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 75   :     const BYTE* const prefixLowest = base + prefixLowestIndex;

	mov	QWORD PTR prefixLowest$1$[rsp], rdi

; 86   :                                      dms->hashTable : NULL;
; 87   :     const U32* const dictHashSmall = dictMode == ZSTD_dictMatchState ?
; 88   :                                      dms->chainTable : NULL;
; 89   :     const U32 dictStartIndex       = dictMode == ZSTD_dictMatchState ?
; 90   :                                      dms->window.dictLimit : 0;
; 91   :     const BYTE* const dictBase     = dictMode == ZSTD_dictMatchState ?
; 92   :                                      dms->window.base : NULL;
; 93   :     const BYTE* const dictStart    = dictMode == ZSTD_dictMatchState ?

	mov	QWORD PTR dictStart$1$[rsp], rsi

; 94   :                                      dictBase + dictStartIndex : NULL;
; 95   :     const BYTE* const dictEnd      = dictMode == ZSTD_dictMatchState ?

	mov	QWORD PTR dictEnd$1$[rsp], r15

; 97   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	mov	DWORD PTR dictIndexDelta$1$[rsp], edx

; 101  :                                      dictCParams->hashLog : hBitsL;
; 102  :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?

	mov	DWORD PTR dictHBitsS$1$[rsp], eax

; 103  :                                      dictCParams->chainLog : hBitsS;
; 104  :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 105  : 
; 106  :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 107  : 
; 108  : #ifdef _MSC_VER
; 109  :     static LARGE_INTEGER time1;
; 110  :     QueryPerformanceCounter(&time1);

	call	QWORD PTR __imp_QueryPerformanceCounter

; 111  : #else
; 112  :     static struct timespec time1;
; 113  : 	clock_gettime(CLOCK_MONOTONIC, &time1);
; 114  : #endif
; 115  : 
; 116  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 117  : 
; 118  :     /* if a dictionary is attached, it must be within window range */
; 119  :     if (dictMode == ZSTD_dictMatchState) {
; 120  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 121  :     }
; 122  : 
; 123  :     /* init */
; 124  :     ip += (dictAndPrefixLength == 0);

	mov	eax, ebx
	sub	eax, edi
	sub	eax, esi
	add	eax, r15d
	mov	r15d, 0
	mov	eax, r15d
	sete	al
	lea	r12, QWORD PTR [rax+rbx]
	mov	rax, QWORD PTR iend$1$[rsp]
	add	rax, -8
	cmp	r12, rax

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);
; 127  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 128  :         U32 const maxRep = current - windowLow;
; 129  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 131  :     }
; 132  :     if (dictMode == ZSTD_dictMatchState) {
; 133  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 134  :          * disabling. */
; 135  :         assert(offset_1 <= dictAndPrefixLength);
; 136  :         assert(offset_2 <= dictAndPrefixLength);
; 137  :     }
; 138  : 
; 139  :     /* Main Search Loop */
; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	jae	$LN485@ZSTD_compr
	npad	6
$LL484@ZSTD_compr:

; 141  :         size_t mLength;
; 142  :         U32 offset;
; 143  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r12
	call	ZSTD_hashPtr

; 144  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 5
	mov	rcx, r12
	mov	rsi, rax
	call	ZSTD_hashPtr

; 145  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r12
	mov	rdi, rax
	call	ZSTD_hashPtr

; 146  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR dictHBitsS$1$[rsp]
	mov	r8d, 5
	mov	rcx, r12
	mov	QWORD PTR dictHL$1$[rsp], rax
	call	ZSTD_hashPtr

; 147  :         U32 const current = (U32)(ip-base);
; 148  :         U32 const matchIndexL = hashLong[h2];

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	r11, rax
	mov	r10d, DWORD PTR [rcx+rsi*4]
	lea	r9, QWORD PTR [rcx+rsi*4]

; 149  :         U32 matchIndexS = hashSmall[h];

	mov	rcx, QWORD PTR hashSmall$1$[rsp]
	mov	eax, r12d
	sub	eax, ebp

; 150  :         const BYTE* matchLong = base + matchIndexL;

	add	rbp, r10
	mov	DWORD PTR current$1$[rsp], eax
	mov	r8d, DWORD PTR [rcx+rdi*4]

; 151  :         const BYTE* match = base + matchIndexS;
; 152  :         const U32 repIndex = current + 1 - offset_1;

	mov	ecx, eax
	sub	ecx, DWORD PTR offset_1$1$[rsp]
	mov	esi, r8d
	add	rsi, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR matchIndexS$1$[rsp], r8d

; 153  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState

	cmp	ecx, DWORD PTR srcSize$[rsp]
	jae	SHORT $LN551@ZSTD_compr
	mov	edx, ecx
	sub	edx, DWORD PTR dictIndexDelta$1$[rsp]
	add	rdx, QWORD PTR dictBase$1$[rsp]
	jmp	SHORT $LN552@ZSTD_compr
$LN551@ZSTD_compr:
	mov	edx, ecx
	add	rdx, QWORD PTR base$1$[rsp]
$LN552@ZSTD_compr:

; 154  :                             && repIndex < prefixLowestIndex) ?
; 155  :                                dictBase + (repIndex - dictIndexDelta) :
; 156  :                                base + repIndex;
; 157  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	r13, QWORD PTR hashSmall$1$[rsp]
	mov	DWORD PTR [r13+rdi*4], eax

; 158  : 
; 159  :         /* check dictMatchState repcode */
; 160  :         if (dictMode == ZSTD_dictMatchState
; 161  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 162  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	rdi, QWORD PTR srcSize$[rsp]
	mov	r13, QWORD PTR dictHL$1$[rsp]
	mov	DWORD PTR [r9], eax
	mov	eax, edi
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN507@ZSTD_compr
	mov	eax, DWORD PTR [r12+1]
	lea	r13, QWORD PTR [r12+1]
	cmp	DWORD PTR [rdx], eax
	jne	$LN2673@ZSTD_compr

; 163  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	mov	rbp, QWORD PTR iend$1$[rsp]
	cmp	ecx, edi

; 164  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [r12+5]
	mov	r9, rbp
	mov	QWORD PTR [rsp+32], rax
	cmovb	r9, QWORD PTR dictEnd$1$[rsp]
	mov	r8, rbp
	add	rdx, 4
	call	ZSTD_count_2segments
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
	lea	r9, QWORD PTR [rbp-32]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 165  :             ip++;

	mov	r12, r13

; 166  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	r13, rbx
	lea	rdi, QWORD PTR [rax+4]
	lea	rsi, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rbx+r13]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, r9
	ja	SHORT $LN886@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r13, 16
	jbe	SHORT $LN887@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r13
	npad	7
$LL900@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL900@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN887@ZSTD_compr
$LN886@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN887@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], r13
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r13, 65535				; 0000ffffH
	jbe	SHORT $LN2617@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2617@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r13w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2618@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2618@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], si
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 167  :             goto _match_stored;

	jmp	$LN2688@ZSTD_compr
$LN2673@ZSTD_compr:

; 158  : 
; 159  :         /* check dictMatchState repcode */
; 160  :         if (dictMode == ZSTD_dictMatchState
; 161  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 162  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	r13, QWORD PTR dictHL$1$[rsp]
$LN507@ZSTD_compr:

; 168  :         }
; 169  : 
; 170  :         /* check noDict repcode */
; 171  :         if ( dictMode == ZSTD_noDict
; 172  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {
; 173  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;
; 174  :             ip++;
; 175  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 176  :             goto _match_stored;
; 177  :         }
; 178  : 
; 179  :         if (matchIndexL > prefixLowestIndex) {

	cmp	r10d, edi
	jbe	$LN509@ZSTD_compr

; 180  :             /* check prefix long match */
; 181  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN2679@ZSTD_compr

; 182  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+8]
	call	ZSTD_count

; 183  :                 offset = (U32)(ip-matchLong);
; 184  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, ebp
	cmp	rbp, r10
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2701
	npad	6
$LL486@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2701
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r10
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL486@ZSTD_compr

; 185  :                 goto _match_found;

	jmp	$_match_found$2701
$LN509@ZSTD_compr:

; 186  :             }
; 187  :         } else if (dictMode == ZSTD_dictMatchState) {
; 188  :             /* check dictMatchState long match */
; 189  :             U32 const dictMatchIndexL = dictHashLong[dictHL];

	mov	rax, QWORD PTR dictHashLong$1$[rsp]

; 190  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;

	mov	r9, QWORD PTR dictBase$1$[rsp]

; 191  :             assert(dictMatchL < dictEnd);
; 192  : 
; 193  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {

	mov	rdx, QWORD PTR dictStart$1$[rsp]
	mov	eax, DWORD PTR [rax+r13*4]
	mov	DWORD PTR dictMatchIndexL$1$[rsp], eax
	lea	rbp, QWORD PTR [r9+rax]
	cmp	rbp, rdx
	jbe	$LN513@ZSTD_compr
	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN513@ZSTD_compr

; 194  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	lea	rcx, QWORD PTR [r12+8]
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 195  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	sub	r13d, DWORD PTR dictMatchIndexL$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]
	lea	rdi, QWORD PTR [rax+8]

; 196  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */

	cmp	r12, rbx
	jbe	$_match_found$2701
	mov	r8, QWORD PTR dictStart$1$[rsp]
	npad	7
$LL488@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2701
	inc	rdi
	mov	ecx, r15d
	cmp	rdx, rbx
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rbp, r8
	seta	al
	test	ecx, eax
	jne	SHORT $LL488@ZSTD_compr

; 197  :                 goto _match_found;

	jmp	$_match_found$2701
$LN2679@ZSTD_compr:

; 180  :             /* check prefix long match */
; 181  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rdx, QWORD PTR dictStart$1$[rsp]
	mov	r9, QWORD PTR dictBase$1$[rsp]
$LN513@ZSTD_compr:

; 198  :         }   }
; 199  : 
; 200  :         if (matchIndexS > prefixLowestIndex) {

	cmp	r8d, edi
	jbe	$LN514@ZSTD_compr

; 201  :             /* check prefix short match */
; 202  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	je	$_search_next_long$2702
$LN518@ZSTD_compr:

; 212  :                 goto _search_next_long;
; 213  :         }   }
; 214  : 
; 215  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, r12
	inc	r12
	sub	rax, rbx
	sar	rax, 8
	add	r12, rax
$LN2675@ZSTD_compr:

; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);
; 127  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 128  :         U32 const maxRep = current - windowLow;
; 129  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 131  :     }
; 132  :     if (dictMode == ZSTD_dictMatchState) {
; 133  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 134  :          * disabling. */
; 135  :         assert(offset_1 <= dictAndPrefixLength);
; 136  :         assert(offset_2 <= dictAndPrefixLength);
; 137  :     }
; 138  : 
; 139  :     /* Main Search Loop */
; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r13d, DWORD PTR offset_2$1$[rsp]
$LN2689@ZSTD_compr:
	mov	rbp, QWORD PTR base$1$[rsp]
$LN2561@ZSTD_compr:
	mov	rax, QWORD PTR iend$1$[rsp]
	add	rax, -8
	cmp	r12, rax
	jb	$LL484@ZSTD_compr
$LN485@ZSTD_compr:

; 324  : 
; 325  :     /* save reps for next block */
; 326  :     rep[0] = offset_1 ? offset_1 : offsetSaved;

	mov	eax, DWORD PTR offset_1$1$[rsp]
$LN2684@ZSTD_compr:

; 380  :     }
; 381  : }

	mov	rcx, QWORD PTR rep$[rsp]
	mov	DWORD PTR [rcx+4], r13d
$LN2686@ZSTD_compr:
	mov	DWORD PTR [rcx], eax
	lea	rcx, OFFSET FLAT:?time2@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	call	QWORD PTR __imp_QueryPerformanceCounter
	mov	rdx, QWORD PTR ?time2@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	lea	rcx, OFFSET FLAT:$SG4294965530
	sub	rdx, QWORD PTR ?time1@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	call	printf
	mov	rax, QWORD PTR iend$1$[rsp]
	sub	rax, rbx
	mov	rbx, QWORD PTR [rsp+280]
	add	rsp, 208				; 000000d0H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN514@ZSTD_compr:

; 207  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];

	mov	rax, QWORD PTR dictHashSmall$1$[rsp]
	mov	ecx, DWORD PTR [rax+r11*4]

; 208  :             match = dictBase + dictMatchIndexS;
; 209  :             matchIndexS = dictMatchIndexS + dictIndexDelta;

	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	add	eax, ecx
	mov	DWORD PTR matchIndexS$1$[rsp], eax
	lea	rsi, QWORD PTR [r9+rcx]

; 210  : 
; 211  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {

	cmp	rsi, rdx
	jbe	$LN518@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	jne	$LN518@ZSTD_compr
$_search_next_long$2702:

; 216  : #if defined(__aarch64__)
; 217  :         PREFETCH_L1(ip+256);
; 218  : #endif
; 219  :         continue;
; 220  : 
; 221  : _search_next_long:
; 222  : 
; 223  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	lea	r13, QWORD PTR [r12+1]
	mov	rcx, r13
	mov	QWORD PTR tv11994[rsp], r13
	mov	r8d, 8
	call	ZSTD_hashPtr

; 224  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 225  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r9, QWORD PTR hashLong$1$[rsp]

; 226  :             const BYTE* matchL3 = base + matchIndexL3;
; 227  :             hashLong[hl3] = current + 1;

	mov	ecx, DWORD PTR current$1$[rsp]

; 228  : 
; 229  :             /* check prefix long +1 match */
; 230  :             if (matchIndexL3 > prefixLowestIndex) {

	mov	r8, QWORD PTR srcSize$[rsp]
	mov	edx, DWORD PTR [r9+rdi*4]
	mov	ebp, edx
	add	rbp, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR [r9+rdi*4], ecx
	cmp	edx, r8d
	jbe	$LN519@ZSTD_compr

; 231  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN523@ZSTD_compr

; 232  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+9]
	call	ZSTD_count

; 233  :                     ip++;
; 234  :                     offset = (U32)(ip-matchL3);
; 235  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	r12, r13
	sub	r13d, ebp
	mov	ecx, r15d
	cmp	rbp, r10
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2701
$LL490@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2701
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r10
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL490@ZSTD_compr

; 236  :                     goto _match_found;

	jmp	$_match_found$2701
$LN519@ZSTD_compr:

; 237  :                 }
; 238  :             } else if (dictMode == ZSTD_dictMatchState) {
; 239  :                 /* check dict long +1 match */
; 240  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];

	mov	rcx, QWORD PTR dictHashLong$1$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]

; 241  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;

	mov	ebp, eax
	mov	DWORD PTR dictMatchIndexL3$1$[rsp], eax
	add	rbp, QWORD PTR dictBase$1$[rsp]

; 242  :                 assert(dictMatchL3 < dictEnd);
; 243  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {

	cmp	rbp, QWORD PTR dictStart$1$[rsp]
	jbe	$LN523@ZSTD_compr
	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN523@ZSTD_compr

; 244  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	lea	rcx, QWORD PTR [r12+9]
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 245  :                     ip++;

	mov	r12, r13

; 246  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	sub	r13d, DWORD PTR dictMatchIndexL3$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]
	inc	r13d
	lea	rdi, QWORD PTR [rax+8]

; 247  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */

	cmp	QWORD PTR tv11994[rsp], rbx
	jbe	$_match_found$2701
	mov	r8, QWORD PTR dictStart$1$[rsp]
	npad	2
$LL492@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2701
	inc	rdi
	mov	ecx, r15d
	cmp	rdx, rbx
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rbp, r8
	seta	al
	test	ecx, eax
	jne	SHORT $LL492@ZSTD_compr

; 248  :                     goto _match_found;

	jmp	$_match_found$2701
$LN523@ZSTD_compr:

; 249  :         }   }   }
; 250  : 
; 251  :         /* if no long +1 match, explore the short match we found */
; 252  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {

	cmp	DWORD PTR matchIndexS$1$[rsp], r8d
	lea	rdx, QWORD PTR [rsi+4]
	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	jae	SHORT $LN524@ZSTD_compr

; 253  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 254  :             offset = (U32)(current - matchIndexS);

	mov	r13d, DWORD PTR current$1$[rsp]

; 255  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	ecx, r15d
	sub	r13d, DWORD PTR matchIndexS$1$[rsp]
	mov	r8, QWORD PTR dictStart$1$[rsp]
	cmp	rsi, r8
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2701
	npad	2
$LL494@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2701
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r8
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL494@ZSTD_compr

; 256  :         } else {

	jmp	SHORT $_match_found$2701
$LN524@ZSTD_compr:

; 257  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	call	ZSTD_count

; 258  :             offset = (U32)(ip - match);
; 259  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, esi
	cmp	rsi, r10
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2701
	npad	8
$LL496@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2701
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r10
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL496@ZSTD_compr
$_match_found$2701:

; 265  :         offset_2 = offset_1;

	mov	eax, DWORD PTR offset_1$1$[rsp]

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	rbp, QWORD PTR [rdi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	r9, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r12
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	sub	rsi, rbx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	r9, -32					; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 265  :         offset_2 = offset_1;

	mov	DWORD PTR offset_2$1$[rsp], eax

; 266  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r13d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rbx+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, r9
	ja	SHORT $LN960@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN961@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	8
$LL974@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL974@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN961@ZSTD_compr
$LN960@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN961@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], rsi
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2619@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2619@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r13+3]
	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rbp, 65535				; 0000ffffH
	jbe	SHORT $LN2620@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2620@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], bp
$LN2688@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 272  :         ip += mLength;

	add	QWORD PTR [r14+8], 8
$_match_stored$2703:

; 273  :         anchor = ip;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rbx, QWORD PTR [rdi+r12]
	add	rbp, -8
	mov	r12, rbx
	cmp	rbx, rbp

; 274  : 
; 275  :         if (ip <= ilimit) {

	ja	$LN2675@ZSTD_compr

; 276  :             /* Complementary insertion */
; 277  :             /* done after iLimit test, as candidates could be > iend-8 */
; 278  :             {   U32 const indexToInsert = current+2;

	mov	ebp, DWORD PTR current$1$[rsp]

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	r13, QWORD PTR base$1$[rsp]
	add	ebp, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	esi, ebp
	add	rsi, r13
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 280  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edi, ebx
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	edi, r13d
	mov	r8d, 8
	sub	edi, 2
	mov	DWORD PTR [rcx+rax*4], ebp
	lea	rcx, QWORD PTR [rbx-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 281  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 5
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	rsi, QWORD PTR hashSmall$1$[rsp]

; 282  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [rbx-1]
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	edi, ebx
	mov	r8d, 5
	mov	DWORD PTR [rsi+rax*4], ebp
	mov	rbp, r13
	sub	edi, ebp
	dec	edi
	call	ZSTD_hashPtr
	mov	r13d, DWORD PTR offset_2$1$[rsp]
	mov	DWORD PTR [rsi+rax*4], edi
	npad	1
$LL498@ZSTD_compr:

; 290  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState

	mov	r10, QWORD PTR srcSize$[rsp]
	mov	edi, r12d
	sub	edi, ebp
	mov	ecx, edi
	sub	ecx, r13d
	mov	r8d, ecx
	cmp	ecx, r10d
	jae	SHORT $LN553@ZSTD_compr
	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	mov	rdx, QWORD PTR dictBase$1$[rsp]
	sub	rdx, rax
	add	rdx, r8
	jmp	SHORT $LN554@ZSTD_compr
$LN553@ZSTD_compr:
	lea	rdx, QWORD PTR [rcx+rbp]
$LN554@ZSTD_compr:

; 291  :                         && repIndex2 < prefixLowestIndex ?
; 292  :                             dictBase + repIndex2 - dictIndexDelta :
; 293  :                             base + repIndex2;
; 294  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 295  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {

	mov	eax, r10d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN2561@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rdx], eax
	jne	$LN2561@ZSTD_compr

; 296  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;

	mov	r8, QWORD PTR iend$1$[rsp]
	cmp	ecx, r10d

; 297  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	mov	r9, r8
	mov	QWORD PTR [rsp+32], rax
	cmovb	r9, QWORD PTR dictEnd$1$[rsp]
	add	rdx, 4
	call	ZSTD_count_2segments

; 298  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	ecx, r13d
	mov	r13d, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR offset_1$1$[rsp], ecx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 297  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	lea	rsi, QWORD PTR [rax+4]

; 298  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	DWORD PTR offset_2$1$[rsp], r13d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	mov	rax, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 299  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);

	lea	rbp, QWORD PTR [rsi-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	add	rax, -32				; ffffffffffffffe0H
	cmp	rbx, rax
	ja	SHORT $LN987@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN988@ZSTD_compr
$LN987@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rax
	mov	r8, rbx
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN988@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [r14+8]
	mov	WORD PTR [rax+4], r15w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rbp, 65535				; 0000ffffH
	jbe	SHORT $LN2665@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, QWORD PTR [r14+8]
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
	mov	DWORD PTR [r14+72], 2
$LN2665@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	rax, QWORD PTR [r14+8]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 300  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	r8d, 5
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	rcx, r12
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rax+6], bp

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [r14+8], 8
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 300  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 301  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r12
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 302  :                         ip += repLength2;

	add	r12, rsi
	mov	rbp, QWORD PTR iend$1$[rsp]
	mov	rbx, r12
	add	rbp, -8
	cmp	r12, rbp
	mov	rbp, QWORD PTR base$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	jbe	$LL498@ZSTD_compr

; 303  :                         anchor = ip;
; 304  :                         continue;
; 305  :                     }
; 306  :                     break;
; 307  :             }   }
; 308  : 
; 309  :             if (dictMode == ZSTD_noDict) {
; 310  :                 while ( (ip <= ilimit)
; 311  :                      && ( (offset_2>0)
; 312  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 313  :                     /* store sequence */
; 314  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;
; 315  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 316  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);
; 317  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);
; 318  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);
; 319  :                     ip += rLength;
; 320  :                     anchor = ip;
; 321  :                     continue;   /* faster when present ... (?) */
; 322  :         }   }   }
; 323  :     }   /* while (ip < ilimit) */

	jmp	$LN2689@ZSTD_compr
ZSTD_compressBlock_doubleFast_dictMatchState ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
_TEXT	SEGMENT
base$1$ = 0
ip$1$ = 80
ms$ = 80
tv451 = 88
end$ = 88
dtlm$ = 96
iend$1$ = 104
ZSTD_fillDoubleHashTable PROC

; 24   : {

$LN87:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 24

; 25   :     const ZSTD_compressionParameters* const cParams = &ms->cParams;
; 26   :     U32* const hashLarge = ms->hashTable;
; 27   :     U32  const hBitsL = cParams->hashLog;
; 28   :     U32  const mls = cParams->minMatch;
; 29   :     U32* const hashSmall = ms->chainTable;
; 30   :     U32  const hBitsS = cParams->chainLog;
; 31   :     const BYTE* const base = ms->window.base;
; 32   :     const BYTE* ip = base + ms->nextToUpdate;

	mov	edi, DWORD PTR [rcx+36]

; 33   :     const BYTE* const iend = ((const BYTE*)end) - HASH_READ_SIZE;

	lea	rax, QWORD PTR [rdx-8]
	mov	rbx, QWORD PTR [rcx+48]
	mov	esi, r8d
	mov	r8, QWORD PTR [rcx+8]
	mov	r14d, DWORD PTR [rcx+200]
	add	rdi, r8
	mov	r15, QWORD PTR [rcx+64]
	mov	r9d, DWORD PTR [rcx+188]
	mov	QWORD PTR base$1$[rsp], r8

; 34   :     const U32 fastHashFillStep = 3;
; 35   : 
; 36   :     /* Always insert every fastHashFillStep position into the hash tables.
; 37   :      * Insert the other positions into the large hash table if their entry
; 38   :      * is empty.
; 39   :      */
; 40   :     for (; ip + fastHashFillStep - 1 <= iend; ip += fastHashFillStep) {

	lea	rbp, QWORD PTR [rdi+2]
	mov	QWORD PTR ip$1$[rsp], rdi
	mov	QWORD PTR iend$1$[rsp], rax
	mov	QWORD PTR tv451[rsp], rbp
	cmp	rbp, rax
	ja	$LN3@ZSTD_fillD
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	QWORD PTR [rsp+96], r12

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r12d, 64				; 00000040H

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	QWORD PTR [rsp+16], r13

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r11d, r12d

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	r13d, 32				; 00000020H

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	sub	r11d, r9d

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	sub	r13d, r9d

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	sub	r12d, DWORD PTR [rcx+192]

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	mov	rcx, -3523014627193847808		; cf1bbcdcbf9b0000H
	npad	12
$LL4@ZSTD_fillD:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 41   :         U32 const current = (U32)(ip - base);

	mov	r10d, edi
	mov	rbp, -3523014627327384477		; cf1bbcdcb7a56463H
	sub	r10d, r8d
	mov	r8, rdi

; 42   :         U32 i;
; 43   :         for (i = 0; i < fastHashFillStep; ++i) {

	xor	r9d, r9d
	mov	rdi, -3523014627193167104		; cf1bbcdcbfa56300H
$LL7@ZSTD_fillD:
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	eax, r14d
	sub	eax, 5
	je	SHORT $LN17@ZSTD_fillD
	sub	eax, 1
	je	SHORT $LN18@ZSTD_fillD
	mov	rdx, QWORD PTR [r8]
	sub	eax, 1
	je	SHORT $LN19@ZSTD_fillD
	cmp	eax, 1
	je	SHORT $LN20@ZSTD_fillD

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	eax, edx, -1640531535			; 9e3779b1H
	mov	rcx, r13

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	SHORT $LN84@ZSTD_fillD
$LN20@ZSTD_fillD:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, rdx
	imul	rax, rbp

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	SHORT $LN85@ZSTD_fillD
$LN19@ZSTD_fillD:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, rdx
	imul	rax, rdi

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN85@ZSTD_fillD
$LN17@ZSTD_fillD:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rcx, -3523014627271114752		; cf1bbcdcbb000000H
$LN18@ZSTD_fillD:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [r8]
	mov	rax, rdx
	imul	rax, rcx
$LN85@ZSTD_fillD:
	mov	ecx, r11d
$LN84@ZSTD_fillD:
	imul	rdx, rbp
	shr	rax, cl
	mov	ecx, r12d
	shr	rdx, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 46   :             if (i == 0)

	test	r9d, r9d
	jne	SHORT $LN82@ZSTD_fillD

; 47   :                 hashSmall[smHash] = current + i;

	mov	DWORD PTR [r15+rax*4], r10d

; 48   :             if (i == 0 || hashLarge[lgHash] == 0)

	jmp	SHORT $LN10@ZSTD_fillD
$LN82@ZSTD_fillD:
	cmp	DWORD PTR [rbx+rdx*4], 0
	jne	SHORT $LN83@ZSTD_fillD
$LN10@ZSTD_fillD:

; 49   :                 hashLarge[lgHash] = current + i;

	lea	eax, DWORD PTR [r9+r10]
	mov	DWORD PTR [rbx+rdx*4], eax
$LN83@ZSTD_fillD:

; 50   :             /* Only load extra positions for ZSTD_dtlm_full */
; 51   :             if (dtlm == ZSTD_dtlm_fast)

	test	esi, esi
	je	SHORT $LN2@ZSTD_fillD

; 42   :         U32 i;
; 43   :         for (i = 0; i < fastHashFillStep; ++i) {

	inc	r9d
	inc	r8
	mov	rcx, -3523014627193847808		; cf1bbcdcbf9b0000H
	cmp	r9d, 3
	jb	$LL7@ZSTD_fillD
$LN2@ZSTD_fillD:

; 34   :     const U32 fastHashFillStep = 3;
; 35   : 
; 36   :     /* Always insert every fastHashFillStep position into the hash tables.
; 37   :      * Insert the other positions into the large hash table if their entry
; 38   :      * is empty.
; 39   :      */
; 40   :     for (; ip + fastHashFillStep - 1 <= iend; ip += fastHashFillStep) {

	mov	rdi, QWORD PTR ip$1$[rsp]
	mov	rcx, -3523014627193847808		; cf1bbcdcbf9b0000H
	mov	rbp, QWORD PTR tv451[rsp]
	add	rdi, 3
	mov	r8, QWORD PTR base$1$[rsp]
	add	rbp, 3
	mov	QWORD PTR ip$1$[rsp], rdi
	mov	QWORD PTR tv451[rsp], rbp
	cmp	rbp, QWORD PTR iend$1$[rsp]
	jbe	$LL4@ZSTD_fillD
	mov	r13, QWORD PTR [rsp+16]
	mov	r12, QWORD PTR [rsp+96]
$LN3@ZSTD_fillD:

; 52   :                 break;
; 53   :     }   }
; 54   : }

	add	rsp, 24
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
ZSTD_fillDoubleHashTable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
_TEXT	SEGMENT
ms$ = 64
seqStore$ = 72
rep$ = 80
src$ = 88
srcSize$ = 96
ZSTD_compressBlock_doubleFast_extDict PROC

; 532  : {

$LN12:
	sub	rsp, 56					; 00000038H

; 533  :     U32 const mls = ms->cParams.minMatch;
; 534  :     switch(mls)

	mov	r10d, DWORD PTR [rcx+200]
	sub	r10d, 5
	je	SHORT $LN5@ZSTD_compr
	sub	r10d, 1
	je	SHORT $LN6@ZSTD_compr
	mov	rax, QWORD PTR srcSize$[rsp]
	cmp	r10d, 1
	je	SHORT $LN7@ZSTD_compr

; 535  :     {
; 536  :     default: /* includes case 3 */
; 537  :     case 4 :
; 538  :         return ZSTD_compressBlock_doubleFast_extDict_generic(ms, seqStore, rep, src, srcSize, 4);

	mov	DWORD PTR [rsp+40], 4

; 545  :     }
; 546  : }

	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_compressBlock_doubleFast_extDict_generic
	add	rsp, 56					; 00000038H
	ret	0
$LN7@ZSTD_compr:

; 539  :     case 5 :
; 540  :         return ZSTD_compressBlock_doubleFast_extDict_generic(ms, seqStore, rep, src, srcSize, 5);
; 541  :     case 6 :
; 542  :         return ZSTD_compressBlock_doubleFast_extDict_generic(ms, seqStore, rep, src, srcSize, 6);
; 543  :     case 7 :
; 544  :         return ZSTD_compressBlock_doubleFast_extDict_generic(ms, seqStore, rep, src, srcSize, 7);

	mov	DWORD PTR [rsp+40], 7

; 545  :     }
; 546  : }

	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_compressBlock_doubleFast_extDict_generic
	add	rsp, 56					; 00000038H
	ret	0
$LN6@ZSTD_compr:
	mov	rax, QWORD PTR srcSize$[rsp]
	mov	DWORD PTR [rsp+40], 6
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_compressBlock_doubleFast_extDict_generic
	add	rsp, 56					; 00000038H
	ret	0
$LN5@ZSTD_compr:
	mov	rax, QWORD PTR srcSize$[rsp]
	mov	DWORD PTR [rsp+40], 5
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_compressBlock_doubleFast_extDict_generic
	add	rsp, 56					; 00000038H
	ret	0
ZSTD_compressBlock_doubleFast_extDict ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
MEM_64bits PROC

; 184  : MEM_STATIC unsigned MEM_64bits(void) { return sizeof(size_t)==8; }

	mov	eax, 1
	ret	0
MEM_64bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
MEM_isLittleEndian PROC

; 188  :     const union { U32 u; BYTE c[4]; } one = { 1 };   /* don't use static : performance detrimental  */
; 189  :     return one.c[0];

	mov	eax, 1

; 190  : }

	ret	0
MEM_isLittleEndian ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_read16 PROC

; 239  :     U16 val; memcpy(&val, memPtr, sizeof(val)); return val;

	movzx	eax, WORD PTR [rcx]

; 240  : }

	ret	0
MEM_read16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_read32 PROC

; 244  :     U32 val; memcpy(&val, memPtr, sizeof(val)); return val;

	mov	eax, DWORD PTR [rcx]

; 245  : }

	ret	0
MEM_read32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_read64 PROC

; 249  :     U64 val; memcpy(&val, memPtr, sizeof(val)); return val;

	mov	rax, QWORD PTR [rcx]

; 250  : }

	ret	0
MEM_read64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_readST PROC

; 254  :     size_t val; memcpy(&val, memPtr, sizeof(val)); return val;

	mov	rax, QWORD PTR [rcx]

; 255  : }

	ret	0
MEM_readST ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
in$ = 8
MEM_swap64 PROC

; 291  : #if defined(_MSC_VER)     /* Visual Studio */
; 292  :     return _byteswap_uint64(in);

	bswap	rcx
	mov	rax, rcx

; 293  : #elif (defined (__GNUC__) && (__GNUC__ * 100 + __GNUC_MINOR__ >= 403)) \
; 294  :   || (defined(__clang__) && __has_builtin(__builtin_bswap64))
; 295  :     return __builtin_bswap64(in);
; 296  : #else
; 297  :     return  ((in << 56) & 0xff00000000000000ULL) |
; 298  :             ((in << 40) & 0x00ff000000000000ULL) |
; 299  :             ((in << 24) & 0x0000ff0000000000ULL) |
; 300  :             ((in << 8)  & 0x000000ff00000000ULL) |
; 301  :             ((in >> 8)  & 0x00000000ff000000ULL) |
; 302  :             ((in >> 24) & 0x0000000000ff0000ULL) |
; 303  :             ((in >> 40) & 0x000000000000ff00ULL) |
; 304  :             ((in >> 56) & 0x00000000000000ffULL);
; 305  : #endif
; 306  : }

	ret	0
MEM_swap64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_readLE64 PROC

; 368  :     if (MEM_isLittleEndian())
; 369  :         return MEM_read64(memPtr);

	mov	rax, QWORD PTR [rcx]

; 370  :     else
; 371  :         return MEM_swap64(MEM_read64(memPtr));
; 372  : }

	ret	0
MEM_readLE64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\common\zstd_internal.h
_TEXT	SEGMENT
dst$ = 8
src$ = 16
ZSTD_copy8 PROC

; 231  : #ifdef __aarch64__
; 232  :     vst1_u8((uint8_t*)dst, vld1_u8((const uint8_t*)src));
; 233  : #else
; 234  :     memcpy(dst, src, 8);

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 235  : #endif
; 236  : }

	ret	0
ZSTD_copy8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\common\zstd_internal.h
_TEXT	SEGMENT
dst$ = 8
src$ = 16
ZSTD_copy16 PROC

; 240  : #ifdef __aarch64__
; 241  :     vst1q_u8((uint8_t*)dst, vld1q_u8((const uint8_t*)src));
; 242  : #else
; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdx]
	movups	XMMWORD PTR [rcx], xmm0

; 244  : #endif
; 245  : }

	ret	0
ZSTD_copy16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\common\zstd_internal.h
_TEXT	SEGMENT
dst$ = 8
src$ = 16
length$ = 24
ovtype$dead$ = 32
ZSTD_wildcopy PROC

; 267  :     ptrdiff_t diff = (BYTE*)dst - (const BYTE*)src;
; 268  :     const BYTE* ip = (const BYTE*)src;
; 269  :     BYTE* op = (BYTE*)dst;
; 270  :     BYTE* const oend = op + length;

	lea	rax, QWORD PTR [rcx+r8]
	sub	rdx, rcx
	npad	9
$LL7@ZSTD_wildc:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdx+rcx]
	movups	XMMWORD PTR [rcx], xmm0

; 271  : 
; 272  :     assert(diff >= 8 || (ovtype == ZSTD_no_overlap && diff <= -WILDCOPY_VECLEN));
; 273  : 
; 274  :     if (ovtype == ZSTD_overlap_src_before_dst && diff < WILDCOPY_VECLEN) {
; 275  :         /* Handle short offset copies. */
; 276  :         do {
; 277  :             COPY8(op, ip)
; 278  :         } while (op < oend);
; 279  :     } else {
; 280  :         assert(diff >= WILDCOPY_VECLEN || diff <= -WILDCOPY_VECLEN);
; 281  :         /* Separate out the first COPY16() call because the copy length is
; 282  :          * almost certain to be short, so the branches have different
; 283  :          * probabilities. Since it is almost certain to be short, only do
; 284  :          * one COPY16() in the first call. Then, do two calls per loop since
; 285  :          * at that point it is more likely to have a high trip count.
; 286  :          */
; 287  : #ifndef __aarch64__
; 288  :         do {
; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, rax
	jb	SHORT $LL7@ZSTD_wildc

; 292  : #else
; 293  :         COPY16(op, ip);
; 294  :         if (op >= oend) return;
; 295  :         do {
; 296  :             COPY16(op, ip);
; 297  :             COPY16(op, ip);
; 298  :         }
; 299  :         while (op < oend);
; 300  : #endif
; 301  :     }
; 302  : }

	ret	0
ZSTD_wildcopy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
op$ = 8
ip$ = 16
iend$ = 24
ilimit_w$ = 32
ZSTD_safecopyLiterals PROC

; 423  :     assert(iend > ilimit_w);
; 424  :     if (ip <= ilimit_w) {

	cmp	rdx, r9
	ja	SHORT $LN19@ZSTD_safec
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	r10, rcx
	sub	r10, rdx
	add	r10, r9
	sub	rdx, rcx
	npad	15
$LL12@ZSTD_safec:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdx+rcx]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, r10
	jb	SHORT $LL12@ZSTD_safec
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, r10
	mov	rdx, r9
$LN19@ZSTD_safec:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rdx, r8
	jae	SHORT $LN3@ZSTD_safec
	npad	5
$LL21@ZSTD_safec:
	movzx	eax, BYTE PTR [rdx]
	inc	rdx
	mov	BYTE PTR [rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	cmp	rdx, r8
	jb	SHORT $LL21@ZSTD_safec
$LN3@ZSTD_safec:

; 430  : }

	ret	0
ZSTD_safecopyLiterals ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
seqStorePtr$ = 8
litLength$ = 16
literals$ = 24
litLimit$ = 32
offCode$ = 40
mlBase$ = 48
ZSTD_storeSeq PROC

; 440  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	r10, rcx

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	lea	rbx, QWORD PTR [r9-32]

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	rcx, QWORD PTR [rdx+r8]
	mov	r11, rdx
	mov	r9, QWORD PTR [r10+24]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	rcx, rbx
	ja	SHORT $LN2@ZSTD_store
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [r9], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rdx, 16
	jbe	SHORT $LN24@ZSTD_store

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r10+24]
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rdx-16]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	add	rax, 16
	add	r8, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	add	rcx, rax
	npad	3
$LL16@ZSTD_store:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r8]

; 289  :             COPY16(op, ip);

	lea	r8, QWORD PTR [r8+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL16@ZSTD_store
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN24@ZSTD_store
$LN2@ZSTD_store:

; 424  :     if (ip <= ilimit_w) {

	cmp	r8, rbx
	ja	SHORT $LN41@ZSTD_store
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	rdx, r9
	sub	rdx, r8
	add	rdx, rbx
	sub	r8, r9
	npad	9
$LL33@ZSTD_store:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r8+r9]
	movups	XMMWORD PTR [r9], xmm0

; 289  :             COPY16(op, ip);

	add	r9, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	r9, rdx
	jb	SHORT $LL33@ZSTD_store
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	r9, rdx
	mov	r8, rbx
$LN41@ZSTD_store:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	r8, rcx
	jae	SHORT $LN24@ZSTD_store
	sub	r9, r8
$LL43@ZSTD_store:
	movzx	eax, BYTE PTR [r8]
	mov	BYTE PTR [r9+r8], al
	inc	r8
	cmp	r8, rcx
	jb	SHORT $LL43@ZSTD_store
$LN24@ZSTD_store:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);
; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r10+24], r11
	mov	rcx, QWORD PTR [r10+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r11, 65535				; 0000ffffH
	jbe	SHORT $LN48@ZSTD_store

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r10+72], 1
	sub	rax, QWORD PTR [r10]
	sar	rax, 3
	mov	DWORD PTR [r10+76], eax
$LN48@ZSTD_store:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;
; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;
; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	mov	rdx, QWORD PTR mlBase$[rsp]
	mov	WORD PTR [rcx+4], r11w
	mov	ecx, DWORD PTR offCode$[rsp]
	mov	rax, QWORD PTR [r10+8]
	inc	ecx
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [r10+8]
	cmp	rdx, 65535				; 0000ffffH
	jbe	SHORT $LN53@ZSTD_store

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r10+72], 2
	sub	rax, QWORD PTR [r10]
	sar	rax, 3
	mov	DWORD PTR [r10+76], eax
$LN53@ZSTD_store:

; 486  :     }
; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;
; 488  : 
; 489  :     seqStorePtr->sequences++;
; 490  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	WORD PTR [rcx+6], dx
	add	QWORD PTR [r10+8], 8
	ret	0
ZSTD_storeSeq ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
val$ = 8
r$1 = 16
ZSTD_NbCommonBytes PROC

; 498  :     if (MEM_isLittleEndian()) {
; 499  :         if (MEM_64bits()) {
; 500  : #       if defined(_MSC_VER) && defined(_WIN64)
; 501  :             unsigned long r = 0;
; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rcx
	mov	DWORD PTR r$1[rsp], 0
	je	SHORT $LN9@ZSTD_NbCom
	shr	eax, 3

; 503  : #       elif defined(__GNUC__) && (__GNUC__ >= 4)
; 504  :             return (__builtin_ctzll((U64)val) >> 3);
; 505  : #       else
; 506  :             static const int DeBruijnBytePos[64] = { 0, 0, 0, 0, 0, 1, 1, 2,
; 507  :                                                      0, 3, 1, 3, 1, 4, 2, 7,
; 508  :                                                      0, 2, 3, 6, 1, 5, 3, 5,
; 509  :                                                      1, 3, 4, 4, 2, 5, 6, 7,
; 510  :                                                      7, 0, 1, 2, 3, 3, 4, 6,
; 511  :                                                      2, 6, 5, 5, 3, 4, 5, 6,
; 512  :                                                      7, 1, 2, 4, 6, 4, 4, 5,
; 513  :                                                      7, 2, 6, 5, 7, 6, 7, 7 };
; 514  :             return DeBruijnBytePos[((U64)((val & -(long long)val) * 0x0218A392CDABBD3FULL)) >> 58];
; 515  : #       endif
; 516  :         } else { /* 32 bits */
; 517  : #       if defined(_MSC_VER)
; 518  :             unsigned long r=0;
; 519  :             return _BitScanForward( &r, (U32)val ) ? (unsigned)(r >> 3) : 0;
; 520  : #       elif defined(__GNUC__) && (__GNUC__ >= 3)
; 521  :             return (__builtin_ctz((U32)val) >> 3);
; 522  : #       else
; 523  :             static const int DeBruijnBytePos[32] = { 0, 0, 3, 0, 3, 1, 3, 0,
; 524  :                                                      3, 2, 2, 1, 3, 2, 0, 1,
; 525  :                                                      3, 3, 1, 2, 2, 2, 2, 0,
; 526  :                                                      3, 1, 2, 0, 1, 0, 1, 1 };
; 527  :             return DeBruijnBytePos[((U32)((val & -(S32)val) * 0x077CB531U)) >> 27];
; 528  : #       endif
; 529  :         }
; 530  :     } else {  /* Big Endian CPU */
; 531  :         if (MEM_64bits()) {
; 532  : #       if defined(_MSC_VER) && defined(_WIN64)
; 533  :             unsigned long r = 0;
; 534  :             return _BitScanReverse64( &r, val ) ? (unsigned)(r >> 3) : 0;
; 535  : #       elif defined(__GNUC__) && (__GNUC__ >= 4)
; 536  :             return (__builtin_clzll(val) >> 3);
; 537  : #       else
; 538  :             unsigned r;
; 539  :             const unsigned n32 = sizeof(size_t)*4;   /* calculate this way due to compiler complaining in 32-bits mode */
; 540  :             if (!(val>>n32)) { r=4; } else { r=0; val>>=n32; }
; 541  :             if (!(val>>16)) { r+=2; val>>=8; } else { val>>=24; }
; 542  :             r += (!val);
; 543  :             return r;
; 544  : #       endif
; 545  :         } else { /* 32 bits */
; 546  : #       if defined(_MSC_VER)
; 547  :             unsigned long r = 0;
; 548  :             return _BitScanReverse( &r, (unsigned long)val ) ? (unsigned)(r >> 3) : 0;
; 549  : #       elif defined(__GNUC__) && (__GNUC__ >= 3)
; 550  :             return (__builtin_clz((U32)val) >> 3);
; 551  : #       else
; 552  :             unsigned r;
; 553  :             if (!(val>>16)) { r=2; val>>=8; } else { r=0; val>>=24; }
; 554  :             r += (!val);
; 555  :             return r;
; 556  : #       endif
; 557  :     }   }
; 558  : }

	ret	0
$LN9@ZSTD_NbCom:

; 498  :     if (MEM_isLittleEndian()) {
; 499  :         if (MEM_64bits()) {
; 500  : #       if defined(_MSC_VER) && defined(_WIN64)
; 501  :             unsigned long r = 0;
; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	xor	eax, eax

; 503  : #       elif defined(__GNUC__) && (__GNUC__ >= 4)
; 504  :             return (__builtin_ctzll((U64)val) >> 3);
; 505  : #       else
; 506  :             static const int DeBruijnBytePos[64] = { 0, 0, 0, 0, 0, 1, 1, 2,
; 507  :                                                      0, 3, 1, 3, 1, 4, 2, 7,
; 508  :                                                      0, 2, 3, 6, 1, 5, 3, 5,
; 509  :                                                      1, 3, 4, 4, 2, 5, 6, 7,
; 510  :                                                      7, 0, 1, 2, 3, 3, 4, 6,
; 511  :                                                      2, 6, 5, 5, 3, 4, 5, 6,
; 512  :                                                      7, 1, 2, 4, 6, 4, 4, 5,
; 513  :                                                      7, 2, 6, 5, 7, 6, 7, 7 };
; 514  :             return DeBruijnBytePos[((U64)((val & -(long long)val) * 0x0218A392CDABBD3FULL)) >> 58];
; 515  : #       endif
; 516  :         } else { /* 32 bits */
; 517  : #       if defined(_MSC_VER)
; 518  :             unsigned long r=0;
; 519  :             return _BitScanForward( &r, (U32)val ) ? (unsigned)(r >> 3) : 0;
; 520  : #       elif defined(__GNUC__) && (__GNUC__ >= 3)
; 521  :             return (__builtin_ctz((U32)val) >> 3);
; 522  : #       else
; 523  :             static const int DeBruijnBytePos[32] = { 0, 0, 3, 0, 3, 1, 3, 0,
; 524  :                                                      3, 2, 2, 1, 3, 2, 0, 1,
; 525  :                                                      3, 3, 1, 2, 2, 2, 2, 0,
; 526  :                                                      3, 1, 2, 0, 1, 0, 1, 1 };
; 527  :             return DeBruijnBytePos[((U32)((val & -(S32)val) * 0x077CB531U)) >> 27];
; 528  : #       endif
; 529  :         }
; 530  :     } else {  /* Big Endian CPU */
; 531  :         if (MEM_64bits()) {
; 532  : #       if defined(_MSC_VER) && defined(_WIN64)
; 533  :             unsigned long r = 0;
; 534  :             return _BitScanReverse64( &r, val ) ? (unsigned)(r >> 3) : 0;
; 535  : #       elif defined(__GNUC__) && (__GNUC__ >= 4)
; 536  :             return (__builtin_clzll(val) >> 3);
; 537  : #       else
; 538  :             unsigned r;
; 539  :             const unsigned n32 = sizeof(size_t)*4;   /* calculate this way due to compiler complaining in 32-bits mode */
; 540  :             if (!(val>>n32)) { r=4; } else { r=0; val>>=n32; }
; 541  :             if (!(val>>16)) { r+=2; val>>=8; } else { val>>=24; }
; 542  :             r += (!val);
; 543  :             return r;
; 544  : #       endif
; 545  :         } else { /* 32 bits */
; 546  : #       if defined(_MSC_VER)
; 547  :             unsigned long r = 0;
; 548  :             return _BitScanReverse( &r, (unsigned long)val ) ? (unsigned)(r >> 3) : 0;
; 549  : #       elif defined(__GNUC__) && (__GNUC__ >= 3)
; 550  :             return (__builtin_clz((U32)val) >> 3);
; 551  : #       else
; 552  :             unsigned r;
; 553  :             if (!(val>>16)) { r=2; val>>=8; } else { r=0; val>>=24; }
; 554  :             r += (!val);
; 555  :             return r;
; 556  : #       endif
; 557  :     }   }
; 558  : }

	ret	0
ZSTD_NbCommonBytes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
r$1 = 8
r$2 = 8
pIn$ = 8
pMatch$ = 16
pInLimit$ = 24
ZSTD_count PROC

; 563  :     const BYTE* const pStart = pIn;
; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	lea	r9, QWORD PTR [r8-7]
	mov	r10, rcx

; 565  : 
; 566  :     if (pIn < pInLoopLimit) {

	cmp	rcx, r9
	jae	SHORT $LN3@ZSTD_count

; 567  :         { size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rcx]
	xor	rax, QWORD PTR [rdx]

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	je	SHORT $LN5@ZSTD_count

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rax
	mov	DWORD PTR r$2[rsp], 0
	je	SHORT $LN20@ZSTD_count
	shr	eax, 3

; 580  : }

	ret	0
$LN20@ZSTD_count:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	xor	eax, eax

; 580  : }

	ret	0
$LN5@ZSTD_count:

; 569  :         pIn+=sizeof(size_t); pMatch+=sizeof(size_t);

	add	rcx, 8
	add	rdx, 8

; 570  :         while (pIn < pInLoopLimit) {

	cmp	rcx, r9
	jae	SHORT $LN3@ZSTD_count
$LL2@ZSTD_count:

; 571  :             size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rcx]
	xor	rax, QWORD PTR [rdx]

; 572  :             if (!diff) { pIn+=sizeof(size_t); pMatch+=sizeof(size_t); continue; }

	jne	SHORT $LN6@ZSTD_count
	add	rcx, 8
	add	rdx, 8
	cmp	rcx, r9
	jb	SHORT $LL2@ZSTD_count
$LN3@ZSTD_count:

; 575  :     }   }
; 576  :     if (MEM_64bits() && (pIn<(pInLimit-3)) && (MEM_read32(pMatch) == MEM_read32(pIn))) { pIn+=4; pMatch+=4; }

	lea	rax, QWORD PTR [r8-3]
	cmp	rcx, rax
	jae	SHORT $LN7@ZSTD_count
	mov	eax, DWORD PTR [rcx]
	cmp	DWORD PTR [rdx], eax
	jne	SHORT $LN7@ZSTD_count
	add	rcx, 4
	add	rdx, 4
$LN7@ZSTD_count:

; 577  :     if ((pIn<(pInLimit-1)) && (MEM_read16(pMatch) == MEM_read16(pIn))) { pIn+=2; pMatch+=2; }

	lea	rax, QWORD PTR [r8-1]
	cmp	rcx, rax
	jae	SHORT $LN8@ZSTD_count
	movzx	eax, WORD PTR [rcx]
	cmp	WORD PTR [rdx], ax
	jne	SHORT $LN8@ZSTD_count
	add	rcx, 2
	add	rdx, 2
$LN8@ZSTD_count:

; 578  :     if ((pIn<pInLimit) && (*pMatch == *pIn)) pIn++;

	cmp	rcx, r8
	jae	SHORT $LN9@ZSTD_count
	movzx	eax, BYTE PTR [rcx]
	cmp	BYTE PTR [rdx], al
	jne	SHORT $LN9@ZSTD_count
	inc	rcx
$LN9@ZSTD_count:

; 579  :     return (size_t)(pIn - pStart);

	sub	rcx, r10
	mov	rax, rcx

; 580  : }

	ret	0
$LN6@ZSTD_count:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rdx, rax
	mov	DWORD PTR r$1[rsp], 0
	je	SHORT $LN36@ZSTD_count
	shr	edx, 3

; 573  :             pIn += ZSTD_NbCommonBytes(diff);

	mov	eax, edx

; 574  :             return (size_t)(pIn - pStart);

	sub	rax, r10
	add	rax, rcx

; 580  : }

	ret	0
$LN36@ZSTD_count:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	xor	edx, edx

; 573  :             pIn += ZSTD_NbCommonBytes(diff);

	mov	eax, edx

; 574  :             return (size_t)(pIn - pStart);

	sub	rax, r10
	add	rax, rcx

; 580  : }

	ret	0
ZSTD_count ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
ip$ = 48
match$ = 56
iEnd$ = 64
mEnd$ = 72
iStart$ = 80
ZSTD_count_2segments PROC

; 589  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r10, rcx
	mov	rsi, r8
	sub	r10, rdx
	mov	rbx, r9
	add	r10, r9
	mov	r11, rdx
	cmp	r10, r8
	mov	rbp, rcx
	cmovb	r8, r10

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	call	ZSTD_count
	mov	rdi, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rax+r11]
	cmp	rcx, rbx
	jne	SHORT $LN1@ZSTD_count

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	rdx, QWORD PTR iStart$[rsp]
	lea	rcx, QWORD PTR [rax+rbp]
	mov	r8, rsi
	call	ZSTD_count
	add	rax, rdi
$LN1@ZSTD_count:

; 599  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ZSTD_count_2segments ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
u$ = 8
h$ = 16
ZSTD_hash4 PROC

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	eax, ecx, -1640531535			; 9e3779b1H
	mov	ecx, 32					; 00000020H
	sub	ecx, edx
	shr	eax, cl
	ret	0
ZSTD_hash4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
ptr$ = 8
h$ = 16
ZSTD_hash4Ptr PROC

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	eax, DWORD PTR [rcx], -1640531535	; 9e3779b1H
	mov	ecx, 32					; 00000020H
	sub	ecx, edx
	shr	rax, cl

; 611  : static size_t ZSTD_hash4Ptr(const void* ptr, U32 h) { return ZSTD_hash4(MEM_read32(ptr), h); }

	ret	0
ZSTD_hash4Ptr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
u$ = 8
h$ = 16
ZSTD_hash5 PROC

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
	imul	rax, rcx
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
ZSTD_hash5 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
p$ = 8
h$ = 16
ZSTD_hash5Ptr PROC

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rcx]
	mov	r8, -3523014627271114752		; cf1bbcdcbb000000H
	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl

; 615  : static size_t ZSTD_hash5Ptr(const void* p, U32 h) { return ZSTD_hash5(MEM_readLE64(p), h); }

	ret	0
ZSTD_hash5Ptr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
u$ = 8
h$ = 16
ZSTD_hash6 PROC

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H
	imul	rax, rcx
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
ZSTD_hash6 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
p$ = 8
h$ = 16
ZSTD_hash6Ptr PROC

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rcx]
	mov	r8, -3523014627193847808		; cf1bbcdcbf9b0000H
	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl

; 619  : static size_t ZSTD_hash6Ptr(const void* p, U32 h) { return ZSTD_hash6(MEM_readLE64(p), h); }

	ret	0
ZSTD_hash6Ptr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
u$ = 8
h$ = 16
ZSTD_hash7 PROC

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H
	imul	rax, rcx
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
ZSTD_hash7 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
p$ = 8
h$ = 16
ZSTD_hash7Ptr PROC

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rcx]
	mov	r8, -3523014627193167104		; cf1bbcdcbfa56300H
	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl

; 623  : static size_t ZSTD_hash7Ptr(const void* p, U32 h) { return ZSTD_hash7(MEM_readLE64(p), h); }

	ret	0
ZSTD_hash7Ptr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
u$ = 8
h$ = 16
ZSTD_hash8 PROC

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H
	imul	rax, rcx
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
ZSTD_hash8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
p$ = 8
h$ = 16
ZSTD_hash8Ptr PROC

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rcx]
	mov	r8, -3523014627327384477		; cf1bbcdcb7a56463H
	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl

; 627  : static size_t ZSTD_hash8Ptr(const void* p, U32 h) { return ZSTD_hash8(MEM_readLE64(p), h); }

	ret	0
ZSTD_hash8Ptr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
p$ = 8
hBits$ = 16
mls$ = 24
ZSTD_hashPtr PROC

; 631  :     switch(mls)

	sub	r8d, 5
	je	SHORT $LN5@ZSTD_hashP
	sub	r8d, 1
	je	SHORT $LN6@ZSTD_hashP
	sub	r8d, 1
	je	SHORT $LN7@ZSTD_hashP
	cmp	r8d, 1
	je	SHORT $LN8@ZSTD_hashP

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	eax, DWORD PTR [rcx], -1640531535	; 9e3779b1H
	mov	ecx, 32					; 00000020H

; 632  :     {
; 633  :     default:
; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);
; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);
; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);
; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);
; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);
; 639  :     }
; 640  : }

	sub	ecx, edx
	shr	rax, cl
	ret	0
$LN8@ZSTD_hashP:
	mov	rax, QWORD PTR [rcx]

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r8, -3523014627327384477		; cf1bbcdcb7a56463H

; 632  :     {
; 633  :     default:
; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);
; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);
; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);
; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);
; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);
; 639  :     }
; 640  : }

	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
$LN7@ZSTD_hashP:
	mov	rax, QWORD PTR [rcx]

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	r8, -3523014627193167104		; cf1bbcdcbfa56300H

; 632  :     {
; 633  :     default:
; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);
; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);
; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);
; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);
; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);
; 639  :     }
; 640  : }

	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
$LN6@ZSTD_hashP:
	mov	rax, QWORD PTR [rcx]

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	r8, -3523014627193847808		; cf1bbcdcbf9b0000H

; 632  :     {
; 633  :     default:
; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);
; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);
; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);
; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);
; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);
; 639  :     }
; 640  : }

	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
$LN5@ZSTD_hashP:
	mov	rax, QWORD PTR [rcx]

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	r8, -3523014627271114752		; cf1bbcdcbb000000H

; 632  :     {
; 633  :     default:
; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);
; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);
; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);
; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);
; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);
; 639  :     }
; 640  : }

	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
ZSTD_hashPtr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
ms$ = 8
current$ = 16
windowLog$ = 24
ZSTD_getLowestMatchIndex PROC

; 977  : {

	mov	rax, rcx

; 978  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, r8d
	mov	r8d, 1
	shl	r8d, cl

; 979  :     U32    const lowestValid = ms->window.lowLimit;

	mov	r9d, DWORD PTR [rax+28]

; 980  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;
; 981  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	ecx, DWORD PTR [rax+32]
	mov	eax, edx
	sub	edx, r8d
	sub	eax, r9d
	cmp	eax, r8d
	cmovbe	edx, r9d
	test	ecx, ecx

; 982  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	edx, r9d

; 983  :     return matchLowest;

	mov	eax, edx

; 984  : }

	ret	0
ZSTD_getLowestMatchIndex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
ms$ = 8
current$ = 16
windowLog$ = 24
ZSTD_getLowestPrefixIndex PROC

; 990  : {

	mov	rax, rcx

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, r8d
	mov	r8d, 1
	shl	r8d, cl

; 992  :     U32    const lowestValid = ms->window.dictLimit;

	mov	r9d, DWORD PTR [rax+24]

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;
; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	ecx, DWORD PTR [rax+32]
	mov	eax, edx
	sub	edx, r8d
	sub	eax, r9d
	cmp	eax, r8d
	cmovbe	edx, r9d
	test	ecx, ecx

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	edx, r9d

; 996  :     return matchLowest;

	mov	eax, edx

; 997  : }

	ret	0
ZSTD_getLowestPrefixIndex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$dead$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 642  :     {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, rdx
	mov	rsi, rcx

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rbx
	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 644  :     }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Format$ = 80
printf	PROC						; COMDAT

; 954  :     {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	rsi, QWORD PTR _Format$[rsp+8]

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	rbx, rax

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rsi
	mov	r8, rdi
	mov	rdx, rbx
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 959  :         __crt_va_end(_ArgList);
; 960  :         return _Result;
; 961  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
_TEXT	SEGMENT
iend$1$ = 32
offset$1$ = 40
dictIndexDelta$1$ = 44
current$1$ = 48
r$1 = 48
r$2 = 48
prefixLowestIndex$1$ = 52
tv4772 = 56
hashSmall$1$ = 64
prefixLowest$1$ = 72
dictStart$1$ = 80
dictEnd$1$ = 88
offsetSaved$1$ = 96
dictBase$1$ = 104
hashLong$1$ = 112
base$1$ = 120
tv4776 = 128
tv4751 = 136
tv4745 = 144
dictHashLong$1$ = 152
litLimit_w$1$ = 160
ilimit$1$ = 168
dictHashSmall$1$ = 176
tv4746 = 184
tv4789 = 272
ms$ = 272
seqStore$ = 280
rep$ = 288
offset_2$1$ = 296
r$3 = 296
r$4 = 296
src$ = 296
offset_1$1$ = 304
r$5 = 304
r$6 = 304
srcSize$ = 304
mls$ = 312
dictMode$ = 320
ZSTD_compressBlock_doubleFast_generic PROC

; 62   : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 200				; 000000c8H

; 68   :     const BYTE* const base = ms->window.base;

	mov	r10, QWORD PTR [rcx+8]
	mov	rsi, r9
	mov	rax, QWORD PTR [rcx+48]

; 72   :     const U32 endIndex = (U32)((size_t)(istart - base) + srcSize);

	sub	r9d, r10d
	mov	r12d, DWORD PTR [rcx+192]
	mov	rbx, rcx
	mov	r14d, DWORD PTR [rcx+188]
	mov	r11, r8
	mov	r8, QWORD PTR srcSize$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	edx, 1
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 72   :     const U32 endIndex = (U32)((size_t)(istart - base) + srcSize);

	add	r9d, r8d
	mov	QWORD PTR hashLong$1$[rsp], rax
	mov	rax, QWORD PTR [rcx+64]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [rcx+184]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 78   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	ebp, DWORD PTR [r11]
	mov	r13d, DWORD PTR [r11+4]
	mov	QWORD PTR hashSmall$1$[rsp], rax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r9d
	shl	edx, cl
	mov	ecx, DWORD PTR [rbx+24]

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r9d, edx
	sub	eax, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 68   :     const BYTE* const base = ms->window.base;

	mov	QWORD PTR base$1$[rsp], r10
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmp	eax, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 78   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	DWORD PTR offset_1$1$[rsp], ebp
	mov	DWORD PTR offset_2$1$[rsp], r13d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r9d, ecx
	cmp	DWORD PTR [rbx+32], 0

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r9d, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 76   :     const BYTE* const iend = istart + srcSize;

	add	r8, rsi

; 79   :     U32 offsetSaved = 0;

	xor	ecx, ecx
	mov	eax, r9d
	add	rax, r10
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	DWORD PTR prefixLowestIndex$1$[rsp], r9d
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 85   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?

	cmp	DWORD PTR dictMode$[rsp], 2
	mov	QWORD PTR prefixLowest$1$[rsp], rax
	lea	rax, QWORD PTR [r8-8]
	mov	QWORD PTR ilimit$1$[rsp], rax
	mov	rax, QWORD PTR [rbx+176]
	mov	QWORD PTR iend$1$[rsp], r8
	mov	DWORD PTR offsetSaved$1$[rsp], ecx
	jne	SHORT $LN51@ZSTD_compr

; 86   :                                      dms->hashTable : NULL;
; 87   :     const U32* const dictHashSmall = dictMode == ZSTD_dictMatchState ?
; 88   :                                      dms->chainTable : NULL;
; 89   :     const U32 dictStartIndex       = dictMode == ZSTD_dictMatchState ?
; 90   :                                      dms->window.dictLimit : 0;
; 91   :     const BYTE* const dictBase     = dictMode == ZSTD_dictMatchState ?

	mov	rdx, QWORD PTR [rax+8]

; 92   :                                      dms->window.base : NULL;
; 93   :     const BYTE* const dictStart    = dictMode == ZSTD_dictMatchState ?
; 94   :                                      dictBase + dictStartIndex : NULL;
; 95   :     const BYTE* const dictEnd      = dictMode == ZSTD_dictMatchState ?

	mov	r8, QWORD PTR [rax]
	mov	rcx, QWORD PTR [rax+48]

; 96   :                                      dms->window.nextSrc : NULL;
; 97   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	mov	edi, r8d

; 98   :                                      prefixLowestIndex - (U32)(dictEnd - dictBase) :
; 99   :                                      0;
; 100  :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?

	mov	r15d, DWORD PTR [rax+192]

; 101  :                                      dictCParams->hashLog : hBitsL;
; 102  :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?

	mov	ebp, DWORD PTR [rax+188]
	mov	QWORD PTR dictHashLong$1$[rsp], rcx
	mov	rcx, QWORD PTR [rax+64]
	mov	QWORD PTR dictHashSmall$1$[rsp], rcx
	mov	ecx, DWORD PTR [rax+24]
	add	rcx, rdx
	mov	QWORD PTR dictBase$1$[rsp], rdx
	mov	QWORD PTR dictStart$1$[rsp], rcx
	mov	ecx, edx
	sub	ecx, r8d
	mov	QWORD PTR dictEnd$1$[rsp], r8
	add	ecx, r9d
	jmp	SHORT $LN985@ZSTD_compr
$LN51@ZSTD_compr:

; 85   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?

	mov	QWORD PTR dictHashLong$1$[rsp], rcx

; 98   :                                      prefixLowestIndex - (U32)(dictEnd - dictBase) :
; 99   :                                      0;
; 100  :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?

	mov	edi, ecx
	mov	QWORD PTR dictHashSmall$1$[rsp], rcx
	mov	r15d, r12d
	mov	QWORD PTR dictBase$1$[rsp], rcx

; 101  :                                      dictCParams->hashLog : hBitsL;
; 102  :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?

	mov	ebp, r14d
	mov	QWORD PTR dictStart$1$[rsp], rcx
	mov	QWORD PTR dictEnd$1$[rsp], rcx
$LN985@ZSTD_compr:

; 103  :                                      dictCParams->chainLog : hBitsS;
; 104  :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 105  : 
; 106  :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 107  : 
; 108  : #ifdef _MSC_VER
; 109  :     static LARGE_INTEGER time1;
; 110  :     QueryPerformanceCounter(&time1);

	mov	DWORD PTR dictIndexDelta$1$[rsp], ecx
	lea	rcx, OFFSET FLAT:?time1@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	call	QWORD PTR __imp_QueryPerformanceCounter

; 111  : #else
; 112  :     static struct timespec time1;
; 113  : 	clock_gettime(CLOCK_MONOTONIC, &time1);
; 114  : #endif
; 115  : 
; 116  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 117  : 
; 118  :     /* if a dictionary is attached, it must be within window range */
; 119  :     if (dictMode == ZSTD_dictMatchState) {
; 120  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 121  :     }
; 122  : 
; 123  :     /* init */
; 124  :     ip += (dictAndPrefixLength == 0);

	mov	r9, QWORD PTR dictStart$1$[rsp]
	mov	eax, esi
	sub	eax, DWORD PTR prefixLowest$1$[rsp]
	sub	eax, r9d
	add	eax, edi
	mov	eax, 0
	sete	al

; 125  :     if (dictMode == ZSTD_noDict) {

	cmp	DWORD PTR dictMode$[rsp], 0
	lea	rdi, QWORD PTR [rax+rsi]
	jne	$LN977@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 992  :     U32    const lowestValid = ms->window.dictLimit;

	mov	r8d, DWORD PTR [rbx+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 126  :         U32 const current = (U32)(ip - base);

	mov	r9d, edi
	mov	r11, QWORD PTR base$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	edx, 1
	mov	ecx, DWORD PTR [rbx+184]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 126  :         U32 const current = (U32)(ip - base);

	sub	r9d, r11d

; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;

	mov	r11d, DWORD PTR offset_1$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r9d
	shl	edx, cl
	sub	eax, r8d

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	ecx, r9d
	sub	ecx, edx
	cmp	eax, edx
	cmovbe	ecx, r8d
	cmp	DWORD PTR [rbx+32], 0

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	ecx, r8d
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;

	mov	r8d, 0
	sub	r9d, ecx
	mov	eax, r8d
	cmp	r13d, r9d
	mov	ecx, r13d
	cmovbe	eax, r13d
	cmovbe	ecx, r8d
	mov	DWORD PTR offsetSaved$1$[rsp], ecx
	mov	r13d, eax
	mov	DWORD PTR offset_2$1$[rsp], eax
	cmp	r11d, r9d
	jbe	SHORT $LN23@ZSTD_compr
	mov	DWORD PTR offsetSaved$1$[rsp], r11d
	mov	r11d, r8d
	mov	DWORD PTR offset_1$1$[rsp], r8d
	mov	DWORD PTR offset_2$1$[rsp], eax
	jmp	SHORT $LN23@ZSTD_compr
$LN977@ZSTD_compr:

; 125  :     if (dictMode == ZSTD_noDict) {

	mov	r11d, DWORD PTR offset_1$1$[rsp]
$LN23@ZSTD_compr:

; 131  :     }
; 132  :     if (dictMode == ZSTD_dictMatchState) {
; 133  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 134  :          * disabling. */
; 135  :         assert(offset_1 <= dictAndPrefixLength);
; 136  :         assert(offset_2 <= dictAndPrefixLength);
; 137  :     }
; 138  : 
; 139  :     /* Main Search Loop */
; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	cmp	rdi, QWORD PTR ilimit$1$[rsp]
	jae	$LN3@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ebx, DWORD PTR mls$[rsp]
	mov	edx, 64					; 00000040H

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	ecx, 32					; 00000020H

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	eax, edx
	sub	eax, r12d

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	r13d, ecx
	sub	ecx, ebp

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	DWORD PTR tv4772[rsp], eax

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	sub	r13d, r14d

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	mov	QWORD PTR tv4746[rsp], rcx

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r12d, edx

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	mov	QWORD PTR tv4751[rsp], r13

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	sub	r12d, r15d
	mov	r10d, edx
	sub	r10d, r14d
	mov	DWORD PTR tv4776[rsp], r12d
	mov	r15d, edx
	mov	DWORD PTR tv4789[rsp], r10d
	sub	r15d, ebp
	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	DWORD PTR tv4745[rsp], r15d
	mov	rbp, -3523014627193167104		; cf1bbcdcbfa56300H
	npad	3
$LL2@ZSTD_compr:
	mov	r9, QWORD PTR [rdi]
	mov	rdx, r9
	imul	rdx, rcx
	mov	ecx, eax

; 631  :     switch(mls)

	mov	eax, ebx

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r14, rdx
	shr	r14, cl

; 631  :     switch(mls)

	sub	eax, 5
	je	$LN116@ZSTD_compr
	sub	eax, 1
	je	$LN117@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN118@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN119@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	r8d, r9d, -1640531535			; 9e3779b1H
	mov	rcx, r13

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r10, rdx

; 631  :     switch(mls)

	mov	eax, ebx

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	shr	r8, cl

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ecx, r12d
	shr	r10, cl

; 631  :     switch(mls)

	sub	eax, 5
	je	$LN984@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN983@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN176@ZSTD_compr
	cmp	eax, 1
	je	$LN177@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	rcx, QWORD PTR tv4746[rsp]
	imul	edx, r9d, -1640531535			; 9e3779b1H

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	$LN986@ZSTD_compr
$LN119@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ecx, r10d
	mov	r8, rdx
	shr	r8, cl

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	mov	r10, rdx
	mov	ecx, r12d
	shr	r10, cl
	jmp	SHORT $LN177@ZSTD_compr
$LN118@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	ecx, r10d
	mov	r8, r9
	imul	r8, rbp

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	r10, rdx

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	shr	r8, cl

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	ecx, r12d
	shr	r10, cl
$LN176@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rdx, r9
	imul	rdx, rbp

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN177@ZSTD_compr
$LN117@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 631  :     switch(mls)

	jmp	SHORT $LN997@ZSTD_compr
$LN983@ZSTD_compr:
	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN174@ZSTD_compr
$LN116@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN997@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 147  :         U32 const current = (U32)(ip-base);

	mov	ecx, r10d
	mov	r8, r9
	imul	r8, rax
	mov	r10, rdx
	shr	r8, cl
	mov	ecx, r12d
	shr	r10, cl
	jmp	SHORT $LN174@ZSTD_compr
$LN984@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN174@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 147  :         U32 const current = (U32)(ip-base);

	mov	rdx, r9
	imul	rdx, rax
$LN177@ZSTD_compr:
	mov	ecx, r15d
$LN986@ZSTD_compr:

; 148  :         U32 const matchIndexL = hashLong[h2];

	mov	rax, QWORD PTR hashLong$1$[rsp]
	mov	r12d, edi

; 149  :         U32 matchIndexS = hashSmall[h];
; 150  :         const BYTE* matchLong = base + matchIndexL;
; 151  :         const BYTE* match = base + matchIndexS;
; 152  :         const U32 repIndex = current + 1 - offset_1;
; 153  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState

	mov	r15d, DWORD PTR prefixLowestIndex$1$[rsp]
	shr	rdx, cl
	mov	rcx, QWORD PTR base$1$[rsp]
	mov	ebp, DWORD PTR [rax+r14*4]
	sub	r12d, ecx
	mov	rax, QWORD PTR hashSmall$1$[rsp]
	mov	DWORD PTR current$1$[rsp], r12d
	lea	r9, QWORD PTR [rcx+rbp]
	mov	r13d, DWORD PTR [rax+r8*4]
	lea	rbx, QWORD PTR [rcx+r13]
	mov	ecx, r12d
	sub	ecx, r11d
	inc	ecx
	cmp	DWORD PTR dictMode$[rsp], 2
	jne	SHORT $LN69@ZSTD_compr
	cmp	ecx, r15d
	jae	SHORT $LN69@ZSTD_compr
	mov	DWORD PTR [rax+r8*4], r12d
	mov	r11d, ecx
	mov	rax, QWORD PTR hashLong$1$[rsp]
	sub	r11d, DWORD PTR dictIndexDelta$1$[rsp]
	add	r11, QWORD PTR dictBase$1$[rsp]
	mov	DWORD PTR [rax+r14*4], r12d
	jmp	SHORT $LN952@ZSTD_compr
$LN69@ZSTD_compr:

; 154  :                             && repIndex < prefixLowestIndex) ?
; 155  :                                dictBase + (repIndex - dictIndexDelta) :
; 156  :                                base + repIndex;
; 157  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	r11d, ecx
	add	r11, QWORD PTR base$1$[rsp]
	mov	DWORD PTR [rax+r8*4], r12d
	mov	rax, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rax+r14*4], r12d

; 158  : 
; 159  :         /* check dictMatchState repcode */
; 160  :         if (dictMode == ZSTD_dictMatchState
; 161  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 162  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	eax, DWORD PTR dictMode$[rsp]
	cmp	eax, 2
	jne	$LN25@ZSTD_compr
$LN952@ZSTD_compr:
	mov	eax, r15d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN982@ZSTD_compr
	mov	eax, DWORD PTR [rdi+1]
	lea	r14, QWORD PTR [rdi+1]
	cmp	DWORD PTR [r11], eax
	jne	$LN982@ZSTD_compr

; 163  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	cmp	ecx, DWORD PTR prefixLowestIndex$1$[rsp]

; 164  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	lea	rbp, QWORD PTR [rdi+5]
	mov	r15, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, rbp
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 163  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	mov	rbx, r15
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, r15
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 163  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	cmovb	rbx, QWORD PTR dictEnd$1$[rsp]

; 164  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	add	r11, 4
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, r11

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	add	rcx, rbx
	cmp	rcx, r15
	cmovb	r8, rcx
	mov	rcx, rbp
	call	ZSTD_count
	mov	rdi, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	add	rax, r11
	cmp	rax, rbx
	jne	SHORT $LN199@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [rdi+rbp]
	mov	r8, r15
	call	ZSTD_count
	add	rdi, rax
$LN199@ZSTD_compr:

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	r13, QWORD PTR seqStore$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 164  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	lea	rdx, QWORD PTR [rdi+4]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	lea	rbx, QWORD PTR [r15-32]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 165  :             ip++;

	mov	rdi, r14

; 166  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	r14, rsi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 166  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	lea	r10, QWORD PTR [rdx-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r13+24]
	lea	r9, QWORD PTR [r14+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r9, rbx
	ja	SHORT $LN205@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r14, 16
	jbe	SHORT $LN227@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r13+24]
	add	rsi, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r14
	npad	8
$LL219@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]

; 289  :             COPY16(op, ip);

	lea	rsi, QWORD PTR [rsi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL219@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN227@ZSTD_compr
$LN205@ZSTD_compr:

; 424  :     if (ip <= ilimit_w) {

	cmp	rsi, rbx
	ja	SHORT $LN837@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	r8, rcx
	sub	r8, rsi
	add	r8, rbx
	sub	rsi, rcx
	npad	10
$LL236@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rcx+rsi]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, r8
	jb	SHORT $LL236@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, r8
	mov	rsi, rbx
$LN837@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rsi, r9
	jae	SHORT $LN227@ZSTD_compr
	sub	rcx, rsi
	npad	2
$LL876@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi]
	mov	BYTE PTR [rsi+rcx], al
	inc	rsi
	cmp	rsi, r9
	jb	SHORT $LL876@ZSTD_compr
$LN227@ZSTD_compr:

; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r13+24], r14
	mov	rcx, QWORD PTR [r13+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r14, 65535				; 0000ffffH
	jbe	SHORT $LN911@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r13+72], 1
	sub	rax, QWORD PTR [r13]
	sar	rax, 3
	mov	DWORD PTR [r13+76], eax
$LN911@ZSTD_compr:

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r14w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r13+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r13+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	r10, 65535				; 0000ffffH
	jbe	SHORT $LN912@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r13+72], 2
	sub	rax, QWORD PTR [r13]
	sar	rax, 3
	mov	DWORD PTR [r13+76], eax
$LN912@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 167  :             goto _match_stored;

	mov	ebp, DWORD PTR offset_2$1$[rsp]
	mov	r14, r15
	mov	r15d, DWORD PTR offset_1$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], r10w
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 167  :             goto _match_stored;

	jmp	$LN988@ZSTD_compr
$LN25@ZSTD_compr:

; 168  :         }
; 169  : 
; 170  :         /* check noDict repcode */
; 171  :         if ( dictMode == ZSTD_noDict
; 172  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {

	test	eax, eax
	jne	$LN26@ZSTD_compr
	mov	r14d, DWORD PTR offset_1$1$[rsp]
	lea	r11, QWORD PTR [rdi+1]
	xor	eax, eax
	mov	r8, rdi
	mov	ecx, eax
	sub	r8, r14
	mov	eax, DWORD PTR [r11]
	cmp	DWORD PTR [r8+1], eax
	sete	cl
	xor	eax, eax
	test	r14d, r14d
	setne	al
	test	ecx, eax
	je	$LN982@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	mov	r14, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 173  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	lea	rcx, QWORD PTR [r8+5]
	add	rdi, 5
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 563  :     const BYTE* const pStart = pIn;

	mov	r8, rdi

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	lea	rdx, QWORD PTR [r14-7]

; 565  : 
; 566  :     if (pIn < pInLoopLimit) {

	cmp	rdi, rdx
	jae	SHORT $LN244@ZSTD_compr

; 567  :         { size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rdi]
	xor	rax, QWORD PTR [rcx]

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	je	SHORT $LN246@ZSTD_compr

; 501  :             unsigned long r = 0;

	xor	ebp, ebp

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rax
	mov	DWORD PTR r$2[rsp], ebp
	je	SHORT $LN261@ZSTD_compr
	shr	eax, 3

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	edx, eax
	jmp	SHORT $LN242@ZSTD_compr
$LN261@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	eax, ebp

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	edx, eax
	jmp	SHORT $LN242@ZSTD_compr
$LN246@ZSTD_compr:

; 569  :         pIn+=sizeof(size_t); pMatch+=sizeof(size_t);

	add	rdi, 8
	add	rcx, 8

; 570  :         while (pIn < pInLoopLimit) {

	cmp	rdi, rdx
	jae	SHORT $LN244@ZSTD_compr
$LL243@ZSTD_compr:

; 571  :             size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rdi]
	xor	rax, QWORD PTR [rcx]

; 572  :             if (!diff) { pIn+=sizeof(size_t); pMatch+=sizeof(size_t); continue; }

	jne	$LN247@ZSTD_compr
	add	rdi, 8
	add	rcx, 8
	cmp	rdi, rdx
	jb	SHORT $LL243@ZSTD_compr
$LN244@ZSTD_compr:

; 575  :     }   }
; 576  :     if (MEM_64bits() && (pIn<(pInLimit-3)) && (MEM_read32(pMatch) == MEM_read32(pIn))) { pIn+=4; pMatch+=4; }

	lea	rax, QWORD PTR [r14-3]
	cmp	rdi, rax
	jae	SHORT $LN248@ZSTD_compr
	mov	eax, DWORD PTR [rdi]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN248@ZSTD_compr
	add	rdi, 4
	add	rcx, 4
$LN248@ZSTD_compr:

; 577  :     if ((pIn<(pInLimit-1)) && (MEM_read16(pMatch) == MEM_read16(pIn))) { pIn+=2; pMatch+=2; }

	lea	rax, QWORD PTR [r14-1]
	cmp	rdi, rax
	jae	SHORT $LN249@ZSTD_compr
	movzx	eax, WORD PTR [rdi]
	cmp	WORD PTR [rcx], ax
	jne	SHORT $LN249@ZSTD_compr
	add	rdi, 2
	add	rcx, 2
$LN249@ZSTD_compr:

; 578  :     if ((pIn<pInLimit) && (*pMatch == *pIn)) pIn++;

	cmp	rdi, r14
	jae	SHORT $LN250@ZSTD_compr
	movzx	eax, BYTE PTR [rdi]
	cmp	BYTE PTR [rcx], al
	jne	SHORT $LN250@ZSTD_compr
	inc	rdi
$LN250@ZSTD_compr:

; 579  :     return (size_t)(pIn - pStart);

	mov	rdx, rdi
	sub	rdx, r8
$LN242@ZSTD_compr:

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	r13, QWORD PTR seqStore$[rsp]
	lea	rbx, QWORD PTR [r14-32]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 173  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	add	rdx, 4
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 174  :             ip++;

	mov	rdi, r11

; 175  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	r11, rsi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r13+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 175  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	lea	r10, QWORD PTR [rdx-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r9, QWORD PTR [r11+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r9, rbx
	ja	SHORT $LN286@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r11, 16
	jbe	$LN308@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r13+24]
	add	rsi, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r11
	npad	12
$LL300@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]

; 289  :             COPY16(op, ip);

	lea	rsi, QWORD PTR [rsi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL300@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN308@ZSTD_compr
$LN247@ZSTD_compr:

; 501  :             unsigned long r = 0;

	xor	ebp, ebp

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rcx, rax
	mov	DWORD PTR r$1[rsp], ebp
	je	SHORT $LN277@ZSTD_compr
	shr	ecx, 3

; 574  :             return (size_t)(pIn - pStart);

	mov	edx, ecx
	sub	rdx, r8
	add	rdx, rdi
	jmp	$LN242@ZSTD_compr
$LN277@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	ecx, ebp

; 574  :             return (size_t)(pIn - pStart);

	mov	edx, ecx
	sub	rdx, r8
	add	rdx, rdi
	jmp	$LN242@ZSTD_compr
$LN286@ZSTD_compr:

; 424  :     if (ip <= ilimit_w) {

	cmp	rsi, rbx
	ja	SHORT $LN841@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	r8, rcx
	sub	r8, rsi
	add	r8, rbx
	sub	rsi, rcx
	npad	15
$LL317@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rcx+rsi]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, r8
	jb	SHORT $LL317@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, r8
	mov	rsi, rbx
$LN841@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rsi, r9
	jae	SHORT $LN308@ZSTD_compr
	sub	rcx, rsi
	npad	2
$LL878@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi]
	mov	BYTE PTR [rsi+rcx], al
	inc	rsi
	cmp	rsi, r9
	jb	SHORT $LL878@ZSTD_compr
$LN308@ZSTD_compr:

; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r13+24], r11
	mov	rcx, QWORD PTR [r13+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r11, 65535				; 0000ffffH
	jbe	SHORT $LN913@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r13+72], 1
	sub	rax, QWORD PTR [r13]
	sar	rax, 3
	mov	DWORD PTR [r13+76], eax
$LN913@ZSTD_compr:

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r11w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r13+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r13+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	r10, 65535				; 0000ffffH
	jbe	SHORT $LN914@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r13+72], 2
	sub	rax, QWORD PTR [r13]
	sar	rax, 3
	mov	DWORD PTR [r13+76], eax
$LN914@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 176  :             goto _match_stored;

	mov	ebp, DWORD PTR offset_2$1$[rsp]
	mov	r15d, DWORD PTR offset_1$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], r10w
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 176  :             goto _match_stored;

	jmp	$LN988@ZSTD_compr
$LN982@ZSTD_compr:

; 177  :         }
; 178  : 
; 179  :         if (matchIndexL > prefixLowestIndex) {

	mov	eax, DWORD PTR dictMode$[rsp]
$LN26@ZSTD_compr:
	cmp	ebp, r15d
	jbe	$LN27@ZSTD_compr

; 181  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [rdi]
	cmp	QWORD PTR [r9], rax
	jne	$LN968@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	mov	r14, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 182  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	lea	rcx, QWORD PTR [rdi+8]
	lea	rdx, QWORD PTR [r9+8]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 563  :     const BYTE* const pStart = pIn;

	mov	r10, rcx

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	lea	r8, QWORD PTR [r14-7]

; 565  : 
; 566  :     if (pIn < pInLoopLimit) {

	cmp	rcx, r8
	jae	SHORT $LN325@ZSTD_compr

; 567  :         { size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rdx]
	xor	rax, QWORD PTR [rcx]

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	je	SHORT $LN327@ZSTD_compr

; 501  :             unsigned long r = 0;

	xor	r11d, r11d

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rax
	mov	DWORD PTR r$4[rsp], r11d
	je	SHORT $LN342@ZSTD_compr
	shr	eax, 3

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	edx, eax
	jmp	SHORT $LN323@ZSTD_compr
$LN342@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	eax, r11d

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	edx, eax
	jmp	SHORT $LN323@ZSTD_compr
$LN327@ZSTD_compr:

; 569  :         pIn+=sizeof(size_t); pMatch+=sizeof(size_t);

	add	rcx, 8
	add	rdx, 8

; 570  :         while (pIn < pInLoopLimit) {

	cmp	rcx, r8
	jae	SHORT $LN325@ZSTD_compr
	npad	5
$LL324@ZSTD_compr:

; 571  :             size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rdx]
	xor	rax, QWORD PTR [rcx]

; 572  :             if (!diff) { pIn+=sizeof(size_t); pMatch+=sizeof(size_t); continue; }

	jne	$LN328@ZSTD_compr
	add	rcx, 8
	add	rdx, 8
	cmp	rcx, r8
	jb	SHORT $LL324@ZSTD_compr
$LN325@ZSTD_compr:

; 575  :     }   }
; 576  :     if (MEM_64bits() && (pIn<(pInLimit-3)) && (MEM_read32(pMatch) == MEM_read32(pIn))) { pIn+=4; pMatch+=4; }

	lea	rax, QWORD PTR [r14-3]
	cmp	rcx, rax
	jae	SHORT $LN329@ZSTD_compr
	mov	eax, DWORD PTR [rcx]
	cmp	DWORD PTR [rdx], eax
	jne	SHORT $LN329@ZSTD_compr
	add	rcx, 4
	add	rdx, 4
$LN329@ZSTD_compr:

; 577  :     if ((pIn<(pInLimit-1)) && (MEM_read16(pMatch) == MEM_read16(pIn))) { pIn+=2; pMatch+=2; }

	lea	rax, QWORD PTR [r14-1]
	cmp	rcx, rax
	jae	SHORT $LN330@ZSTD_compr
	movzx	eax, WORD PTR [rcx]
	cmp	WORD PTR [rdx], ax
	jne	SHORT $LN330@ZSTD_compr
	add	rcx, 2
	add	rdx, 2
$LN330@ZSTD_compr:

; 578  :     if ((pIn<pInLimit) && (*pMatch == *pIn)) pIn++;

	cmp	rcx, r14
	jae	SHORT $LN331@ZSTD_compr
	movzx	eax, BYTE PTR [rcx]
	cmp	BYTE PTR [rdx], al
	jne	SHORT $LN331@ZSTD_compr
	inc	rcx
$LN331@ZSTD_compr:

; 579  :     return (size_t)(pIn - pStart);

	mov	rdx, rcx
	sub	rdx, r10
	xor	r11d, r11d
$LN323@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 184  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r12, QWORD PTR prefixLowest$1$[rsp]
	add	rdx, 8
	mov	ecx, r11d
	mov	eax, r11d
	mov	r10d, edi
	sub	r10d, r9d
	cmp	r9, r12
	mov	DWORD PTR offset$1$[rsp], r10d
	seta	cl
	cmp	rdi, rsi
	seta	al
	test	ecx, eax
	je	$_match_found$999
	npad	1
$LL4@ZSTD_compr:
	movzx	eax, BYTE PTR [r9-1]
	lea	r8, QWORD PTR [rdi-1]
	dec	r9
	cmp	BYTE PTR [r8], al
	jne	$_match_found$999
	inc	rdx
	mov	ecx, r11d
	cmp	r9, r12
	mov	eax, r11d
	mov	rdi, r8
	seta	cl
	cmp	r8, rsi
	seta	al
	test	ecx, eax
	jne	SHORT $LL4@ZSTD_compr

; 185  :                 goto _match_found;

	jmp	$_match_found$999
$LN328@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 501  :             unsigned long r = 0;

	xor	r11d, r11d

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rdx, rax
	mov	DWORD PTR r$3[rsp], r11d
	je	SHORT $LN358@ZSTD_compr
	shr	edx, 3

; 574  :             return (size_t)(pIn - pStart);

	sub	rdx, r10
	add	rdx, rcx
	jmp	$LN323@ZSTD_compr
$LN358@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	edx, r11d

; 574  :             return (size_t)(pIn - pStart);

	sub	rdx, r10
	add	rdx, rcx
	jmp	$LN323@ZSTD_compr
$LN27@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 187  :         } else if (dictMode == ZSTD_dictMatchState) {

	mov	r8, QWORD PTR dictBase$1$[rsp]
	cmp	eax, 2
	jne	$LN969@ZSTD_compr

; 188  :             /* check dictMatchState long match */
; 189  :             U32 const dictMatchIndexL = dictHashLong[dictHL];

	mov	rcx, QWORD PTR dictHashLong$1$[rsp]
	mov	r15d, DWORD PTR [rcx+r10*4]

; 190  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;
; 191  :             assert(dictMatchL < dictEnd);
; 192  : 
; 193  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {

	mov	r10, QWORD PTR dictStart$1$[rsp]
	lea	r14, QWORD PTR [r8+r15]
	cmp	r14, r10
	jbe	$LN31@ZSTD_compr
	mov	rax, QWORD PTR [rdi]
	cmp	QWORD PTR [r14], rax
	jne	$LN979@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r13, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 194  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	lea	rbp, QWORD PTR [rdi+8]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, QWORD PTR dictEnd$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 194  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	lea	r11, QWORD PTR [r14+8]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rax, rbp
	mov	r8, r13
	sub	rax, r11

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	add	rcx, rax
	cmp	rcx, r13
	cmovb	r8, rcx
	mov	rcx, rbp
	call	ZSTD_count
	mov	rbx, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	add	rax, r11
	cmp	rax, QWORD PTR dictEnd$1$[rsp]
	jne	SHORT $LN366@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [rbx+rbp]
	mov	r8, r13
	call	ZSTD_count
	add	rbx, rax
$LN366@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 195  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);

	mov	r10d, r12d
	lea	rdx, QWORD PTR [rbx+8]
	sub	r10d, r15d
	sub	r10d, DWORD PTR dictIndexDelta$1$[rsp]
	mov	DWORD PTR offset$1$[rsp], r10d

; 196  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */

	cmp	rdi, rsi
	jbe	SHORT $LN962@ZSTD_compr
	mov	r9, QWORD PTR dictStart$1$[rsp]
	npad	6
$LL6@ZSTD_compr:
	movzx	eax, BYTE PTR [r14-1]
	lea	r8, QWORD PTR [rdi-1]
	dec	r14
	cmp	BYTE PTR [r8], al
	jne	SHORT $LN962@ZSTD_compr
	xor	eax, eax
	inc	rdx
	cmp	r8, rsi
	mov	ecx, eax
	mov	rdi, r8
	seta	cl
	cmp	r14, r9
	seta	al
	test	ecx, eax
	jne	SHORT $LL6@ZSTD_compr
$LN962@ZSTD_compr:

; 260  :         }
; 261  : 
; 262  :         /* fall-through */
; 263  : 
; 264  : _match_found:
; 265  :         offset_2 = offset_1;

	mov	r14, r13
$_match_found$999:
	mov	ebp, DWORD PTR offset_1$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	lea	rbx, QWORD PTR [r14-32]

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	r13, QWORD PTR seqStore$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	r11, QWORD PTR [rdx-3]
	mov	DWORD PTR offset_1$1$[rsp], r10d
	mov	r15d, r10d
	mov	r10, rdi
	mov	DWORD PTR offset_2$1$[rsp], ebp
	sub	r10, rsi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbx

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r13+24]
	lea	r9, QWORD PTR [r10+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r9, rbx
	ja	$LN440@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r10, 16
	jbe	$LN462@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r13+24]
	add	rsi, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r10
	npad	7
$LL454@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]

; 289  :             COPY16(op, ip);

	lea	rsi, QWORD PTR [rsi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL454@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	$LN462@ZSTD_compr
$LN968@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 181  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	r10, QWORD PTR dictStart$1$[rsp]
	mov	r8, QWORD PTR dictBase$1$[rsp]
$LN979@ZSTD_compr:

; 197  :                 goto _match_found;
; 198  :         }   }
; 199  : 
; 200  :         if (matchIndexS > prefixLowestIndex) {

	mov	eax, DWORD PTR dictMode$[rsp]
$LN31@ZSTD_compr:
	mov	r9d, DWORD PTR prefixLowestIndex$1$[rsp]
	cmp	r13d, r9d
	jbe	$LN32@ZSTD_compr

; 201  :             /* check prefix short match */
; 202  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [rdi]
	mov	rbp, rbx
	cmp	DWORD PTR [rbx], eax
	je	$_search_next_long$1000
$LN36@ZSTD_compr:

; 212  :                 goto _search_next_long;
; 213  :         }   }
; 214  : 
; 215  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, rdi
	inc	rdi
	sub	rax, rsi
	sar	rax, 8
	add	rdi, rax
$LN976@ZSTD_compr:

; 131  :     }
; 132  :     if (dictMode == ZSTD_dictMatchState) {
; 133  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 134  :          * disabling. */
; 135  :         assert(offset_1 <= dictAndPrefixLength);
; 136  :         assert(offset_2 <= dictAndPrefixLength);
; 137  :     }
; 138  : 
; 139  :     /* Main Search Loop */
; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r11d, DWORD PTR offset_1$1$[rsp]
$LN875@ZSTD_compr:
	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	r10d, DWORD PTR tv4789[rsp]
	mov	rbp, -3523014627193167104		; cf1bbcdcbfa56300H
	mov	ebx, DWORD PTR mls$[rsp]
	mov	r13, QWORD PTR tv4751[rsp]
	mov	eax, DWORD PTR tv4772[rsp]
	mov	r12d, DWORD PTR tv4776[rsp]
	mov	r15d, DWORD PTR tv4745[rsp]
	cmp	rdi, QWORD PTR ilimit$1$[rsp]
	jb	$LL2@ZSTD_compr
	mov	r13d, DWORD PTR offset_2$1$[rsp]
$LN3@ZSTD_compr:

; 324  : 
; 325  :     /* save reps for next block */
; 326  :     rep[0] = offset_1 ? offset_1 : offsetSaved;

	mov	ecx, DWORD PTR offsetSaved$1$[rsp]
	test	r11d, r11d
	mov	rdx, QWORD PTR rep$[rsp]
	mov	eax, ecx
	cmovne	eax, r11d

; 327  :     rep[1] = offset_2 ? offset_2 : offsetSaved;

	test	r13d, r13d
	cmovne	ecx, r13d
	mov	DWORD PTR [rdx+4], ecx

; 328  : 
; 329  : #ifdef _MSC_VER
; 330  :     static LARGE_INTEGER time2;
; 331  :     QueryPerformanceCounter(&time2);

	lea	rcx, OFFSET FLAT:?time2@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	mov	DWORD PTR [rdx], eax
	call	QWORD PTR __imp_QueryPerformanceCounter

; 332  :     printf("%I64u\n", time2.QuadPart - time1.QuadPart);

	mov	rdx, QWORD PTR ?time2@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	lea	rcx, OFFSET FLAT:$SG4294965530
	sub	rdx, QWORD PTR ?time1@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	call	printf

; 333  : #else
; 334  :     static struct timespec time2;
; 335  : 	clock_gettime(CLOCK_MONOTONIC, &time2);
; 336  :     printf("%llu\n", (time2.tv_sec * 10000000 + time2.tv_nsec / 100) - (time1.tv_sec * 10000000 + time1.tv_nsec / 100));
; 337  : #endif
; 338  : 
; 339  :     /* Return the last literals size */
; 340  :     return (size_t)(iend - anchor);

	mov	rax, QWORD PTR iend$1$[rsp]
	sub	rax, rsi

; 341  : }

	add	rsp, 200				; 000000c8H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN969@ZSTD_compr:

; 187  :         } else if (dictMode == ZSTD_dictMatchState) {

	mov	r10, QWORD PTR dictStart$1$[rsp]
	jmp	$LN31@ZSTD_compr
$LN32@ZSTD_compr:

; 203  :                 goto _search_next_long;
; 204  :             }
; 205  :         } else if (dictMode == ZSTD_dictMatchState) {

	cmp	eax, 2
	jne	$LN36@ZSTD_compr

; 206  :             /* check dictMatchState short match */
; 207  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];

	mov	rax, QWORD PTR dictHashSmall$1$[rsp]

; 208  :             match = dictBase + dictMatchIndexS;
; 209  :             matchIndexS = dictMatchIndexS + dictIndexDelta;

	mov	r13d, DWORD PTR dictIndexDelta$1$[rsp]
	mov	ecx, DWORD PTR [rax+rdx*4]
	add	r13d, ecx
	lea	rbx, QWORD PTR [r8+rcx]

; 210  : 
; 211  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {

	cmp	rbx, r10
	jbe	$LN36@ZSTD_compr
	mov	eax, DWORD PTR [rdi]
	mov	rbp, rbx
	cmp	DWORD PTR [rbx], eax
	jne	$LN36@ZSTD_compr
$_search_next_long$1000:
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ecx, DWORD PTR tv4772[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 223  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	lea	r15, QWORD PTR [rdi+1]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r8, QWORD PTR [r15]
	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 225  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r14, QWORD PTR hashLong$1$[rsp]

; 226  :             const BYTE* matchL3 = base + matchIndexL3;

	mov	r11, QWORD PTR base$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	r8, rax
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 227  :             hashLong[hl3] = current + 1;

	lea	eax, DWORD PTR [r12+1]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rdx, r8
	shr	rdx, cl
	mov	ecx, DWORD PTR tv4776[rsp]
	shr	r8, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 225  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	ecx, DWORD PTR [r14+rdx*4]

; 226  :             const BYTE* matchL3 = base + matchIndexL3;

	add	r11, rcx

; 227  :             hashLong[hl3] = current + 1;

	mov	DWORD PTR [r14+rdx*4], eax

; 228  : 
; 229  :             /* check prefix long +1 match */
; 230  :             if (matchIndexL3 > prefixLowestIndex) {

	cmp	ecx, r9d
	jbe	$LN37@ZSTD_compr

; 231  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	rax, QWORD PTR [r15]
	cmp	QWORD PTR [r11], rax
	jne	$LN978@ZSTD_compr

; 232  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r14, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [r11+8]
	mov	r8, r14
	lea	rcx, QWORD PTR [rdi+9]
	call	ZSTD_count

; 233  :                     ip++;
; 234  :                     offset = (U32)(ip-matchL3);
; 235  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r12, QWORD PTR prefixLowest$1$[rsp]
	xor	r9d, r9d
	mov	ecx, r9d
	mov	r10d, r15d
	sub	r10d, r11d
	mov	rdi, r15
	cmp	r11, r12
	mov	DWORD PTR offset$1$[rsp], r10d
	lea	rdx, QWORD PTR [rax+8]
	mov	eax, r9d
	seta	cl
	cmp	r15, rsi
	seta	al
	test	ecx, eax
	je	$_match_found$999
	npad	10
$LL8@ZSTD_compr:
	movzx	eax, BYTE PTR [r11-1]
	lea	r8, QWORD PTR [rdi-1]
	dec	r11
	cmp	BYTE PTR [r8], al
	jne	$_match_found$999
	inc	rdx
	mov	ecx, r9d
	cmp	r11, r12
	mov	eax, r9d
	mov	rdi, r8
	seta	cl
	cmp	r8, rsi
	seta	al
	test	ecx, eax
	jne	SHORT $LL8@ZSTD_compr

; 236  :                     goto _match_found;

	jmp	$_match_found$999
$LN37@ZSTD_compr:

; 237  :                 }
; 238  :             } else if (dictMode == ZSTD_dictMatchState) {

	mov	ecx, DWORD PTR dictMode$[rsp]
	cmp	ecx, 2
	jne	$LN42@ZSTD_compr

; 239  :                 /* check dict long +1 match */
; 240  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];

	mov	rax, QWORD PTR dictHashLong$1$[rsp]
	mov	r12d, DWORD PTR [rax+r8*4]

; 241  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;

	mov	r14d, r12d
	add	r14, QWORD PTR dictBase$1$[rsp]

; 242  :                 assert(dictMatchL3 < dictEnd);
; 243  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {

	cmp	r14, r10
	jbe	$LN954@ZSTD_compr
	mov	rax, QWORD PTR [r15]
	cmp	QWORD PTR [r14], rax
	jne	$LN954@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rbp, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 244  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;

	lea	r11, QWORD PTR [r14+8]
	add	rdi, 9
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, rbp
	mov	rcx, rdi

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	sub	rcx, r11
	add	rcx, QWORD PTR dictEnd$1$[rsp]
	cmp	rcx, rbp
	cmovb	r8, rcx
	mov	rcx, rdi
	call	ZSTD_count
	mov	rbx, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	add	rax, r11
	cmp	rax, QWORD PTR dictEnd$1$[rsp]
	jne	SHORT $LN429@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [rbx+rdi]
	mov	r8, rbp
	call	ZSTD_count
	add	rbx, rax
$LN429@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 246  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);

	mov	r10d, DWORD PTR current$1$[rsp]
	lea	rdx, QWORD PTR [rbx+8]
	sub	r10d, r12d
	mov	rdi, r15
	sub	r10d, DWORD PTR dictIndexDelta$1$[rsp]
	inc	r10d
	mov	DWORD PTR offset$1$[rsp], r10d

; 247  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */

	cmp	r15, rsi
	jbe	SHORT $LN959@ZSTD_compr
	mov	r9, QWORD PTR dictStart$1$[rsp]
	npad	13
$LL10@ZSTD_compr:
	movzx	eax, BYTE PTR [r14-1]
	lea	r8, QWORD PTR [rdi-1]
	dec	r14
	cmp	BYTE PTR [r8], al
	jne	SHORT $LN959@ZSTD_compr
	xor	eax, eax
	inc	rdx
	cmp	r8, rsi
	mov	ecx, eax
	mov	rdi, r8
	seta	cl
	cmp	r14, r9
	seta	al
	test	ecx, eax
	jne	SHORT $LL10@ZSTD_compr
$LN959@ZSTD_compr:

; 260  :         }
; 261  : 
; 262  :         /* fall-through */
; 263  : 
; 264  : _match_found:
; 265  :         offset_2 = offset_1;

	mov	r14, rbp
	jmp	$_match_found$999
$LN954@ZSTD_compr:

; 248  :                     goto _match_found;
; 249  :         }   }   }
; 250  : 
; 251  :         /* if no long +1 match, explore the short match we found */
; 252  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {

	mov	r12d, DWORD PTR current$1$[rsp]
	jmp	SHORT $LN41@ZSTD_compr
$LN978@ZSTD_compr:

; 231  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	ecx, DWORD PTR dictMode$[rsp]
$LN41@ZSTD_compr:

; 248  :                     goto _match_found;
; 249  :         }   }   }
; 250  : 
; 251  :         /* if no long +1 match, explore the short match we found */
; 252  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {

	cmp	ecx, 2
	jne	$LN42@ZSTD_compr
	cmp	r13d, r9d
	jae	$LN42@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r15, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;

	lea	rbp, QWORD PTR [rdi+4]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, QWORD PTR dictEnd$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;

	lea	r11, QWORD PTR [rbx+4]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rax, rbp
	mov	r8, r15
	sub	rax, r11

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	add	rcx, rax
	cmp	rcx, r15
	cmovb	r8, rcx
	mov	rcx, rbp
	call	ZSTD_count
	mov	r14, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	add	rax, r11
	cmp	rax, QWORD PTR dictEnd$1$[rsp]
	jne	SHORT $LN434@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [r14+rbp]
	mov	r8, r15
	call	ZSTD_count
	add	r14, rax
$LN434@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 255  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r9, QWORD PTR dictStart$1$[rsp]
	lea	rdx, QWORD PTR [r14+4]
	xor	r11d, r11d
	mov	r10d, r12d
	sub	r10d, r13d
	mov	ecx, r11d
	cmp	rbx, r9
	mov	DWORD PTR offset$1$[rsp], r10d
	mov	eax, r11d
	seta	cl
	cmp	rdi, rsi
	seta	al
	test	ecx, eax
	je	SHORT $LN957@ZSTD_compr
	npad	15
$LL12@ZSTD_compr:
	movzx	eax, BYTE PTR [rbx-1]
	lea	r8, QWORD PTR [rdi-1]
	dec	rbx
	cmp	BYTE PTR [r8], al
	jne	SHORT $LN957@ZSTD_compr
	inc	rdx
	mov	ecx, r11d
	cmp	rbx, r9
	mov	eax, r11d
	mov	rdi, r8
	seta	cl
	cmp	r8, rsi
	seta	al
	test	ecx, eax
	jne	SHORT $LL12@ZSTD_compr
$LN957@ZSTD_compr:

; 260  :         }
; 261  : 
; 262  :         /* fall-through */
; 263  : 
; 264  : _match_found:
; 265  :         offset_2 = offset_1;

	mov	r14, r15
	jmp	$_match_found$999
$LN42@ZSTD_compr:

; 256  :         } else {
; 257  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	mov	r14, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+4]
	mov	r8, r14
	lea	rcx, QWORD PTR [rdi+4]
	call	ZSTD_count

; 258  :             offset = (U32)(ip - match);
; 259  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r12, QWORD PTR prefixLowest$1$[rsp]
	xor	r9d, r9d
	mov	ecx, r9d
	mov	r10d, edi
	sub	r10d, ebp
	cmp	rbp, r12
	mov	DWORD PTR offset$1$[rsp], r10d
	lea	rdx, QWORD PTR [rax+4]
	mov	eax, r9d
	seta	cl
	cmp	rdi, rsi
	seta	al
	test	ecx, eax
	je	$_match_found$999
	npad	6
$LL14@ZSTD_compr:
	movzx	eax, BYTE PTR [rbx-1]
	lea	r8, QWORD PTR [rdi-1]
	dec	rbx
	cmp	BYTE PTR [r8], al
	jne	$_match_found$999
	inc	rdx
	mov	ecx, r9d
	cmp	rbx, r12
	mov	eax, r9d
	mov	rdi, r8
	seta	cl
	cmp	r8, rsi
	seta	al
	test	ecx, eax
	jne	SHORT $LL14@ZSTD_compr

; 255  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	jmp	$_match_found$999
$LN440@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 424  :     if (ip <= ilimit_w) {

	cmp	rsi, rbx
	ja	SHORT $LN851@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	r8, rcx
	sub	r8, rsi
	add	r8, rbx
	sub	rsi, rcx
	npad	10
$LL471@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rcx+rsi]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, r8
	jb	SHORT $LL471@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, r8
	mov	rsi, rbx
$LN851@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rsi, r9
	jae	SHORT $LN462@ZSTD_compr
	sub	rcx, rsi
	npad	2
$LL880@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi]
	mov	BYTE PTR [rsi+rcx], al
	inc	rsi
	cmp	rsi, r9
	jb	SHORT $LL880@ZSTD_compr
$LN462@ZSTD_compr:

; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r13+24], r10
	mov	rcx, QWORD PTR [r13+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r10, 65535				; 0000ffffH
	jbe	SHORT $LN915@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r13+72], 1
	sub	rax, QWORD PTR [r13]
	sar	rax, 3
	mov	DWORD PTR [r13+76], eax
$LN915@ZSTD_compr:

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r10w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	ecx, DWORD PTR offset$1$[rsp]
	mov	rax, QWORD PTR [r13+8]
	add	ecx, 3
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [r13+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	r11, 65535				; 0000ffffH
	jbe	SHORT $LN916@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r13+72], 2
	sub	rax, QWORD PTR [r13]
	sar	rax, 3
	mov	DWORD PTR [r13+76], eax
$LN916@ZSTD_compr:
	mov	r12d, DWORD PTR current$1$[rsp]

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], r11w
$LN988@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 272  :         ip += mLength;

	add	QWORD PTR [r13+8], 8
$_match_stored$1001:
	add	rdi, rdx

; 273  :         anchor = ip;

	lea	r11, QWORD PTR [r14-8]
	mov	rsi, rdi
	cmp	rdi, r11

; 274  : 
; 275  :         if (ip <= ilimit) {

	ja	$LN976@ZSTD_compr

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r11, QWORD PTR hashLong$1$[rsp]
	lea	r8d, DWORD PTR [r12+2]
	mov	r12, QWORD PTR base$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rsi, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	ecx, DWORD PTR tv4772[rsp]
	mov	edx, edi
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r9d, r8d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	sub	edx, r12d
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	add	r9, r12

; 280  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	sub	edx, 2
	mov	r10d, edi
	sub	r10d, r12d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	imul	rax, rsi
	shr	rax, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	DWORD PTR [r11+rax*4], r8d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi-2]
	imul	rax, rsi
	shr	rax, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 280  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	DWORD PTR [r11+rax*4], edx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	r11d, DWORD PTR mls$[rsp]
	mov	eax, r11d
	sub	eax, 5
	je	$LN539@ZSTD_compr
	sub	eax, 1
	je	$LN540@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN541@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN542@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [r9], -1640531535	; 9e3779b1H

; 631  :     switch(mls)

	mov	eax, r11d

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	rcx, QWORD PTR tv4751[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 281  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r9, QWORD PTR hashSmall$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	r11d, DWORD PTR tv4789[rsp]

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	shr	rdx, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 281  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	DWORD PTR [r9+rdx*4], r8d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	sub	eax, 5
	je	$LN568@ZSTD_compr
	sub	eax, 1
	je	$LN569@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN965@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN571@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [rdi-1], -1640531535	; 9e3779b1H

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	$LN990@ZSTD_compr
$LN542@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	mov	r11d, DWORD PTR tv4789[rsp]
	mov	ecx, r11d

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rax, rsi
	shr	rax, cl

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d
$LN571@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi-1]
	imul	rdx, rsi

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	$LN991@ZSTD_compr
$LN541@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	mov	rsi, -3523014627193167104		; cf1bbcdcbfa56300H
	mov	r11d, DWORD PTR tv4789[rsp]
	mov	ecx, r11d

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	imul	rax, rsi
	shr	rax, cl

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi-1]
	imul	rdx, rsi

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	$LN991@ZSTD_compr
$LN965@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi-1]

; 631  :     switch(mls)

	mov	rsi, -3523014627193167104		; cf1bbcdcbfa56300H

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	imul	rdx, rsi

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN991@ZSTD_compr
$LN540@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	mov	rcx, -3523014627193847808		; cf1bbcdcbf9b0000H
	mov	r11d, DWORD PTR tv4789[rsp]

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, r11d
	shr	rax, cl

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d
$LN569@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN992@ZSTD_compr
$LN539@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	mov	rcx, -3523014627271114752		; cf1bbcdcbb000000H
	mov	r11d, DWORD PTR tv4789[rsp]

; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, r11d
	shr	rax, cl

; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d
$LN568@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN992@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 282  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	mov	rdx, QWORD PTR [rdi-1]
	imul	rdx, rax
$LN991@ZSTD_compr:
	mov	ecx, r11d
$LN990@ZSTD_compr:
	shr	rdx, cl
	lea	eax, DWORD PTR [r10-1]
	mov	rsi, rdi
	mov	DWORD PTR [r9+rdx*4], eax

; 283  :             }
; 284  : 
; 285  :             /* check immediate repcode */
; 286  :             if (dictMode == ZSTD_dictMatchState) {

	mov	eax, DWORD PTR dictMode$[rsp]
	cmp	eax, 2
	jne	$LN46@ZSTD_compr

; 287  :                 while (ip <= ilimit) {

	lea	r11, QWORD PTR [r14-8]
	cmp	rdi, r11
	ja	$LN976@ZSTD_compr
	mov	r12, QWORD PTR litLimit_w$1$[rsp]
	jmp	SHORT $LN16@ZSTD_compr
	npad	5
$LL956@ZSTD_compr:
	mov	r14, QWORD PTR iend$1$[rsp]
$LN16@ZSTD_compr:

; 288  :                     U32 const current2 = (U32)(ip-base);

	mov	rax, QWORD PTR base$1$[rsp]
	mov	r15d, edi

; 289  :                     U32 const repIndex2 = current2 - offset_2;
; 290  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState

	mov	r9d, DWORD PTR prefixLowestIndex$1$[rsp]
	sub	r15d, eax
	mov	ecx, r15d
	sub	ecx, ebp
	mov	r11d, ecx
	cmp	ecx, r9d
	jae	SHORT $LN71@ZSTD_compr
	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	sub	r11, rax
	add	r11, QWORD PTR dictBase$1$[rsp]
	jmp	SHORT $LN72@ZSTD_compr
$LN71@ZSTD_compr:
	add	r11, rax
$LN72@ZSTD_compr:

; 291  :                         && repIndex2 < prefixLowestIndex ?
; 292  :                             dictBase + repIndex2 - dictIndexDelta :
; 293  :                             base + repIndex2;
; 294  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 295  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {

	mov	eax, r9d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN976@ZSTD_compr
	mov	eax, DWORD PTR [rdi]
	cmp	DWORD PTR [r11], eax
	jne	$LN976@ZSTD_compr

; 296  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;

	cmp	ecx, r9d

; 297  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	lea	rbp, QWORD PTR [rdi+4]
	mov	rbx, r14
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, rbp
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 296  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;

	cmovb	rbx, QWORD PTR dictEnd$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, r14
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 297  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	add	r11, 4
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, r11

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	add	rcx, rbx
	cmp	rcx, r14
	cmovb	r8, rcx
	mov	rcx, rbp
	call	ZSTD_count
	mov	r14, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	add	rax, r11
	cmp	rax, rbx
	jne	SHORT $LN593@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r14+rbp]
	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	call	ZSTD_count
	add	r14, rax
$LN593@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 298  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	eax, DWORD PTR offset_2$1$[rsp]
	add	r14, 4
	mov	ebp, DWORD PTR offset_1$1$[rsp]
	mov	r11d, eax
	mov	DWORD PTR offset_1$1$[rsp], eax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rax, QWORD PTR [r13+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 298  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	DWORD PTR offset_2$1$[rsp], ebp

; 299  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);

	lea	rdx, QWORD PTR [r14-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rsi, r12
	ja	SHORT $LL630@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rax], xmm0
	npad	9
$LL630@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [r13+8]
	xor	ecx, ecx
	mov	WORD PTR [rax+4], cx

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r13+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r13+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdx, 65535				; 0000ffffH
	jbe	SHORT $LN917@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r13+72], 2
	sub	rax, QWORD PTR [r13]
	sar	rax, 3
	mov	DWORD PTR [r13+76], eax
$LN917@ZSTD_compr:

; 631  :     switch(mls)

	mov	eax, DWORD PTR mls$[rsp]

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], dx

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [r13+8], 8

; 631  :     switch(mls)

	sub	eax, 5
	je	SHORT $LN640@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN641@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN642@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN643@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [rdi], -1640531535	; 9e3779b1H
	mov	rcx, QWORD PTR tv4751[rsp]

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	SHORT $LN993@ZSTD_compr
$LN643@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	SHORT $LN994@ZSTD_compr
$LN642@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN994@ZSTD_compr
$LN641@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN994@ZSTD_compr
$LN640@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN994@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 300  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	rdx, QWORD PTR [rdi]
	mov	ecx, DWORD PTR tv4789[rsp]
	imul	rdx, rax
$LN993@ZSTD_compr:
	mov	r9, QWORD PTR hashSmall$1$[rsp]
	shr	rdx, cl
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 300  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	DWORD PTR [r9+rdx*4], r15d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 302  :                         ip += repLength2;

	add	rdi, r14
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, DWORD PTR tv4772[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 302  :                         ip += repLength2;

	mov	rsi, rdi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	shr	rax, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 301  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], r15d
	cmp	rdi, QWORD PTR ilimit$1$[rsp]
	jbe	$LL956@ZSTD_compr

; 303  :                         anchor = ip;
; 304  :                         continue;
; 305  :                     }
; 306  :                     break;
; 307  :             }   }
; 308  : 
; 309  :             if (dictMode == ZSTD_noDict) {

	jmp	$LN875@ZSTD_compr
$LN46@ZSTD_compr:
	test	eax, eax
	jne	$LN976@ZSTD_compr

; 311  :                      && ( (offset_2>0)

	lea	rax, QWORD PTR [r14-8]
	cmp	rdi, rax
	ja	$LN976@ZSTD_compr
	xor	r8d, r8d
	npad	10
$LL18@ZSTD_compr:
	mov	r10d, DWORD PTR [rdi]
	mov	ecx, r8d
	mov	eax, ebp
	mov	rdx, rdi
	sub	rdx, rax
	mov	eax, r8d
	cmp	r10d, DWORD PTR [rdx]
	sete	cl
	test	ebp, ebp
	setne	al
	test	ecx, eax
	je	$LN976@ZSTD_compr

; 312  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 313  :                     /* store sequence */
; 314  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;

	lea	rax, QWORD PTR [rdi+4]
	add	rdx, 4
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	lea	r8, QWORD PTR [r14-7]
	mov	r9, rax

; 565  : 
; 566  :     if (pIn < pInLoopLimit) {

	cmp	rax, r8
	jae	SHORT $LN696@ZSTD_compr

; 567  :         { size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rcx, QWORD PTR [rdx]
	xor	rcx, QWORD PTR [rax]

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	je	SHORT $LN698@ZSTD_compr

; 501  :             unsigned long r = 0;

	xor	r8d, r8d

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rcx
	mov	DWORD PTR r$6[rsp], r8d
	je	SHORT $LN713@ZSTD_compr
	shr	eax, 3

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	ecx, eax
	jmp	SHORT $LN694@ZSTD_compr
$LN713@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	eax, r8d

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	ecx, eax
	jmp	SHORT $LN694@ZSTD_compr
$LN698@ZSTD_compr:

; 569  :         pIn+=sizeof(size_t); pMatch+=sizeof(size_t);

	add	rax, 8
	add	rdx, 8

; 570  :         while (pIn < pInLoopLimit) {

	cmp	rax, r8
	jae	SHORT $LN696@ZSTD_compr
	npad	4
$LL695@ZSTD_compr:

; 571  :             size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rcx, QWORD PTR [rdx]
	xor	rcx, QWORD PTR [rax]

; 572  :             if (!diff) { pIn+=sizeof(size_t); pMatch+=sizeof(size_t); continue; }

	jne	$LN699@ZSTD_compr
	add	rax, 8
	add	rdx, 8
	cmp	rax, r8
	jb	SHORT $LL695@ZSTD_compr
$LN696@ZSTD_compr:

; 575  :     }   }
; 576  :     if (MEM_64bits() && (pIn<(pInLimit-3)) && (MEM_read32(pMatch) == MEM_read32(pIn))) { pIn+=4; pMatch+=4; }

	lea	rcx, QWORD PTR [r14-3]
	cmp	rax, rcx
	jae	SHORT $LN700@ZSTD_compr
	mov	ecx, DWORD PTR [rax]
	cmp	DWORD PTR [rdx], ecx
	jne	SHORT $LN700@ZSTD_compr
	add	rax, 4
	add	rdx, 4
$LN700@ZSTD_compr:

; 577  :     if ((pIn<(pInLimit-1)) && (MEM_read16(pMatch) == MEM_read16(pIn))) { pIn+=2; pMatch+=2; }

	lea	rcx, QWORD PTR [r14-1]
	cmp	rax, rcx
	jae	SHORT $LN701@ZSTD_compr
	movzx	ecx, WORD PTR [rax]
	cmp	WORD PTR [rdx], cx
	jne	SHORT $LN701@ZSTD_compr
	add	rax, 2
	add	rdx, 2
$LN701@ZSTD_compr:

; 578  :     if ((pIn<pInLimit) && (*pMatch == *pIn)) pIn++;

	cmp	rax, r14
	jae	SHORT $LN702@ZSTD_compr
	movzx	ecx, BYTE PTR [rax]
	cmp	BYTE PTR [rdx], cl
	jne	SHORT $LN702@ZSTD_compr
	inc	rax
$LN702@ZSTD_compr:

; 579  :     return (size_t)(pIn - pStart);

	mov	rcx, rax
	sub	rcx, r9
$LN694@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 315  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */

	mov	eax, ebp
	mov	DWORD PTR offset_2$1$[rsp], r15d
	mov	DWORD PTR offset_1$1$[rsp], eax
	lea	r9, QWORD PTR [rcx+4]
	mov	ebp, r15d
	mov	r15d, eax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	eax, DWORD PTR mls$[rsp]
	sub	eax, 5
	je	SHORT $LN741@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN742@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN743@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN744@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	rcx, QWORD PTR tv4751[rsp]
	imul	r8d, r10d, -1640531535			; 9e3779b1H

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	SHORT $LN995@ZSTD_compr
$LN699@ZSTD_compr:

; 501  :             unsigned long r = 0;

	xor	r8d, r8d

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rdx, rcx
	mov	DWORD PTR r$5[rsp], r8d
	je	SHORT $LN729@ZSTD_compr
	shr	edx, 3

; 574  :             return (size_t)(pIn - pStart);

	mov	ecx, edx
	sub	rcx, r9
	add	rcx, rax
	jmp	SHORT $LN694@ZSTD_compr
$LN729@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	edx, r8d

; 574  :             return (size_t)(pIn - pStart);

	mov	ecx, edx
	sub	rcx, r9
	add	rcx, rax
	jmp	SHORT $LN694@ZSTD_compr
$LN744@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	SHORT $LN996@ZSTD_compr
$LN743@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN996@ZSTD_compr
$LN742@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN996@ZSTD_compr
$LN741@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN996@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 316  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	r8, QWORD PTR [rdi]
	mov	ecx, r11d
	imul	r8, rax
$LN995@ZSTD_compr:
	mov	rax, QWORD PTR hashSmall$1$[rsp]
	mov	edx, edi
	shr	r8, cl
	sub	edx, r12d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 316  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	DWORD PTR [rax+r8*4], edx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi]
	imul	rax, rcx
	mov	ecx, DWORD PTR tv4772[rsp]
	shr	rax, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 317  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx

; 318  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);

	lea	rdx, QWORD PTR [r9-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rax, QWORD PTR [r13+24]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rsi, rbx
	ja	SHORT $LL827@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rax], xmm0
	npad	4
$LL827@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [r13+8]
	xor	r8d, r8d
	mov	WORD PTR [rax+4], r8w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r13+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r13+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdx, 65535				; 0000ffffH
	jbe	SHORT $LN918@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r13+72], 2
	sub	rax, QWORD PTR [r13]
	sar	rax, 3
	mov	DWORD PTR [r13+76], eax
$LN918@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 319  :                     ip += rLength;

	add	rdi, r9
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], dx

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [r13+8], 8
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 311  :                      && ( (offset_2>0)

	lea	rax, QWORD PTR [r14-8]

; 319  :                     ip += rLength;

	mov	rsi, rdi
	cmp	rdi, rax
	jbe	$LL18@ZSTD_compr

; 320  :                     anchor = ip;
; 321  :                     continue;   /* faster when present ... (?) */
; 322  :         }   }   }
; 323  :     }   /* while (ip < ilimit) */

	mov	r11d, r15d
	jmp	$LN875@ZSTD_compr
ZSTD_compressBlock_doubleFast_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\common\zstd_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c
_TEXT	SEGMENT
prefixLowestIndex$1$ = 32
current$1$ = 32
iend$1$ = 40
offset_2$1$ = 48
tv7137 = 48
prefixStartIndex$1$ = 52
hashSmall$1$ = 56
prefixStart$1$ = 64
tv6342 = 64
lowLimit$1$ = 72
tv6391 = 72
base$1$ = 80
hashLong$1$ = 88
prefixLowest$1$ = 96
dictEnd$1$ = 96
ip$1$ = 104
matchIndex$1$ = 104
ilimit$1$ = 112
matchLongIndex$1$ = 120
tv6304 = 120
dictStart$1$ = 128
dictBase$1$ = 136
tv6310 = 144
offset_2$1$ = 224
offset_1$1$ = 224
r$1 = 224
r$2 = 224
r$3 = 224
r$4 = 224
ms$ = 224
seqStore$ = 232
rep$ = 240
tv6362 = 248
src$ = 248
offset_1$1$ = 256
tv6393 = 256
srcSize$ = 256
mls$ = 264
ZSTD_compressBlock_doubleFast_extDict_generic PROC

; 388  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], r8
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 160				; 000000a0H

; 389  :     ZSTD_compressionParameters const* cParams = &ms->cParams;
; 390  :     U32* const hashLong = ms->hashTable;

	mov	rax, QWORD PTR [rcx+48]
	mov	r13, rcx

; 391  :     U32  const hBitsL = cParams->hashLog;

	mov	r12d, DWORD PTR [rcx+192]

; 400  :     const U32   endIndex = (U32)((size_t)(istart - base) + srcSize);

	mov	r8d, r9d
	mov	r15d, DWORD PTR [rcx+188]
	mov	rbp, rdx
	mov	QWORD PTR hashLong$1$[rsp], rax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 978  :     U32    const maxDistance = 1U << windowLog;

	mov	edx, 1
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 392  :     U32* const hashSmall = ms->chainTable;

	mov	rax, QWORD PTR [rcx+64]
	mov	rdi, r9

; 397  :     const BYTE* const iend = istart + srcSize;

	mov	rcx, QWORD PTR srcSize$[rsp]
	mov	rsi, r9

; 399  :     const BYTE* const base = ms->window.base;

	mov	r11, QWORD PTR [r13+8]

; 400  :     const U32   endIndex = (U32)((size_t)(istart - base) + srcSize);

	sub	r8d, r11d
	mov	QWORD PTR hashSmall$1$[rsp], rax
	add	r8d, ecx
	mov	QWORD PTR base$1$[rsp], r11
	lea	rbx, QWORD PTR [r9+rcx]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 981  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	r10d, r8d
	mov	ecx, DWORD PTR [r13+184]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 398  :     const BYTE* const ilimit = iend - 8;

	lea	rax, QWORD PTR [rbx-8]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 981  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	r9d, DWORD PTR [r13+32]
	shl	edx, cl
	mov	ecx, DWORD PTR [r13+28]
	sub	r10d, edx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 398  :     const BYTE* const ilimit = iend - 8;

	mov	QWORD PTR ilimit$1$[rsp], rax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 981  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	r14d, r10d
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 397  :     const BYTE* const iend = istart + srcSize;

	mov	QWORD PTR iend$1$[rsp], rbx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 980  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r8d
	sub	eax, ecx

; 981  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	DWORD PTR prefixLowestIndex$1$[rsp], r10d
	cmp	eax, edx
	cmovbe	r14d, ecx
	test	r9d, r9d

; 982  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r14d, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 403  :     const U32   dictLimit = ms->window.dictLimit;

	mov	ecx, DWORD PTR [r13+24]

; 404  :     const U32   prefixStartIndex = (dictLimit > lowLimit) ? dictLimit : lowLimit;

	cmp	ecx, r14d

; 407  :     const BYTE* const dictStart = dictBase + dictStartIndex;

	mov	ebx, r14d
	mov	r10d, r14d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 982  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	DWORD PTR lowLimit$1$[rsp], r14d
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 404  :     const U32   prefixStartIndex = (dictLimit > lowLimit) ? dictLimit : lowLimit;

	cmova	r10d, ecx

; 405  :     const BYTE* const prefixStart = base + prefixStartIndex;

	mov	eax, r10d
	add	r11, rax
	mov	DWORD PTR prefixStartIndex$1$[rsp], r10d
	mov	QWORD PTR prefixStart$1$[rsp], r11

; 406  :     const BYTE* const dictBase = ms->window.dictBase;

	mov	r11, QWORD PTR [r13+16]

; 408  :     const BYTE* const dictEnd = dictBase + prefixStartIndex;

	add	rax, r11
	mov	QWORD PTR dictBase$1$[rsp], r11
	add	rbx, r11
	mov	QWORD PTR dictEnd$1$[rsp], rax
	mov	rax, QWORD PTR rep$[rsp]
	mov	QWORD PTR dictStart$1$[rsp], rbx

; 409  :     U32 offset_1=rep[0], offset_2=rep[1];
; 410  : 
; 411  :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_extDict_generic (srcSize=%zu)", srcSize);
; 412  : 
; 413  :     /* if extDict is invalidated due to maxDistance, switch to "regular" variant */
; 414  :     if (prefixStartIndex == dictStartIndex)

	mov	rbx, QWORD PTR iend$1$[rsp]
	mov	r11d, DWORD PTR [rax]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR offset_2$1$[rsp], eax
	mov	DWORD PTR offset_1$1$[rsp], r11d
	cmp	r10d, r14d
	jne	$LN1315@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	eax, DWORD PTR prefixLowestIndex$1$[rsp]
	sub	r8d, ecx
	cmp	r8d, edx
	cmovbe	eax, ecx
	test	r9d, r9d

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	eax, ecx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 110  :     QueryPerformanceCounter(&time1);

	lea	rcx, OFFSET FLAT:?time1@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	mov	ebx, eax
	add	rbx, QWORD PTR base$1$[rsp]
	mov	QWORD PTR prefixLowest$1$[rsp], rbx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	DWORD PTR prefixLowestIndex$1$[rsp], eax
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 110  :     QueryPerformanceCounter(&time1);

	call	QWORD PTR __imp_QueryPerformanceCounter

; 111  : #else
; 112  :     static struct timespec time1;
; 113  : 	clock_gettime(CLOCK_MONOTONIC, &time1);
; 114  : #endif
; 115  : 
; 116  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 117  : 
; 118  :     /* if a dictionary is attached, it must be within window range */
; 119  :     if (dictMode == ZSTD_dictMatchState) {
; 120  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 121  :     }
; 122  : 
; 123  :     /* init */
; 124  :     ip += (dictAndPrefixLength == 0);
; 125  :     if (dictMode == ZSTD_noDict) {
; 126  :         U32 const current = (U32)(ip - base);
; 127  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);

	mov	r8d, DWORD PTR [r13+184]
	xor	r14d, r14d
	cmp	edi, ebx
	mov	eax, r14d
	mov	rcx, r13
	sete	al
	lea	rsi, QWORD PTR [rax+rsi]
	mov	ebx, esi
	sub	ebx, DWORD PTR base$1$[rsp]
	mov	edx, ebx
	call	ZSTD_getLowestPrefixIndex

; 128  :         U32 const maxRep = current - windowLow;
; 129  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 131  :     }
; 132  :     if (dictMode == ZSTD_dictMatchState) {
; 133  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 134  :          * disabling. */
; 135  :         assert(offset_1 <= dictAndPrefixLength);
; 136  :         assert(offset_2 <= dictAndPrefixLength);
; 137  :     }
; 138  : 
; 139  :     /* Main Search Loop */
; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	edx, DWORD PTR offset_1$1$[rsp]
	sub	ebx, eax
	mov	eax, DWORD PTR offset_2$1$[rsp]
	mov	ecx, r14d
	cmp	eax, ebx
	mov	r8d, edx
	mov	r10d, r14d
	cmovbe	ecx, eax
	cmovbe	eax, r14d
	cmp	edx, ebx
	cmovbe	r8d, eax
	cmovbe	r10d, edx
	mov	DWORD PTR tv7137[rsp], r8d
	cmp	rsi, QWORD PTR ilimit$1$[rsp]
	jae	$LN33@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r11d, 64				; 00000040H
	mov	DWORD PTR offset_2$1$[rsp], ecx
	mov	r13d, r11d
	mov	DWORD PTR offset_1$1$[rsp], r10d
	sub	r13d, r15d

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	r9d, 32					; 00000020H
	sub	r9d, r15d

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	DWORD PTR tv6391[rsp], r13d
	sub	r11d, r12d

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	mov	QWORD PTR tv6342[rsp], r9

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	DWORD PTR tv6362[rsp], r11d
	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	rbx, -3523014627193167104		; cf1bbcdcbfa56300H
	mov	r15, -3523014627193847808		; cf1bbcdcbf9b0000H
	mov	r12, -3523014627271114752		; cf1bbcdcbb000000H
	npad	9
$LL32@ZSTD_compr:
	mov	r8, QWORD PTR [rsi]
	mov	ecx, r11d
	mov	rdx, r8
	imul	rdx, rax

; 631  :     switch(mls)

	mov	eax, DWORD PTR mls$[rsp]

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r10, rdx
	shr	r10, cl

; 631  :     switch(mls)

	sub	eax, 5
	je	SHORT $LN142@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN143@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN144@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN145@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, r8d, -1640531535			; 9e3779b1H
	mov	rcx, r9

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	SHORT $LN1457@ZSTD_compr
$LN144@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rdx, r8
	imul	rdx, rbx

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN145@ZSTD_compr
$LN143@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rdx, r8
	imul	rdx, r15

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN145@ZSTD_compr
$LN142@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rdx, r8
	imul	rdx, r12
$LN145@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 147  :         U32 const current = (U32)(ip-base);

	mov	ecx, r13d
$LN1457@ZSTD_compr:

; 148  :         U32 const matchIndexL = hashLong[h2];

	mov	r15, QWORD PTR hashLong$1$[rsp]
	mov	r12d, esi
	mov	rbx, QWORD PTR base$1$[rsp]
	shr	rdx, cl
	sub	r12d, ebx

; 149  :         U32 matchIndexS = hashSmall[h];

	mov	rcx, QWORD PTR hashSmall$1$[rsp]
	mov	r8d, DWORD PTR [r15+r10*4]
	mov	r11d, DWORD PTR [rcx+rdx*4]

; 150  :         const BYTE* matchLong = base + matchIndexL;
; 151  :         const BYTE* match = base + matchIndexS;
; 152  :         const U32 repIndex = current + 1 - offset_1;
; 153  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState
; 154  :                             && repIndex < prefixLowestIndex) ?
; 155  :                                dictBase + (repIndex - dictIndexDelta) :
; 156  :                                base + repIndex;
; 157  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	DWORD PTR [rcx+rdx*4], r12d
	lea	r9, QWORD PTR [rbx+r8]
	mov	DWORD PTR [r15+r10*4], r12d
	add	rbx, r11

; 158  : 
; 159  :         /* check dictMatchState repcode */
; 160  :         if (dictMode == ZSTD_dictMatchState
; 161  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 162  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {
; 163  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;
; 164  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;
; 165  :             ip++;
; 166  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 167  :             goto _match_stored;
; 168  :         }
; 169  : 
; 170  :         /* check noDict repcode */
; 171  :         if ( dictMode == ZSTD_noDict
; 172  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {

	mov	r10d, DWORD PTR offset_1$1$[rsp]
	lea	r15, QWORD PTR [rsi+1]
	mov	eax, DWORD PTR [r15]
	mov	ecx, r14d
	mov	rdx, rsi
	sub	rdx, r10
	cmp	DWORD PTR [rdx+1], eax
	mov	eax, r14d
	sete	cl
	test	r10d, r10d
	setne	al
	test	ecx, eax
	je	$LN56@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	mov	r11, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 173  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	lea	rcx, QWORD PTR [rdx+5]
	add	rsi, 5
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 563  :     const BYTE* const pStart = pIn;

	mov	r9, rsi

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	lea	rdx, QWORD PTR [r11-7]

; 565  : 
; 566  :     if (pIn < pInLoopLimit) {

	cmp	rsi, rdx
	jae	SHORT $LN270@ZSTD_compr

; 567  :         { size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rsi]
	xor	rax, QWORD PTR [rcx]

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	je	SHORT $LN272@ZSTD_compr

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rax
	je	SHORT $LN287@ZSTD_compr
	shr	eax, 3

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	r8d, eax
	jmp	SHORT $LN268@ZSTD_compr
$LN287@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	eax, r14d

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	r8d, eax
	jmp	SHORT $LN268@ZSTD_compr
$LN272@ZSTD_compr:

; 569  :         pIn+=sizeof(size_t); pMatch+=sizeof(size_t);

	add	rsi, 8
	add	rcx, 8

; 570  :         while (pIn < pInLoopLimit) {

	cmp	rsi, rdx
	jae	SHORT $LN270@ZSTD_compr
	npad	8
$LL269@ZSTD_compr:

; 571  :             size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rsi]
	xor	rax, QWORD PTR [rcx]

; 572  :             if (!diff) { pIn+=sizeof(size_t); pMatch+=sizeof(size_t); continue; }

	jne	$LN273@ZSTD_compr
	add	rsi, 8
	add	rcx, 8
	cmp	rsi, rdx
	jb	SHORT $LL269@ZSTD_compr
$LN270@ZSTD_compr:

; 575  :     }   }
; 576  :     if (MEM_64bits() && (pIn<(pInLimit-3)) && (MEM_read32(pMatch) == MEM_read32(pIn))) { pIn+=4; pMatch+=4; }

	lea	rax, QWORD PTR [r11-3]
	cmp	rsi, rax
	jae	SHORT $LN274@ZSTD_compr
	mov	eax, DWORD PTR [rsi]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN274@ZSTD_compr
	add	rsi, 4
	add	rcx, 4
$LN274@ZSTD_compr:

; 577  :     if ((pIn<(pInLimit-1)) && (MEM_read16(pMatch) == MEM_read16(pIn))) { pIn+=2; pMatch+=2; }

	lea	rax, QWORD PTR [r11-1]
	cmp	rsi, rax
	jae	SHORT $LN275@ZSTD_compr
	movzx	eax, WORD PTR [rsi]
	cmp	WORD PTR [rcx], ax
	jne	SHORT $LN275@ZSTD_compr
	add	rsi, 2
	add	rcx, 2
$LN275@ZSTD_compr:

; 578  :     if ((pIn<pInLimit) && (*pMatch == *pIn)) pIn++;

	cmp	rsi, r11
	jae	SHORT $LN276@ZSTD_compr
	movzx	eax, BYTE PTR [rsi]
	cmp	BYTE PTR [rcx], al
	jne	SHORT $LN276@ZSTD_compr
	inc	rsi
$LN276@ZSTD_compr:

; 579  :     return (size_t)(pIn - pStart);

	mov	r8, rsi
	sub	r8, r9
$LN268@ZSTD_compr:

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbp+24]
	lea	rbx, QWORD PTR [r11-32]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 173  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	add	r8, 4

; 174  :             ip++;

	mov	rsi, r15

; 175  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	r15, rdi
	lea	r10, QWORD PTR [r8-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	rdx, QWORD PTR [r15+rdi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rdx, rbx
	ja	SHORT $LN312@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdi]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r15, 16
	jbe	$LN334@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbp+24]
	add	rdi, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r15
$LL326@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdi]

; 289  :             COPY16(op, ip);

	lea	rdi, QWORD PTR [rdi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL326@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN334@ZSTD_compr
$LN273@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rcx, rax
	je	SHORT $LN303@ZSTD_compr
	shr	ecx, 3

; 574  :             return (size_t)(pIn - pStart);

	mov	r8d, ecx
	sub	r8, r9
	add	r8, rsi
	jmp	SHORT $LN268@ZSTD_compr
$LN303@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	ecx, r14d

; 574  :             return (size_t)(pIn - pStart);

	mov	r8d, ecx
	sub	r8, r9
	add	r8, rsi
	jmp	$LN268@ZSTD_compr
$LN312@ZSTD_compr:

; 424  :     if (ip <= ilimit_w) {

	cmp	rdi, rbx
	ja	SHORT $LN1303@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	r9, rcx
	sub	r9, rdi
	add	r9, rbx
	sub	rdi, rcx
	npad	5
$LL343@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdi+rcx]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, r9
	jb	SHORT $LL343@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, r9
	mov	rdi, rbx
$LN1303@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rdi, rdx
	jae	SHORT $LN334@ZSTD_compr
	sub	rcx, rdi
	npad	2
$LL1351@ZSTD_compr:
	movzx	eax, BYTE PTR [rdi]
	mov	BYTE PTR [rcx+rdi], al
	inc	rdi
	cmp	rdi, rdx
	jb	SHORT $LL1351@ZSTD_compr
$LN334@ZSTD_compr:

; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbp+24], r15
	mov	rcx, QWORD PTR [rbp+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r15, 65535				; 0000ffffH
	jbe	SHORT $LN1397@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 1
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1397@ZSTD_compr:

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r15w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbp+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbp+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	r10, 65535				; 0000ffffH
	jbe	SHORT $LN1398@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 2
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1398@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 176  :             goto _match_stored;

	mov	r15d, DWORD PTR offset_2$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], r10w
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 176  :             goto _match_stored;

	jmp	$LN1458@ZSTD_compr
$LN56@ZSTD_compr:

; 177  :         }
; 178  : 
; 179  :         if (matchIndexL > prefixLowestIndex) {

	mov	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	cmp	r8d, ecx
	jbe	$LN59@ZSTD_compr

; 180  :             /* check prefix long match */
; 181  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [rsi]
	cmp	QWORD PTR [r9], rax
	jne	$LN59@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	mov	r11, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 182  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	lea	rcx, QWORD PTR [rsi+8]
	lea	rdx, QWORD PTR [r9+8]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 563  :     const BYTE* const pStart = pIn;

	mov	r10, rcx

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	lea	r8, QWORD PTR [r11-7]

; 565  : 
; 566  :     if (pIn < pInLoopLimit) {

	cmp	rcx, r8
	jae	SHORT $LN351@ZSTD_compr

; 567  :         { size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rcx]
	xor	rax, QWORD PTR [rdx]

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	je	SHORT $LN353@ZSTD_compr

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rax
	mov	DWORD PTR r$4[rsp], r14d
	je	SHORT $LN368@ZSTD_compr
	shr	eax, 3

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	r8d, eax
	jmp	SHORT $LN349@ZSTD_compr
$LN368@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	eax, r14d

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	r8d, eax
	jmp	SHORT $LN349@ZSTD_compr
$LN353@ZSTD_compr:

; 569  :         pIn+=sizeof(size_t); pMatch+=sizeof(size_t);

	add	rcx, 8
	add	rdx, 8

; 570  :         while (pIn < pInLoopLimit) {

	cmp	rcx, r8
	jae	SHORT $LN351@ZSTD_compr
	npad	4
$LL350@ZSTD_compr:

; 571  :             size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rcx]
	xor	rax, QWORD PTR [rdx]

; 572  :             if (!diff) { pIn+=sizeof(size_t); pMatch+=sizeof(size_t); continue; }

	jne	$LN354@ZSTD_compr
	add	rcx, 8
	add	rdx, 8
	cmp	rcx, r8
	jb	SHORT $LL350@ZSTD_compr
$LN351@ZSTD_compr:

; 575  :     }   }
; 576  :     if (MEM_64bits() && (pIn<(pInLimit-3)) && (MEM_read32(pMatch) == MEM_read32(pIn))) { pIn+=4; pMatch+=4; }

	lea	rax, QWORD PTR [r11-3]
	cmp	rcx, rax
	jae	SHORT $LN355@ZSTD_compr
	mov	eax, DWORD PTR [rcx]
	cmp	DWORD PTR [rdx], eax
	jne	SHORT $LN355@ZSTD_compr
	add	rcx, 4
	add	rdx, 4
$LN355@ZSTD_compr:

; 577  :     if ((pIn<(pInLimit-1)) && (MEM_read16(pMatch) == MEM_read16(pIn))) { pIn+=2; pMatch+=2; }

	lea	rax, QWORD PTR [r11-1]
	cmp	rcx, rax
	jae	SHORT $LN356@ZSTD_compr
	movzx	eax, WORD PTR [rcx]
	cmp	WORD PTR [rdx], ax
	jne	SHORT $LN356@ZSTD_compr
	add	rcx, 2
	add	rdx, 2
$LN356@ZSTD_compr:

; 578  :     if ((pIn<pInLimit) && (*pMatch == *pIn)) pIn++;

	cmp	rcx, r11
	jae	SHORT $LN357@ZSTD_compr
	movzx	eax, BYTE PTR [rcx]
	cmp	BYTE PTR [rdx], al
	jne	SHORT $LN357@ZSTD_compr
	inc	rcx
$LN357@ZSTD_compr:

; 579  :     return (size_t)(pIn - pStart);

	mov	r8, rcx
	sub	r8, r10
$LN349@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 184  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	add	r8, 8
	mov	ecx, r14d
	mov	eax, r14d
	mov	r13d, esi
	sub	r13d, r9d
	cmp	r9, r10
	seta	cl
	cmp	rsi, rdi
	seta	al
	test	ecx, eax
	je	$_match_found$1474
	npad	9
$LL34@ZSTD_compr:
	movzx	eax, BYTE PTR [r9-1]
	lea	rdx, QWORD PTR [rsi-1]
	dec	r9
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$1474
	inc	r8
	mov	ecx, r14d
	cmp	r9, r10
	mov	eax, r14d
	mov	rsi, rdx
	seta	cl
	cmp	rdx, rdi
	seta	al
	test	ecx, eax
	jne	SHORT $LL34@ZSTD_compr

; 185  :                 goto _match_found;

	jmp	$_match_found$1474
$LN354@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rdx, rax
	mov	DWORD PTR r$3[rsp], r14d
	je	SHORT $LN384@ZSTD_compr
	shr	edx, 3

; 574  :             return (size_t)(pIn - pStart);

	mov	r8d, edx
	sub	r8, r10
	add	r8, rcx
	jmp	$LN349@ZSTD_compr
$LN384@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	edx, r14d

; 574  :             return (size_t)(pIn - pStart);

	mov	r8d, edx
	sub	r8, r10
	add	r8, rcx
	jmp	$LN349@ZSTD_compr
$LN59@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 200  :         if (matchIndexS > prefixLowestIndex) {

	cmp	r11d, ecx
	jbe	$LN64@ZSTD_compr

; 201  :             /* check prefix short match */
; 202  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [rsi]
	cmp	DWORD PTR [rbx], eax
	jne	$LN64@ZSTD_compr
$_search_next_long$1475:
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r15]
	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
	imul	rax, rcx
	mov	ecx, DWORD PTR tv6362[rsp]
	shr	rax, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 225  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, QWORD PTR [rcx+rax*4]

; 226  :             const BYTE* matchL3 = base + matchIndexL3;

	mov	r11d, edx

; 227  :             hashLong[hl3] = current + 1;

	lea	eax, DWORD PTR [r12+1]
	add	r11, QWORD PTR base$1$[rsp]
	mov	DWORD PTR [rcx], eax

; 228  : 
; 229  :             /* check prefix long +1 match */
; 230  :             if (matchIndexL3 > prefixLowestIndex) {

	cmp	edx, DWORD PTR prefixLowestIndex$1$[rsp]
	jbe	SHORT $LN69@ZSTD_compr

; 231  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	rax, QWORD PTR [r15]
	cmp	QWORD PTR [r11], rax
	jne	SHORT $LN69@ZSTD_compr

; 232  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [r11+8]
	lea	rcx, QWORD PTR [rsi+9]
	call	ZSTD_count

; 233  :                     ip++;
; 234  :                     offset = (U32)(ip-matchL3);
; 235  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	edx, r14d
	mov	ecx, r14d
	mov	r13d, r15d
	sub	r13d, r11d
	mov	rsi, r15
	cmp	r11, r10
	lea	r8, QWORD PTR [rax+8]
	seta	dl
	cmp	r15, rdi
	seta	cl
	test	edx, ecx
	je	$_match_found$1474
	npad	6
$LL38@ZSTD_compr:
	movzx	eax, BYTE PTR [r11-1]
	lea	rdx, QWORD PTR [rsi-1]
	dec	r11
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$1474
	inc	r8
	mov	ecx, r14d
	cmp	r11, r10
	mov	eax, r14d
	mov	rsi, rdx
	seta	cl
	cmp	rdx, rdi
	seta	al
	test	ecx, eax
	jne	SHORT $LL38@ZSTD_compr

; 236  :                     goto _match_found;

	jmp	SHORT $_match_found$1474
$LN69@ZSTD_compr:

; 237  :                 }
; 238  :             } else if (dictMode == ZSTD_dictMatchState) {
; 239  :                 /* check dict long +1 match */
; 240  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];
; 241  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;
; 242  :                 assert(dictMatchL3 < dictEnd);
; 243  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {
; 244  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;
; 245  :                     ip++;
; 246  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);
; 247  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */
; 248  :                     goto _match_found;
; 249  :         }   }   }
; 250  : 
; 251  :         /* if no long +1 match, explore the short match we found */
; 252  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {
; 253  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;
; 254  :             offset = (U32)(current - matchIndexS);
; 255  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */
; 256  :         } else {
; 257  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbx+4]
	lea	rcx, QWORD PTR [rsi+4]
	call	ZSTD_count

; 258  :             offset = (U32)(ip - match);
; 259  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r14d
	mov	r13d, esi
	sub	r13d, ebx
	cmp	rsi, rdi
	lea	r8, QWORD PTR [rax+4]
	mov	eax, r14d
	seta	cl
	cmp	rbx, r10
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$1474
	npad	7
$LL44@ZSTD_compr:
	movzx	eax, BYTE PTR [rbx-1]
	lea	rdx, QWORD PTR [rsi-1]
	dec	rbx
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$1474
	inc	r8
	mov	ecx, r14d
	cmp	rbx, r10
	mov	eax, r14d
	mov	rsi, rdx
	seta	cl
	cmp	rdx, rdi
	seta	al
	test	ecx, eax
	jne	SHORT $LL44@ZSTD_compr
$_match_found$1474:

; 265  :         offset_2 = offset_1;

	mov	r15d, DWORD PTR offset_1$1$[rsp]

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	r11, QWORD PTR [r8-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbx, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	r9, rsi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbp+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 268  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	sub	r9, rdi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	rbx, -32				; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 265  :         offset_2 = offset_1;

	mov	DWORD PTR offset_2$1$[rsp], r15d

; 266  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r13d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	rdx, QWORD PTR [r9+rdi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rdx, rbx
	ja	SHORT $LN466@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdi]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r9, 16
	jbe	SHORT $LN488@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbp+24]
	add	rdi, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r9
$LL480@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdi]

; 289  :             COPY16(op, ip);

	lea	rdi, QWORD PTR [rdi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL480@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN488@ZSTD_compr
$LN466@ZSTD_compr:

; 424  :     if (ip <= ilimit_w) {

	cmp	rdi, rbx
	ja	SHORT $LN1310@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	r10, rbx
	sub	r10, rdi
	add	r10, rcx
	sub	rdi, rcx
	npad	8
$LL497@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdi+rcx]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, r10
	jb	SHORT $LL497@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, r10
	mov	rdi, rbx
$LN1310@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rdi, rdx
	jae	SHORT $LN488@ZSTD_compr
	sub	rcx, rdi
	npad	2
$LL1353@ZSTD_compr:
	movzx	eax, BYTE PTR [rdi]
	mov	BYTE PTR [rcx+rdi], al
	inc	rdi
	cmp	rdi, rdx
	jb	SHORT $LL1353@ZSTD_compr
$LN488@ZSTD_compr:

; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbp+24], r9
	mov	rcx, QWORD PTR [rbp+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r9, 65535				; 0000ffffH
	jbe	SHORT $LN1399@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 1
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1399@ZSTD_compr:

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r9w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r13+3]
	mov	rax, QWORD PTR [rbp+8]
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [rbp+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	r11, 65535				; 0000ffffH
	jbe	SHORT $LN1400@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 2
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1400@ZSTD_compr:
	mov	r13d, DWORD PTR tv6391[rsp]

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], r11w
	mov	r11, QWORD PTR iend$1$[rsp]
$LN1458@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 272  :         ip += mLength;

	add	QWORD PTR [rbp+8], 8
$_match_stored$1476:
	lea	rdi, QWORD PTR [r8+rsi]

; 273  :         anchor = ip;

	lea	r10, QWORD PTR [r11-8]
	mov	rsi, rdi
	cmp	rdi, r10

; 274  : 
; 275  :         if (ip <= ilimit) {

	ja	$LN1455@ZSTD_compr

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	rdx, QWORD PTR base$1$[rsp]
	lea	r8d, DWORD PTR [r12+2]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ecx, DWORD PTR tv6362[rsp]
	mov	r12, -3523014627327384477		; cf1bbcdcb7a56463H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r9, QWORD PTR hashLong$1$[rsp]
	mov	r10d, r8d
	add	r10, rdx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r10]
	imul	rax, r12
	shr	rax, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	DWORD PTR [r9+rax*4], r8d
	mov	r9d, edi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi-2]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 279  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	sub	r9d, edx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rax, r12
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 280  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	lea	edx, DWORD PTR [r9-2]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	shr	rax, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 280  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	eax, DWORD PTR mls$[rsp]
	sub	eax, 5
	je	$LN565@ZSTD_compr
	sub	eax, 1
	je	$LN566@ZSTD_compr
	sub	eax, 1
	je	$LN567@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN568@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [r10], -1640531535	; 9e3779b1H
	mov	r12, QWORD PTR tv6342[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 281  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r10, QWORD PTR hashSmall$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	rcx, r12

; 631  :     switch(mls)

	mov	eax, DWORD PTR mls$[rsp]

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	shr	rdx, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 281  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	DWORD PTR [r10+rdx*4], r8d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	sub	eax, 5
	je	$LN594@ZSTD_compr
	sub	eax, 1
	je	$LN595@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN596@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN597@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [rdi-1], -1640531535	; 9e3779b1H

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	lea	r8d, DWORD PTR [r9-1]

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	shr	rdx, cl

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	mov	DWORD PTR [r10+rdx*4], r8d
	jmp	$LL1441@ZSTD_compr
$LN568@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r10]
	mov	ecx, r13d

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	mov	r10, QWORD PTR hashSmall$1$[rsp]

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rax, r12
	mov	r12, QWORD PTR tv6342[rsp]
	shr	rax, cl

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	mov	DWORD PTR [r10+rax*4], r8d
$LN597@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	$LN1459@ZSTD_compr
$LN567@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r10]
	mov	rcx, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	r10, QWORD PTR hashSmall$1$[rsp]
	mov	r12, QWORD PTR tv6342[rsp]

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, r13d
	shr	rax, cl

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	DWORD PTR [r10+rax*4], r8d
$LN596@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rcx, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN1459@ZSTD_compr
$LN566@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r10]
	mov	rcx, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	mov	r10, QWORD PTR hashSmall$1$[rsp]
	mov	r12, QWORD PTR tv6342[rsp]

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, r13d
	shr	rax, cl

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	mov	DWORD PTR [r10+rax*4], r8d
$LN595@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rcx, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN1459@ZSTD_compr
$LN565@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r10]
	mov	rcx, -3523014627271114752		; cf1bbcdcbb000000H

; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);

	mov	r10, QWORD PTR hashSmall$1$[rsp]
	mov	r12, QWORD PTR tv6342[rsp]

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, r13d
	shr	rax, cl

; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);

	mov	DWORD PTR [r10+rax*4], r8d
$LN594@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rcx, -3523014627271114752		; cf1bbcdcbb000000H
$LN1459@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 311  :                      && ( (offset_2>0)

	mov	rax, QWORD PTR [rdi-1]
	lea	edx, DWORD PTR [r9-1]
	imul	rax, rcx
	mov	ecx, r13d
	shr	rax, cl
	mov	DWORD PTR [r10+rax*4], edx
	npad	5
$LL1441@ZSTD_compr:
	mov	r10d, DWORD PTR [rsi]
	mov	ecx, r14d
	mov	eax, r15d
	mov	rdx, rsi
	sub	rdx, rax
	mov	eax, r14d
	cmp	r10d, DWORD PTR [rdx]
	sete	cl
	test	r15d, r15d
	setne	al
	test	ecx, eax
	je	$LN1455@ZSTD_compr

; 312  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 313  :                     /* store sequence */
; 314  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;

	lea	rax, QWORD PTR [rsi+4]
	add	rdx, 4
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	lea	r8, QWORD PTR [r11-7]
	mov	r9, rax

; 565  : 
; 566  :     if (pIn < pInLoopLimit) {

	cmp	rax, r8
	jae	SHORT $LN722@ZSTD_compr

; 567  :         { size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rcx, QWORD PTR [rax]
	xor	rcx, QWORD PTR [rdx]

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	je	SHORT $LN724@ZSTD_compr

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rcx
	mov	DWORD PTR r$2[rsp], r14d
	je	SHORT $LN739@ZSTD_compr
	shr	eax, 3

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	ecx, eax
	jmp	SHORT $LN720@ZSTD_compr
$LN739@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	eax, r14d

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	ecx, eax
	jmp	SHORT $LN720@ZSTD_compr
$LN724@ZSTD_compr:

; 569  :         pIn+=sizeof(size_t); pMatch+=sizeof(size_t);

	add	rax, 8
	add	rdx, 8

; 570  :         while (pIn < pInLoopLimit) {

	cmp	rax, r8
	jae	SHORT $LN722@ZSTD_compr
	npad	5
$LL721@ZSTD_compr:

; 571  :             size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rcx, QWORD PTR [rax]
	xor	rcx, QWORD PTR [rdx]

; 572  :             if (!diff) { pIn+=sizeof(size_t); pMatch+=sizeof(size_t); continue; }

	jne	$LN725@ZSTD_compr
	add	rax, 8
	add	rdx, 8
	cmp	rax, r8
	jb	SHORT $LL721@ZSTD_compr
$LN722@ZSTD_compr:

; 575  :     }   }
; 576  :     if (MEM_64bits() && (pIn<(pInLimit-3)) && (MEM_read32(pMatch) == MEM_read32(pIn))) { pIn+=4; pMatch+=4; }

	lea	rcx, QWORD PTR [r11-3]
	cmp	rax, rcx
	jae	SHORT $LN726@ZSTD_compr
	mov	ecx, DWORD PTR [rax]
	cmp	DWORD PTR [rdx], ecx
	jne	SHORT $LN726@ZSTD_compr
	add	rax, 4
	add	rdx, 4
$LN726@ZSTD_compr:

; 577  :     if ((pIn<(pInLimit-1)) && (MEM_read16(pMatch) == MEM_read16(pIn))) { pIn+=2; pMatch+=2; }

	lea	rcx, QWORD PTR [r11-1]
	cmp	rax, rcx
	jae	SHORT $LN727@ZSTD_compr
	movzx	ecx, WORD PTR [rax]
	cmp	WORD PTR [rdx], cx
	jne	SHORT $LN727@ZSTD_compr
	add	rax, 2
	add	rdx, 2
$LN727@ZSTD_compr:

; 578  :     if ((pIn<pInLimit) && (*pMatch == *pIn)) pIn++;

	cmp	rax, r11
	jae	SHORT $LN728@ZSTD_compr
	movzx	ecx, BYTE PTR [rax]
	cmp	BYTE PTR [rdx], cl
	jne	SHORT $LN728@ZSTD_compr
	inc	rax
$LN728@ZSTD_compr:

; 579  :     return (size_t)(pIn - pStart);

	mov	rcx, rax
	sub	rcx, r9
$LN720@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 315  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */

	mov	eax, r15d
	lea	r9, QWORD PTR [rcx+4]
	mov	r15d, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR offset_1$1$[rsp], eax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	eax, DWORD PTR mls$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 315  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */

	mov	DWORD PTR offset_2$1$[rsp], r15d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	sub	eax, 5
	je	SHORT $LN767@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN768@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN769@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN770@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	r8d, r10d, -1640531535			; 9e3779b1H
	mov	rcx, r12

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	SHORT $LN1460@ZSTD_compr
$LN725@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rdx, rcx
	mov	DWORD PTR r$1[rsp], r14d
	je	SHORT $LN755@ZSTD_compr
	shr	edx, 3

; 574  :             return (size_t)(pIn - pStart);

	mov	ecx, edx
	sub	rcx, r9
	add	rcx, rax
	jmp	SHORT $LN720@ZSTD_compr
$LN755@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	edx, r14d

; 574  :             return (size_t)(pIn - pStart);

	mov	ecx, edx
	sub	rcx, r9
	add	rcx, rax
	jmp	SHORT $LN720@ZSTD_compr
$LN770@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	SHORT $LN1461@ZSTD_compr
$LN769@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN1461@ZSTD_compr
$LN768@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN1461@ZSTD_compr
$LN767@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN1461@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 316  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	r8, QWORD PTR [rsi]
	mov	ecx, r13d
	imul	r8, rax
$LN1460@ZSTD_compr:
	mov	rax, QWORD PTR hashSmall$1$[rsp]
	mov	edx, esi
	sub	edx, DWORD PTR base$1$[rsp]
	shr	r8, cl
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 316  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	DWORD PTR [rax+r8*4], edx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rsi]
	imul	rax, rcx
	mov	ecx, DWORD PTR tv6362[rsp]
	shr	rax, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 317  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx

; 318  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);

	lea	rdx, QWORD PTR [r9-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rax, QWORD PTR [rbp+24]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rdi, rbx
	ja	SHORT $LL853@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdi]
	movups	XMMWORD PTR [rax], xmm0
	npad	5
$LL853@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [rbp+8]
	mov	WORD PTR [rax+4], r14w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbp+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbp+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdx, 65535				; 0000ffffH
	jbe	SHORT $LN1401@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 2
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1401@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 319  :                     ip += rLength;

	add	rsi, r9
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], dx

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [rbp+8], 8
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 311  :                      && ( (offset_2>0)

	lea	r10, QWORD PTR [r11-8]

; 319  :                     ip += rLength;

	mov	rdi, rsi
	cmp	rsi, r10
	jbe	$LL1441@ZSTD_compr
$LN1455@ZSTD_compr:

; 128  :         U32 const maxRep = current - windowLow;
; 129  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 130  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 131  :     }
; 132  :     if (dictMode == ZSTD_dictMatchState) {
; 133  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 134  :          * disabling. */
; 135  :         assert(offset_1 <= dictAndPrefixLength);
; 136  :         assert(offset_2 <= dictAndPrefixLength);
; 137  :     }
; 138  : 
; 139  :     /* Main Search Loop */
; 140  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, DWORD PTR offset_1$1$[rsp]
$LN1341@ZSTD_compr:
	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	r9, QWORD PTR tv6342[rsp]
	mov	rbx, -3523014627193167104		; cf1bbcdcbfa56300H
	mov	r11d, DWORD PTR tv6362[rsp]
	mov	r15, -3523014627193847808		; cf1bbcdcbf9b0000H
	mov	r12, -3523014627271114752		; cf1bbcdcbb000000H
	cmp	rsi, QWORD PTR ilimit$1$[rsp]
	jb	$LL32@ZSTD_compr
	mov	ecx, DWORD PTR offset_2$1$[rsp]
	mov	r8d, DWORD PTR tv7137[rsp]
$LN33@ZSTD_compr:

; 320  :                     anchor = ip;
; 321  :                     continue;   /* faster when present ... (?) */
; 322  :         }   }   }
; 323  :     }   /* while (ip < ilimit) */
; 324  : 
; 325  :     /* save reps for next block */
; 326  :     rep[0] = offset_1 ? offset_1 : offsetSaved;

	mov	r9, QWORD PTR rep$[rsp]
	test	r10d, r10d
	mov	eax, r8d
	cmovne	eax, r10d

; 327  :     rep[1] = offset_2 ? offset_2 : offsetSaved;

	test	ecx, ecx
	cmovne	r8d, ecx
	mov	DWORD PTR [r9], eax

; 328  : 
; 329  : #ifdef _MSC_VER
; 330  :     static LARGE_INTEGER time2;
; 331  :     QueryPerformanceCounter(&time2);

	lea	rcx, OFFSET FLAT:?time2@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	mov	DWORD PTR [r9+4], r8d
	call	QWORD PTR __imp_QueryPerformanceCounter

; 332  :     printf("%I64u\n", time2.QuadPart - time1.QuadPart);

	mov	rdx, QWORD PTR ?time2@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	lea	rcx, OFFSET FLAT:$SG4294965530
	sub	rdx, QWORD PTR ?time1@?1??ZSTD_compressBlock_doubleFast_generic@@9@9
	call	printf

; 333  : #else
; 334  :     static struct timespec time2;
; 335  : 	clock_gettime(CLOCK_MONOTONIC, &time2);
; 336  :     printf("%llu\n", (time2.tv_sec * 10000000 + time2.tv_nsec / 100) - (time1.tv_sec * 10000000 + time1.tv_nsec / 100));
; 337  : #endif
; 338  : 
; 339  :     /* Return the last literals size */
; 340  :     return (size_t)(iend - anchor);

	mov	rax, QWORD PTR iend$1$[rsp]
	sub	rax, rdi

; 415  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, mls, ZSTD_noDict);

	jmp	$LN1@ZSTD_compr
$LN64@ZSTD_compr:

; 215  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, rsi
	inc	rsi
	sub	rax, rdi
	sar	rax, 8
	add	rsi, rax

; 274  : 
; 275  :         if (ip <= ilimit) {

	jmp	$LN1341@ZSTD_compr
$LN1315@ZSTD_compr:

; 416  : 
; 417  :     /* Search Loop */
; 418  :     while (ip < ilimit) {  /* < instead of <=, because (ip+1) */

	lea	rcx, QWORD PTR [rbx-8]
	cmp	rdi, rcx
	jae	$LN3@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ebx, DWORD PTR mls$[rsp]
	mov	eax, 64					; 00000040H
	mov	ecx, eax

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	r8d, 32					; 00000020H

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	sub	ecx, r15d

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	sub	r8d, r15d

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	sub	eax, r12d
	mov	DWORD PTR tv6393[rsp], ecx
	xor	r14d, r14d

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	mov	QWORD PTR tv6310[rsp], r8

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	DWORD PTR tv6362[rsp], eax
	mov	r15, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	r9, -3523014627193167104		; cf1bbcdcbfa56300H
	mov	r12, -3523014627193847808		; cf1bbcdcbf9b0000H
	mov	r13, -3523014627271114752		; cf1bbcdcbb000000H
$LL2@ZSTD_compr:

; 631  :     switch(mls)

	mov	eax, ebx
	sub	eax, 5
	je	SHORT $LN863@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN864@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN865@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN866@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [rdi], -1640531535	; 9e3779b1H
	mov	rcx, r8

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	SHORT $LN1462@ZSTD_compr
$LN866@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi]
	imul	rdx, r15

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	SHORT $LN1462@ZSTD_compr
$LN865@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi]
	imul	rdx, r9

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN1462@ZSTD_compr
$LN864@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi]
	imul	rdx, r12

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN1462@ZSTD_compr
$LN863@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi]
	imul	rdx, r13
$LN1462@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 421  :         const BYTE* const matchBase = matchIndex < prefixStartIndex ? dictBase : base;

	mov	r13, QWORD PTR dictBase$1$[rsp]

; 427  :         const BYTE* matchLong = matchLongBase + matchLongIndex;
; 428  : 
; 429  :         const U32 current = (U32)(ip-base);

	mov	ebx, edi
	mov	rax, QWORD PTR hashSmall$1$[rsp]
	mov	r12, QWORD PTR base$1$[rsp]
	shr	rdx, cl
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ecx, DWORD PTR tv6362[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 420  :         const U32 matchIndex = hashSmall[hSmall];

	mov	r9d, DWORD PTR [rax+rdx*4]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 421  :         const BYTE* const matchBase = matchIndex < prefixStartIndex ? dictBase : base;

	cmp	r9d, r10d
	mov	DWORD PTR matchIndex$1$[rsp], r9d
	cmovb	r12, r13
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rax, r15
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 426  :         const BYTE* const matchLongBase = matchLongIndex < prefixStartIndex ? dictBase : base;

	mov	r15, QWORD PTR base$1$[rsp]
	add	r12, r9
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	shr	rax, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 425  :         const U32 matchLongIndex = hashLong[hLong];

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	r8d, DWORD PTR [rcx+rax*4]
	lea	rcx, QWORD PTR [rcx+rax*4]

; 427  :         const BYTE* matchLong = matchLongBase + matchLongIndex;
; 428  : 
; 429  :         const U32 current = (U32)(ip-base);

	mov	rax, QWORD PTR base$1$[rsp]
	cmp	r8d, r10d
	mov	DWORD PTR matchLongIndex$1$[rsp], r8d
	cmovb	r15, r13
	sub	ebx, eax
	add	r15, r8

; 430  :         const U32 repIndex = current + 1 - offset_1;   /* offset_1 expected <= current +1 */
; 431  :         const BYTE* const repBase = repIndex < prefixStartIndex ? dictBase : base;
; 432  :         const BYTE* const repMatch = repBase + repIndex;
; 433  :         size_t mLength;
; 434  :         hashSmall[hSmall] = hashLong[hLong] = current;   /* update hash table */

	mov	DWORD PTR [rcx], ebx

; 435  : 
; 436  :         if ((((U32)((prefixStartIndex-1) - repIndex) >= 3) /* intentional underflow : ensure repIndex doesn't overlap dict + prefix */
; 437  :             & (repIndex > dictStartIndex))
; 438  :           && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	ecx, r14d
	mov	DWORD PTR current$1$[rsp], ebx
	mov	r10d, ebx
	sub	r10d, r11d
	mov	r11, rax
	inc	r10d
	cmp	r10d, DWORD PTR prefixStartIndex$1$[rsp]
	mov	eax, r10d
	cmovb	r11, r13
	add	r11, rax
	mov	rax, QWORD PTR hashSmall$1$[rsp]
	mov	DWORD PTR [rax+rdx*4], ebx
	mov	edx, DWORD PTR prefixStartIndex$1$[rsp]
	mov	eax, edx
	sub	eax, r10d
	dec	eax
	cmp	eax, 3
	mov	eax, r14d
	setae	cl
	cmp	r10d, DWORD PTR lowLimit$1$[rsp]
	seta	al
	test	ecx, eax
	je	$LN13@ZSTD_compr
	mov	eax, DWORD PTR [rdi+1]
	lea	r13, QWORD PTR [rdi+1]
	cmp	DWORD PTR [r11], eax
	jne	$LN13@ZSTD_compr

; 439  :             const BYTE* repMatchEnd = repIndex < prefixStartIndex ? dictEnd : iend;

	mov	r12, QWORD PTR iend$1$[rsp]

; 440  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixStart) + 4;

	lea	r15, QWORD PTR [rdi+5]
	cmp	r10d, edx
	mov	rbx, r12
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, r15
	mov	r8, r12
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 439  :             const BYTE* repMatchEnd = repIndex < prefixStartIndex ? dictEnd : iend;

	cmovb	rbx, QWORD PTR dictEnd$1$[rsp]

; 440  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixStart) + 4;

	add	r11, 4
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, r11

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	add	rcx, rbx
	cmp	rcx, r12
	cmovb	r8, rcx
	mov	rcx, r15
	call	ZSTD_count
	mov	rdi, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rax+r11]
	cmp	rcx, rbx
	jne	SHORT $LN917@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	rdx, QWORD PTR prefixStart$1$[rsp]
	lea	rcx, QWORD PTR [rax+r15]
	mov	r8, r12
	call	ZSTD_count
	add	rdi, rax
$LN917@ZSTD_compr:

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbp+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 440  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixStart) + 4;

	lea	r8, QWORD PTR [rdi+4]

; 441  :             ip++;

	mov	rdi, r13
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	lea	r15, QWORD PTR [r12-32]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 442  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	r13, rsi
	lea	r10, QWORD PTR [r8-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	rdx, QWORD PTR [rsi+r13]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rdx, r15
	ja	SHORT $LN923@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r13, 16
	jbe	SHORT $LN945@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbp+24]
	add	rsi, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r13
	npad	12
$LL937@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]

; 289  :             COPY16(op, ip);

	lea	rsi, QWORD PTR [rsi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL937@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN945@ZSTD_compr
$LN923@ZSTD_compr:

; 424  :     if (ip <= ilimit_w) {

	cmp	rsi, r15
	ja	SHORT $LN1318@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	r9, rcx
	sub	r9, rsi
	add	r9, r15
	sub	rsi, rcx
	npad	10
$LL954@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi+rcx]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, r9
	jb	SHORT $LL954@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, r9
	mov	rsi, r15
$LN1318@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rsi, rdx
	jae	SHORT $LN945@ZSTD_compr
	sub	rcx, rsi
	npad	2
$LL1357@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi]
	mov	BYTE PTR [rcx+rsi], al
	inc	rsi
	cmp	rsi, rdx
	jb	SHORT $LL1357@ZSTD_compr
$LN945@ZSTD_compr:

; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbp+24], r13
	mov	rcx, QWORD PTR [rbp+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r13, 65535				; 0000ffffH
	jbe	SHORT $LN1402@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 1
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1402@ZSTD_compr:

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r13w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbp+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbp+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	r10, 65535				; 0000ffffH
	jbe	SHORT $LN1403@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 2
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1403@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 443  :         } else {

	mov	r13d, DWORD PTR current$1$[rsp]
	mov	r12d, DWORD PTR offset_2$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], r10w
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 443  :         } else {

	jmp	$LN1463@ZSTD_compr
$LN13@ZSTD_compr:

; 444  :             if ((matchLongIndex > dictStartIndex) && (MEM_read64(matchLong) == MEM_read64(ip))) {

	mov	r10d, DWORD PTR lowLimit$1$[rsp]
	cmp	r8d, r10d
	jbe	$LN15@ZSTD_compr
	mov	rax, QWORD PTR [rdi]
	cmp	QWORD PTR [r15], rax
	jne	$LN15@ZSTD_compr

; 445  :                 const BYTE* const matchEnd = matchLongIndex < prefixStartIndex ? dictEnd : iend;

	mov	r10, QWORD PTR iend$1$[rsp]

; 447  :                 U32 offset;
; 448  :                 mLength = ZSTD_count_2segments(ip+8, matchLong+8, iend, matchEnd, prefixStart) + 8;

	lea	r11, QWORD PTR [r15+8]
	mov	r12, QWORD PTR prefixStart$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	lea	rcx, QWORD PTR [rdi+8]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 445  :                 const BYTE* const matchEnd = matchLongIndex < prefixStartIndex ? dictEnd : iend;

	cmp	r8d, edx
	mov	rbx, r10
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, r10

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 445  :                 const BYTE* const matchEnd = matchLongIndex < prefixStartIndex ? dictEnd : iend;

	cmovb	rbx, QWORD PTR dictEnd$1$[rsp]

; 446  :                 const BYTE* const lowMatchPtr = matchLongIndex < prefixStartIndex ? dictStart : prefixStart;

	cmovb	r12, QWORD PTR dictStart$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, r11
	add	rcx, rbx
	cmp	rcx, r10
	cmovb	r8, rcx

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	lea	rcx, QWORD PTR [rdi+8]
	call	ZSTD_count
	mov	r13, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [r11+rax]
	cmp	rcx, rbx
	jne	SHORT $LN960@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [rax+8]
	mov	rdx, QWORD PTR prefixStart$1$[rsp]
	add	rcx, rdi
	call	ZSTD_count
	add	r13, rax
$LN960@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 450  :                 while (((ip>anchor) & (matchLong>lowMatchPtr)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; }   /* catch up */

	mov	ecx, r14d
	lea	r8, QWORD PTR [r13+8]
	mov	r13d, DWORD PTR current$1$[rsp]
	mov	eax, r14d
	mov	r11d, r13d
	sub	r11d, DWORD PTR matchLongIndex$1$[rsp]
	cmp	r15, r12
	seta	cl
	cmp	rdi, rsi
	seta	al
	test	ecx, eax
	je	SHORT $LN1443@ZSTD_compr
	npad	14
$LL4@ZSTD_compr:
	movzx	eax, BYTE PTR [r15-1]
	lea	rdx, QWORD PTR [rdi-1]
	dec	r15
	cmp	BYTE PTR [rdx], al
	jne	SHORT $LN1443@ZSTD_compr
	inc	r8
	mov	ecx, r14d
	cmp	rdx, rsi
	mov	eax, r14d
	mov	rdi, rdx
	seta	cl
	cmp	r15, r12
	seta	al
	test	ecx, eax
	jne	SHORT $LL4@ZSTD_compr
$LN1443@ZSTD_compr:

; 451  :                 offset_2 = offset_1;

	mov	edx, DWORD PTR offset_1$1$[rsp]

; 453  :                 ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	rbx, QWORD PTR [r8-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	r15, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 453  :                 ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	r10, rdi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbp+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 453  :                 ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	sub	r10, rsi
	mov	r12d, edx
	mov	DWORD PTR offset_2$1$[rsp], edx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	r15, -32				; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 452  :                 offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r11d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	rdx, QWORD PTR [r10+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rdx, r15
	ja	SHORT $LN966@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r10, 16
	jbe	$LN1065@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbp+24]
	add	rsi, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r10
	npad	11
$LL980@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]

; 289  :             COPY16(op, ip);

	lea	rsi, QWORD PTR [rsi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL980@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	$LN1065@ZSTD_compr
$LN966@ZSTD_compr:

; 424  :     if (ip <= ilimit_w) {

	cmp	rsi, r15
	ja	SHORT $LN1322@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	r9, rcx
	sub	r9, rsi
	add	r9, r15
	sub	rsi, rcx
	npad	7
$LL997@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi+rcx]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, r9
	jb	SHORT $LL997@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, r9
	mov	rsi, r15
$LN1322@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rsi, rdx
	jae	$LN1065@ZSTD_compr
	sub	rcx, rsi
$LL1359@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi]
	mov	BYTE PTR [rcx+rsi], al
	inc	rsi
	cmp	rsi, rdx
	jb	SHORT $LL1359@ZSTD_compr

; 490  : }

	jmp	$LN1065@ZSTD_compr
$LN15@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 455  :             } else if ((matchIndex > dictStartIndex) && (MEM_read32(match) == MEM_read32(ip))) {

	cmp	r9d, r10d
	jbe	$LN17@ZSTD_compr
	mov	eax, DWORD PTR [rdi]
	cmp	DWORD PTR [r12], eax
	jne	$LN17@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi+1]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 456  :                 size_t const h3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	lea	rdx, QWORD PTR [rdi+1]

; 458  :                 const BYTE* const match3Base = matchIndex3 < prefixStartIndex ? dictBase : base;

	mov	r8d, DWORD PTR prefixStartIndex$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 458  :                 const BYTE* const match3Base = matchIndex3 < prefixStartIndex ? dictBase : base;

	mov	r15, QWORD PTR base$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, DWORD PTR tv6362[rsp]
	shr	rax, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 457  :                 U32 const matchIndex3 = hashLong[h3];

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	r13d, DWORD PTR [rcx+rax*4]
	lea	rcx, QWORD PTR [rcx+rax*4]

; 458  :                 const BYTE* const match3Base = matchIndex3 < prefixStartIndex ? dictBase : base;

	cmp	r13d, r8d
	mov	QWORD PTR tv6304[rsp], rdx

; 459  :                 const BYTE* match3 = match3Base + matchIndex3;
; 460  :                 U32 offset;
; 461  :                 hashLong[h3] = current + 1;

	lea	eax, DWORD PTR [rbx+1]
	cmovb	r15, QWORD PTR dictBase$1$[rsp]
	add	r15, r13
	mov	DWORD PTR [rcx], eax

; 462  :                 if ( (matchIndex3 > dictStartIndex) && (MEM_read64(match3) == MEM_read64(ip+1)) ) {

	cmp	r13d, r10d
	jbe	$LN19@ZSTD_compr
	mov	rax, QWORD PTR [rdx]
	cmp	QWORD PTR [r15], rax
	jne	$LN19@ZSTD_compr

; 463  :                     const BYTE* const matchEnd = matchIndex3 < prefixStartIndex ? dictEnd : iend;

	mov	rdx, QWORD PTR iend$1$[rsp]

; 465  :                     mLength = ZSTD_count_2segments(ip+9, match3+8, iend, matchEnd, prefixStart) + 8;

	lea	r9, QWORD PTR [rdi+9]
	mov	r12, QWORD PTR prefixStart$1$[rsp]
	lea	r11, QWORD PTR [r15+8]
	cmp	r13d, r8d
	mov	QWORD PTR ip$1$[rsp], r9
	mov	rbx, rdx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, rdx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 463  :                     const BYTE* const matchEnd = matchIndex3 < prefixStartIndex ? dictEnd : iend;

	cmovb	rbx, QWORD PTR dictEnd$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, r9
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 464  :                     const BYTE* const lowMatchPtr = matchIndex3 < prefixStartIndex ? dictStart : prefixStart;

	cmovb	r12, QWORD PTR dictStart$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, r11
	add	rcx, rbx
	cmp	rcx, rdx

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	cmovb	r8, rcx
	mov	rcx, r9
	call	ZSTD_count
	mov	rdi, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rax+r11]
	cmp	rcx, rbx
	jne	SHORT $LN1032@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	rcx, QWORD PTR ip$1$[rsp]
	mov	r8, QWORD PTR iend$1$[rsp]
	add	rcx, rax
	mov	rdx, QWORD PTR prefixStart$1$[rsp]
	call	ZSTD_count
	add	rdi, rax
$LN1032@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 467  :                     offset = current+1 - matchIndex3;

	mov	r11d, DWORD PTR current$1$[rsp]
	lea	r8, QWORD PTR [rdi+8]
	mov	rdi, QWORD PTR tv6304[rsp]
	sub	r11d, r13d
	inc	r11d

; 468  :                     while (((ip>anchor) & (match3>lowMatchPtr)) && (ip[-1] == match3[-1])) { ip--; match3--; mLength++; } /* catch up */

	mov	ecx, r14d
	cmp	rdi, rsi
	mov	eax, r14d
	seta	cl
	cmp	r15, r12
	seta	al
	test	ecx, eax
	je	SHORT $LN1450@ZSTD_compr
	npad	7
$LL6@ZSTD_compr:
	movzx	eax, BYTE PTR [r15-1]
	lea	rdx, QWORD PTR [rdi-1]
	dec	r15
	cmp	BYTE PTR [rdx], al
	jne	SHORT $LN1450@ZSTD_compr
	inc	r8
	mov	ecx, r14d
	cmp	rdx, rsi
	mov	eax, r14d
	mov	rdi, rdx
	seta	cl
	cmp	r15, r12
	seta	al
	test	ecx, eax
	jne	SHORT $LL6@ZSTD_compr
$LN1450@ZSTD_compr:

; 475  :                 }
; 476  :                 offset_2 = offset_1;

	mov	r13d, DWORD PTR current$1$[rsp]
$LN9@ZSTD_compr:
	mov	edx, DWORD PTR offset_1$1$[rsp]

; 478  :                 ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	rbx, QWORD PTR [r8-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	r15, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 478  :                 ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	r10, rdi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbp+24]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 478  :                 ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	sub	r10, rsi
	mov	r12d, edx
	mov	DWORD PTR offset_2$1$[rsp], edx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	r15, -32				; ffffffffffffffe0H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 477  :                 offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r11d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	rdx, QWORD PTR [r10+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rdx, r15
	ja	$LN1043@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rcx], xmm0
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r10, 16
	jbe	$LN1065@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbp+24]
	add	rsi, 16
	add	rax, 16
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r10
	npad	2
$LL1057@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]

; 289  :             COPY16(op, ip);

	lea	rsi, QWORD PTR [rsi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL1057@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	$LN1065@ZSTD_compr
$LN19@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 470  :                     const BYTE* const matchEnd = matchIndex < prefixStartIndex ? dictEnd : iend;

	mov	rdx, QWORD PTR iend$1$[rsp]

; 472  :                     mLength = ZSTD_count_2segments(ip+4, match+4, iend, matchEnd, prefixStart) + 4;

	lea	r11, QWORD PTR [r12+4]
	mov	r15, QWORD PTR prefixStart$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	lea	rcx, QWORD PTR [rdi+4]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 470  :                     const BYTE* const matchEnd = matchIndex < prefixStartIndex ? dictEnd : iend;

	cmp	r9d, r8d
	mov	rbx, rdx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, rdx
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 470  :                     const BYTE* const matchEnd = matchIndex < prefixStartIndex ? dictEnd : iend;

	cmovb	rbx, QWORD PTR dictEnd$1$[rsp]

; 471  :                     const BYTE* const lowMatchPtr = matchIndex < prefixStartIndex ? dictStart : prefixStart;

	cmovb	r15, QWORD PTR dictStart$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, r11
	add	rcx, rbx
	cmp	rcx, rdx

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	cmovb	r8, rcx
	lea	rcx, QWORD PTR [rdi+4]
	call	ZSTD_count
	mov	r13, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [r11+rax]
	cmp	rcx, rbx
	jne	SHORT $LN1037@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [rax+4]
	mov	rdx, QWORD PTR prefixStart$1$[rsp]
	add	rcx, rdi
	call	ZSTD_count
	add	r13, rax
$LN1037@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 474  :                     while (((ip>anchor) & (match>lowMatchPtr)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; }   /* catch up */

	mov	ecx, r14d
	lea	r8, QWORD PTR [r13+4]
	mov	r13d, DWORD PTR current$1$[rsp]
	mov	eax, r14d
	mov	r11d, r13d
	sub	r11d, DWORD PTR matchIndex$1$[rsp]
	cmp	r12, r15
	seta	cl
	cmp	rdi, rsi
	seta	al
	test	ecx, eax
	je	$LN9@ZSTD_compr
	npad	4
$LL8@ZSTD_compr:
	movzx	eax, BYTE PTR [r12-1]
	lea	rdx, QWORD PTR [rdi-1]
	dec	r12
	cmp	BYTE PTR [rdx], al
	jne	$LN9@ZSTD_compr
	inc	r8
	mov	ecx, r14d
	cmp	rdx, rsi
	mov	eax, r14d
	mov	rdi, rdx
	seta	cl
	cmp	r12, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL8@ZSTD_compr

; 468  :                     while (((ip>anchor) & (match3>lowMatchPtr)) && (ip[-1] == match3[-1])) { ip--; match3--; mLength++; } /* catch up */

	jmp	$LN9@ZSTD_compr
$LN1043@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 424  :     if (ip <= ilimit_w) {

	cmp	rsi, r15
	ja	SHORT $LN1327@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	r9, rcx
	sub	r9, rsi
	add	r9, r15
	sub	rsi, rcx
	npad	9
$LL1074@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rcx+rsi]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, r9
	jb	SHORT $LL1074@ZSTD_compr
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, r9
	mov	rsi, r15
$LN1327@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rsi, rdx
	jae	SHORT $LN1065@ZSTD_compr
	sub	rcx, rsi
	npad	2
$LL1361@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi]
	mov	BYTE PTR [rsi+rcx], al
	inc	rsi
	cmp	rsi, rdx
	jb	SHORT $LL1361@ZSTD_compr
$LN1065@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 486  :         ip += mLength;

	add	QWORD PTR [rbp+24], r10
	mov	rcx, QWORD PTR [rbp+8]
	cmp	r10, 65535				; 0000ffffH
	jbe	SHORT $LN1406@ZSTD_compr
	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 1
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1406@ZSTD_compr:
	mov	WORD PTR [rcx+4], r10w
	lea	ecx, DWORD PTR [r11+3]
	mov	rax, QWORD PTR [rbp+8]
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [rbp+8]
	cmp	rbx, 65535				; 0000ffffH
	jbe	SHORT $LN1407@ZSTD_compr
	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 2
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1407@ZSTD_compr:
	mov	WORD PTR [rcx+6], bx
$LN1463@ZSTD_compr:
	add	QWORD PTR [rbp+8], 8
	add	rdi, r8
	mov	rsi, rdi

; 487  :         anchor = ip;

	cmp	rdi, QWORD PTR ilimit$1$[rsp]

; 488  : 
; 489  :         if (ip <= ilimit) {

	ja	$LN1451@ZSTD_compr

; 493  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r11, QWORD PTR base$1$[rsp]
	lea	r8d, DWORD PTR [r13+2]
	mov	rbx, QWORD PTR hashLong$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r15, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	ecx, DWORD PTR tv6362[rsp]
	mov	edx, edi
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 493  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r9d, r8d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	sub	edx, r11d
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 493  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	add	r9, r11

; 494  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	sub	edx, 2
	mov	r10d, edi
	sub	r10d, r11d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	imul	rax, r15
	shr	rax, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 493  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	DWORD PTR [rbx+rax*4], r8d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi-2]
	imul	rax, r15
	shr	rax, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 494  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	DWORD PTR [rbx+rax*4], edx
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	ebx, DWORD PTR mls$[rsp]
	mov	eax, ebx
	sub	eax, 5
	je	$LN1142@ZSTD_compr
	sub	eax, 1
	je	$LN1143@ZSTD_compr
	sub	eax, 1
	je	$LN1144@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN1145@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [r9], -1640531535	; 9e3779b1H

; 631  :     switch(mls)

	mov	eax, ebx

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	rcx, QWORD PTR tv6310[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 495  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r9, QWORD PTR hashSmall$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	shr	rdx, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 495  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	DWORD PTR [r9+rdx*4], r8d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	sub	eax, 5
	je	$LN1445@ZSTD_compr
	sub	eax, 1
	je	$LN1446@ZSTD_compr
	sub	eax, 1
	je	$LN1447@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN1448@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [rdi-1], -1640531535	; 9e3779b1H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 496  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	eax, DWORD PTR [r10-1]
	shr	rdx, cl
	mov	DWORD PTR [r9+rdx*4], eax
	mov	r9, QWORD PTR iend$1$[rsp]

; 497  :             }
; 498  : 
; 499  :             /* check immediate repcode */
; 500  :             while (ip <= ilimit) {

	jmp	$LN10@ZSTD_compr
$LN1145@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ecx, DWORD PTR tv6393[rsp]
	imul	rax, r15
	shr	rax, cl

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 496  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	eax, DWORD PTR [r10-1]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi-1]
	imul	rdx, r15
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 496  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	shr	rdx, cl
	mov	DWORD PTR [r9+rdx*4], eax
	mov	r9, QWORD PTR iend$1$[rsp]

; 497  :             }
; 498  : 
; 499  :             /* check immediate repcode */
; 500  :             while (ip <= ilimit) {

	jmp	$LN10@ZSTD_compr
$LN1448@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi-1]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 496  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	eax, DWORD PTR [r10-1]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	ecx, DWORD PTR tv6393[rsp]

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rdx, r15
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 496  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	shr	rdx, cl
	mov	DWORD PTR [r9+rdx*4], eax
	mov	r9, QWORD PTR iend$1$[rsp]

; 497  :             }
; 498  : 
; 499  :             /* check immediate repcode */
; 500  :             while (ip <= ilimit) {

	jmp	$LN10@ZSTD_compr
$LN1144@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	mov	rcx, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, DWORD PTR tv6393[rsp]
	shr	rax, cl

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	$LN1469@ZSTD_compr
$LN1447@ZSTD_compr:

; 631  :     switch(mls)

	mov	ecx, DWORD PTR tv6393[rsp]

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN1469@ZSTD_compr
$LN1143@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	mov	rcx, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, DWORD PTR tv6393[rsp]
	shr	rax, cl

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN1469@ZSTD_compr
$LN1446@ZSTD_compr:

; 631  :     switch(mls)

	mov	ecx, DWORD PTR tv6393[rsp]

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN1469@ZSTD_compr
$LN1142@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	mov	rcx, -3523014627271114752		; cf1bbcdcbb000000H

; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, DWORD PTR tv6393[rsp]
	shr	rax, cl

; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d

; 631  :     switch(mls)

	jmp	SHORT $LN1171@ZSTD_compr
$LN1445@ZSTD_compr:
	mov	ecx, DWORD PTR tv6393[rsp]
$LN1171@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN1469@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 496  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	mov	rdx, QWORD PTR [rdi-1]
	imul	rdx, rax
	lea	eax, DWORD PTR [r10-1]
	shr	rdx, cl
	mov	DWORD PTR [r9+rdx*4], eax
	mov	r9, QWORD PTR iend$1$[rsp]

; 497  :             }
; 498  : 
; 499  :             /* check immediate repcode */
; 500  :             while (ip <= ilimit) {

	jmp	SHORT $LN10@ZSTD_compr
	npad	11
$LL1456@ZSTD_compr:
	mov	r11, QWORD PTR base$1$[rsp]
$LN10@ZSTD_compr:

; 501  :                 U32 const current2 = (U32)(ip-base);
; 502  :                 U32 const repIndex2 = current2 - offset_2;
; 503  :                 const BYTE* repMatch2 = repIndex2 < prefixStartIndex ? dictBase + repIndex2 : base + repIndex2;
; 504  :                 if ( (((U32)((prefixStartIndex-1) - repIndex2) >= 3)   /* intentional overflow : ensure repIndex2 doesn't overlap dict + prefix */
; 505  :                     & (repIndex2 > dictStartIndex))
; 506  :                   && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {

	mov	r10d, DWORD PTR prefixStartIndex$1$[rsp]
	mov	r13d, edi
	mov	rcx, QWORD PTR dictBase$1$[rsp]
	sub	r13d, r11d
	mov	edx, r13d
	mov	eax, r10d
	sub	edx, r12d
	cmp	edx, r10d
	cmovae	rcx, r11
	sub	eax, edx
	dec	eax
	mov	r11d, edx
	add	r11, rcx
	mov	ecx, r14d
	cmp	eax, 3
	mov	eax, r14d
	setae	cl
	cmp	edx, DWORD PTR lowLimit$1$[rsp]
	seta	al
	test	ecx, eax
	je	$LN1453@ZSTD_compr
	mov	eax, DWORD PTR [rdi]
	cmp	DWORD PTR [r11], eax
	jne	$LN1453@ZSTD_compr

; 507  :                     const BYTE* const repEnd2 = repIndex2 < prefixStartIndex ? dictEnd : iend;

	cmp	edx, r10d

; 508  :                     size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixStart) + 4;

	lea	r12, QWORD PTR [rdi+4]
	mov	rbx, r9
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, r9
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 507  :                     const BYTE* const repEnd2 = repIndex2 < prefixStartIndex ? dictEnd : iend;

	cmovb	rbx, QWORD PTR dictEnd$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, r12
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 508  :                     size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixStart) + 4;

	add	r11, 4
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, r11

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	add	rcx, rbx
	cmp	rcx, r9
	cmovb	r8, rcx
	mov	rcx, r12
	call	ZSTD_count
	mov	r15, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rax+r11]
	cmp	rcx, rbx
	jne	SHORT $LN1196@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [rax+r12]
	mov	rdx, QWORD PTR prefixStart$1$[rsp]
	call	ZSTD_count
	add	r15, rax
$LN1196@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 509  :                     U32 const tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	eax, DWORD PTR offset_2$1$[rsp]
	add	r15, 4
	mov	edx, DWORD PTR offset_1$1$[rsp]
	mov	r11d, eax
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	mov	r9, QWORD PTR iend$1$[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 509  :                     U32 const tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	r12d, edx
	mov	DWORD PTR offset_2$1$[rsp], edx
	mov	DWORD PTR offset_1$1$[rsp], eax

; 510  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);

	lea	rdx, QWORD PTR [r15-3]
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rax, QWORD PTR [rbp+24]

; 456  :     if (litEnd <= litLimit_w) {

	lea	rcx, QWORD PTR [r9-32]
	cmp	rsi, rcx
	ja	SHORT $LL1233@ZSTD_compr
; File e:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rax], xmm0
	npad	8
$LL1233@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [rbp+8]
	mov	WORD PTR [rax+4], r14w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbp+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbp+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdx, 65535				; 0000ffffH
	jbe	SHORT $LN1408@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 2
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1408@ZSTD_compr:

; 631  :     switch(mls)

	mov	ebx, DWORD PTR mls$[rsp]
	mov	eax, ebx

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], dx

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [rbp+8], 8

; 631  :     switch(mls)

	sub	eax, 5
	je	SHORT $LN1243@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN1244@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN1245@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN1246@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [rdi], -1640531535	; 9e3779b1H
	mov	rcx, QWORD PTR tv6310[rsp]

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	SHORT $LN1470@ZSTD_compr
$LN1246@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	SHORT $LN1471@ZSTD_compr
$LN1245@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN1471@ZSTD_compr
$LN1244@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN1471@ZSTD_compr
$LN1243@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN1471@ZSTD_compr:
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 511  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	rdx, QWORD PTR [rdi]
	mov	ecx, DWORD PTR tv6393[rsp]
	imul	rdx, rax
$LN1470@ZSTD_compr:
	mov	rax, QWORD PTR hashSmall$1$[rsp]
	lea	r10, QWORD PTR [r9-8]
	shr	rdx, cl
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 511  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	DWORD PTR [rax+rdx*4], r13d
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 513  :                     ip += repLength2;

	add	rdi, r15
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, DWORD PTR tv6362[rsp]
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 513  :                     ip += repLength2;

	mov	rsi, rdi
; File e:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	shr	rax, cl
; File e:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 512  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], r13d
	cmp	rdi, r10
	jbe	$LL1456@ZSTD_compr

; 514  :                     anchor = ip;
; 515  :                     continue;
; 516  :                 }
; 517  :                 break;
; 518  :     }   }   }

	mov	r10d, DWORD PTR prefixStartIndex$1$[rsp]
	jmp	SHORT $LN1350@ZSTD_compr
$LN17@ZSTD_compr:

; 479  : 
; 480  :             } else {
; 481  :                 ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, rdi
	mov	r10d, edx
	sub	rax, rsi
	inc	rdi
	sar	rax, 8
	add	rdi, rax

; 488  : 
; 489  :         if (ip <= ilimit) {

	jmp	SHORT $LN1472@ZSTD_compr
$LN1451@ZSTD_compr:
	mov	r10d, DWORD PTR prefixStartIndex$1$[rsp]
$LN1472@ZSTD_compr:

; 416  : 
; 417  :     /* Search Loop */
; 418  :     while (ip < ilimit) {  /* < instead of <=, because (ip+1) */

	mov	ebx, DWORD PTR mls$[rsp]
$LN1453@ZSTD_compr:
	mov	r11d, DWORD PTR offset_1$1$[rsp]
$LN1350@ZSTD_compr:
	mov	r15, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	ecx, DWORD PTR tv6393[rsp]
	mov	r9, -3523014627193167104		; cf1bbcdcbfa56300H
	mov	r8, QWORD PTR tv6310[rsp]
	mov	r12, -3523014627193847808		; cf1bbcdcbf9b0000H
	mov	r13, -3523014627271114752		; cf1bbcdcbb000000H
	cmp	rdi, QWORD PTR ilimit$1$[rsp]
	jb	$LL2@ZSTD_compr
	mov	eax, DWORD PTR offset_2$1$[rsp]
	mov	rbx, QWORD PTR iend$1$[rsp]
$LN3@ZSTD_compr:

; 519  : 
; 520  :     /* save reps for next block */
; 521  :     rep[0] = offset_1;

	mov	r9, QWORD PTR rep$[rsp]

; 522  :     rep[1] = offset_2;
; 523  : 
; 524  :     /* Return the last literals size */
; 525  :     return (size_t)(iend - anchor);

	sub	rbx, rsi
	mov	DWORD PTR [r9+4], eax
	mov	rax, rbx
	mov	DWORD PTR [r9], r11d
$LN1@ZSTD_compr:

; 526  : }

	mov	rbx, QWORD PTR [rsp+232]
	add	rsp, 160				; 000000a0H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ZSTD_compressBlock_doubleFast_extDict_generic ENDP
_TEXT	ENDS
END
